// Test script ƒë·ªÉ ki·ªÉm tra h·ªá th·ªëng login ƒë√£ c·∫≠p nh·∫≠t
// Ninh ∆°i - Test Login v·ªõi c·∫•u tr√∫c nh√≥m m·ªõi

const { mockGetUsers, mockGetTeams, mockLogin } = require('./src/services/mockAuth.ts');

async function testLoginSystem() {
  console.log('üß™ KI·ªÇM TRA H·ªÜ TH·ªêNG LOGIN ƒê√É C·∫¨P NH·∫¨T');
  console.log('=====================================');

  try {
    // Test 1: L·∫•y danh s√°ch users
    console.log('\nüìã Test 1: L·∫•y danh s√°ch users...');
    const usersResponse = await mockGetUsers();
    
    if (usersResponse.success && usersResponse.data) {
      console.log(`‚úÖ Th√†nh c√¥ng! T√¨m th·∫•y ${usersResponse.data.length} users`);
      
      // Hi·ªÉn th·ªã c·∫•u tr√∫c users theo nh√≥m
      const usersByLocation = usersResponse.data.reduce((acc, user) => {
        if (!acc[user.location]) acc[user.location] = [];
        acc[user.location].push(user);
        return acc;
      }, {});

      Object.keys(usersByLocation).forEach(location => {
        console.log(`\nüìç ${location}:`);
        usersByLocation[location].forEach(user => {
          console.log(`   - ${user.name} (${user.position}) - Team ${user.team_id}`);
        });
      });
    } else {
      console.log('‚ùå L·ªói khi l·∫•y danh s√°ch users:', usersResponse.error);
    }

    // Test 2: L·∫•y danh s√°ch teams
    console.log('\nüìã Test 2: L·∫•y danh s√°ch teams...');
    const teamsResponse = await mockGetTeams();
    
    if (teamsResponse.success && teamsResponse.data) {
      console.log(`‚úÖ Th√†nh c√¥ng! T√¨m th·∫•y ${teamsResponse.data.length} teams`);
      
      teamsResponse.data.forEach(team => {
        console.log(`   - ${team.name} (${team.location}) - Leader: ${team.leader_id}`);
      });
    } else {
      console.log('‚ùå L·ªói khi l·∫•y danh s√°ch teams:', teamsResponse.error);
    }

    // Test 3: Test login v·ªõi c√°c users kh√°c nhau
    console.log('\nüîê Test 3: Test login...');
    
    const testUsers = [
      { email: 'manh.khong@example.com', name: 'Kh·ªïng ƒê·ª©c M·∫°nh (Tr∆∞·ªüng ph√≤ng)' },
      { email: 'vietanh@example.com', name: 'L∆∞∆°ng Vi·ªát Anh (Tr∆∞·ªüng nh√≥m 1 HN)' },
      { email: 'thao.nguyen@example.com', name: 'Nguy·ªÖn Th·ªã Th·∫£o (Tr∆∞·ªüng nh√≥m 2 HN)' },
      { email: 'nga.nguyen@example.com', name: 'Nguy·ªÖn Th·ªã Nga (Tr∆∞·ªüng nh√≥m 1 HCM)' },
      { email: 'vietkhanh@example.com', name: 'Nguy·ªÖn Ng·ªçc Vi·ªát Khanh (Tr∆∞·ªüng nh√≥m 2 HCM)' },
      { email: 'khanhduy@example.com', name: 'L√™ Kh√°nh Duy (Nh√¢n vi√™n)' }
    ];

    for (const testUser of testUsers) {
      try {
        const loginResponse = await mockLogin(testUser.email, '123456');
        if (loginResponse.success) {
          console.log(`   ‚úÖ ${testUser.name}: ƒêƒÉng nh·∫≠p th√†nh c√¥ng`);
        } else {
          console.log(`   ‚ùå ${testUser.name}: ${loginResponse.error}`);
        }
      } catch (error) {
        console.log(`   ‚ùå ${testUser.name}: L·ªói - ${error.message}`);
      }
    }

    // Test 4: Ki·ªÉm tra c·∫•u tr√∫c nh√≥m
    console.log('\nüè¢ Test 4: Ki·ªÉm tra c·∫•u tr√∫c nh√≥m...');
    
    if (usersResponse.success && teamsResponse.success) {
      const users = usersResponse.data;
      const teams = teamsResponse.data;
      
      console.log('\nüìä Th·ªëng k√™ c·∫•u tr√∫c t·ªï ch·ª©c:');
      
      // Th·ªëng k√™ theo location
      const locationStats = users.reduce((acc, user) => {
        if (!acc[user.location]) {
          acc[user.location] = { total: 0, leaders: 0, employees: 0 };
        }
        acc[user.location].total++;
        if (user.role === 'team_leader') acc[user.location].leaders++;
        if (user.role === 'employee') acc[user.location].employees++;
        return acc;
      }, {});

      Object.keys(locationStats).forEach(location => {
        const stats = locationStats[location];
        console.log(`   üìç ${location}: ${stats.total} ng∆∞·ªùi (${stats.leaders} tr∆∞·ªüng nh√≥m, ${stats.employees} nh√¢n vi√™n)`);
      });

      // Ki·ªÉm tra teams c√≥ leader kh√¥ng
      console.log('\nüîç Ki·ªÉm tra teams v√† leaders:');
      teams.forEach(team => {
        const leader = users.find(user => user.id === team.leader_id);
        if (leader) {
          console.log(`   ‚úÖ ${team.name}: ${leader.name}`);
        } else {
          console.log(`   ‚ùå ${team.name}: Kh√¥ng t√¨m th·∫•y leader v·ªõi ID ${team.leader_id}`);
        }
      });
    }

    console.log('\nüéâ HO√ÄN TH√ÄNH KI·ªÇM TRA!');
    console.log('======================');

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error);
  }
}

// Ch·∫°y test
testLoginSystem();
