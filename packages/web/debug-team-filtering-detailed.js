// Debug team filtering logic chi ti·∫øt
import { chromium } from 'playwright';

async function debugTeamFiltering() {
  console.log('üîç B·∫Øt ƒë·∫ßu debug team filtering...');
  
  const browser = await chromium.launch({ headless: false });
  const page = await browser.newPage();
  
  // Capture console logs
  const consoleLogs = [];
  page.on('console', msg => {
    const text = msg.text();
    if (text.includes('Team view') || text.includes('TEAM FILTERING') || text.includes('selectedTeamForView') || text.includes('Task "')) {
      consoleLogs.push(`[${new Date().toISOString()}] ${text}`);
      console.log(`üîç ${text}`);
    }
  });
  
  try {
    // ƒêƒÉng nh·∫≠p
    console.log('üìù ƒêƒÉng nh·∫≠p v·ªõi Kh·ªïng ƒê·ª©c M·∫°nh');
    await page.goto('http://localhost:8088');
    await page.waitForLoadState('networkidle');
    
    // Ch·ªçn ƒë·ªãa ƒëi·ªÉm v√† user
    await page.selectOption('select', 'hanoi');
    await page.waitForTimeout(1000);
    
    // T√¨m option Kh·ªïng ƒê·ª©c M·∫°nh
    const userOptions = await page.locator('select >> nth=1 option').allTextContents();
    console.log('üìã Available users:', userOptions);
    
    // Ch·ªçn b·∫±ng value thay v√¨ label
    await page.selectOption('select >> nth=1', '1'); // Kh·ªïng ƒê·ª©c M·∫°nh c√≥ ID = 1
    await page.waitForTimeout(1000);
    
    // Nh·∫≠p password v√† ƒëƒÉng nh·∫≠p
    await page.fill('input[type="password"]', 'Haininh1');
    await page.click('button:has-text("ƒêƒÉng nh·∫≠p")');
    await page.waitForTimeout(3000);
    
    // V√†o tab C√¥ng vi·ªác
    await page.click('button:has-text("C√¥ng vi·ªác")');
    await page.waitForTimeout(2000);
    
    // V√†o tab C·ªßa nh√≥m
    console.log('üìù V√†o tab C·ªßa nh√≥m');
    await page.click('button:has-text("C·ªßa nh√≥m")');
    await page.waitForTimeout(3000);
    
    // Test ch·ªçn NH√ìM 2 - TH·∫¢O
    console.log('üéØ Test ch·ªçn NH√ìM 2 - TH·∫¢O');
    const team2Card = page.locator('.cursor-pointer').filter({ hasText: 'NH√ìM 2 - TH·∫¢O' });
    
    if (await team2Card.count() > 0) {
      await team2Card.click();
      console.log('‚úÖ ƒê√£ click NH√ìM 2 - TH·∫¢O');
      
      // ƒê·ª£i v√† capture logs
      await page.waitForTimeout(3000);
      
      // Ki·ªÉm tra header
      const header = await page.locator('h3').filter({ hasText: 'NH√ìM' }).textContent();
      console.log(`üìã Header hi·ªán t·∫°i: ${header}`);
      
      // ƒê·∫øm s·ªë tasks hi·ªÉn th·ªã
      const taskRows = await page.locator('tr:has(td)').count();
      console.log(`üìä S·ªë tasks hi·ªÉn th·ªã: ${taskRows}`);
      
      // L·∫•y th√¥ng tin m·ªôt v√†i tasks ƒë·∫ßu ti√™n
      if (taskRows > 0) {
        for (let i = 0; i < Math.min(5, taskRows); i++) {
          const taskTitle = await page.locator('tr:has(td)').nth(i).locator('td').first().textContent();
          console.log(`üìã Task ${i + 1}: ${taskTitle}`);
        }
      }
      
      // Ki·ªÉm tra console logs v·ªÅ filtering
      console.log('\nüîç Console logs v·ªÅ team filtering:');
      const teamFilteringLogs = consoleLogs.filter(log => 
        log.includes('selectedTeamForView') || 
        log.includes('TEAM FILTERING') ||
        log.includes('Task "') ||
        log.includes('team_id')
      );
      teamFilteringLogs.forEach(log => console.log(`   ${log}`));
      
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y NH√ìM 2 - TH·∫¢O');
    }
    
    // Take screenshot
    await page.screenshot({ path: 'debug-team-filtering-detailed.png', fullPage: true });
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    await browser.close();
  }
}

debugTeamFiltering();
