import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { useToast } from '@/hooks/use-toast';
import { LocalStorageSyncService } from '@/services/LocalStorageSyncService';
import {
  SyncButton,
  RefreshButton,
  ActionButton,
  DeleteButton
} from '@/components/ui/ActionButton';
import { Database, CheckCircle, AlertCircle, Clock } from 'lucide-react';

interface SyncStats {
  total: number;
  pending: number;
  synced: number;
  failed: number;
  lastSync: string | null;
}

export const LocalStorageSyncPanel: React.FC = () => {
  const [syncStats, setSyncStats] = useState<SyncStats>({
    total: 0,
    pending: 0,
    synced: 0,
    failed: 0,
    lastSync: null
  });
  const [isSyncing, setIsSyncing] = useState(false);
  const [syncProgress, setSyncProgress] = useState(0);
  const { toast } = useToast();
  
  const syncService = LocalStorageSyncService.getInstance();

  // Load sync stats
  const loadSyncStats = () => {
    const stats = syncService.getSyncStats();
    setSyncStats(stats);
  };

  useEffect(() => {
    loadSyncStats();
    
    // Refresh stats every 30 seconds
    const interval = setInterval(loadSyncStats, 30000);
    return () => clearInterval(interval);
  }, []);

  // Sync all tasks to Firebase
  const handleSyncAll = async () => {
    if (syncStats.pending === 0) {
      toast({
        title: 'Kh√¥ng c√≥ d·ªØ li·ªáu c·∫ßn ƒë·ªìng b·ªô',
        description: 'T·∫•t c·∫£ tasks ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô l√™n Firebase',
      });
      return;
    }

    setIsSyncing(true);
    setSyncProgress(0);

    try {
      toast({
        title: 'B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô',
        description: `ƒêang ƒë·ªìng b·ªô ${syncStats.pending} tasks l√™n Firebase...`,
      });

      // Simulate progress
      const progressInterval = setInterval(() => {
        setSyncProgress(prev => Math.min(prev + 10, 90));
      }, 200);

      const result = await syncService.syncAllToFirebase();
      
      clearInterval(progressInterval);
      setSyncProgress(100);

      if (result.success) {
        toast({
          title: 'ƒê·ªìng b·ªô th√†nh c√¥ng! üéâ',
          description: `ƒê√£ ƒë·ªìng b·ªô ${result.synced} tasks l√™n Firebase`,
        });
      } else {
        toast({
          title: 'ƒê·ªìng b·ªô ho√†n t·∫•t v·ªõi l·ªói',
          description: `Th√†nh c√¥ng: ${result.synced}, Th·∫•t b·∫°i: ${result.failed}`,
          variant: 'destructive',
        });
      }

      // Show detailed errors if any
      if (result.errors.length > 0) {
        console.error('Sync errors:', result.errors);
        toast({
          title: 'Chi ti·∫øt l·ªói',
          description: result.errors.slice(0, 3).join(', '),
          variant: 'destructive',
        });
      }

    } catch (error) {
      toast({
        title: 'L·ªói ƒë·ªìng b·ªô',
        description: error instanceof Error ? error.message : 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh',
        variant: 'destructive',
      });
    } finally {
      setIsSyncing(false);
      setSyncProgress(0);
      loadSyncStats();
    }
  };

  // Reset all tasks for re-sync
  const handleResetSync = () => {
    syncService.resetAllTasksForSync();
    loadSyncStats();
    toast({
      title: 'ƒê√£ reset tr·∫°ng th√°i sync',
      description: 'T·∫•t c·∫£ tasks s·∫Ω ƒë∆∞·ª£c ƒë·ªìng b·ªô l·∫°i trong l·∫ßn sync ti·∫øp theo',
    });
  };

  // Cleanup synced tasks
  const handleCleanup = () => {
    const cleanedCount = syncService.cleanupSyncedTasks();
    loadSyncStats();
    toast({
      title: 'D·ªçn d·∫πp ho√†n t·∫•t',
      description: `ƒê√£ x√≥a ${cleanedCount} tasks ƒë√£ ƒë·ªìng b·ªô kh·ªèi localStorage`,
    });
  };

  // Clear all local data
  const handleClearAll = () => {
    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a T·∫§T C·∫¢ d·ªØ li·ªáu local? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!')) {
      syncService.clearAllLocalData();
      loadSyncStats();
      toast({
        title: 'ƒê√£ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu local',
        description: 'localStorage ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch ho√†n to√†n',
        variant: 'destructive',
      });
    }
  };

  const formatLastSync = (lastSync: string | null) => {
    if (!lastSync) return 'Ch∆∞a ƒë·ªìng b·ªô';
    
    const date = new Date(lastSync);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffMins = Math.floor(diffMs / (1000 * 60));
    
    if (diffMins < 1) return 'V·ª´a xong';
    if (diffMins < 60) return `${diffMins} ph√∫t tr∆∞·ªõc`;
    if (diffMins < 1440) return `${Math.floor(diffMins / 60)} gi·ªù tr∆∞·ªõc`;
    return date.toLocaleDateString('vi-VN');
  };

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Database className="h-5 w-5" />
          ƒê·ªìng b·ªô d·ªØ li·ªáu LocalStorage ‚Üí Firebase
        </CardTitle>
        <CardDescription>
          Qu·∫£n l√Ω v√† ƒë·ªìng b·ªô c√°c tasks ƒë√£ nh·∫≠p t·ª´ tr√¨nh duy·ªát l√™n Firebase cho to√†n b·ªô ng∆∞·ªùi d√πng
        </CardDescription>
      </CardHeader>
      
      <CardContent className="space-y-6">
        {/* Sync Stats */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="text-center p-3 bg-blue-50 rounded-lg">
            <div className="text-2xl font-bold text-blue-600">{syncStats.total}</div>
            <div className="text-sm text-blue-600">T·ªïng tasks</div>
          </div>
          
          <div className="text-center p-3 bg-orange-50 rounded-lg">
            <div className="text-2xl font-bold text-orange-600">{syncStats.pending}</div>
            <div className="text-sm text-orange-600">Ch·ªù ƒë·ªìng b·ªô</div>
          </div>
          
          <div className="text-center p-3 bg-green-50 rounded-lg">
            <div className="text-2xl font-bold text-green-600">{syncStats.synced}</div>
            <div className="text-sm text-green-600">ƒê√£ ƒë·ªìng b·ªô</div>
          </div>
          
          <div className="text-center p-3 bg-red-50 rounded-lg">
            <div className="text-2xl font-bold text-red-600">{syncStats.failed}</div>
            <div className="text-sm text-red-600">Th·∫•t b·∫°i</div>
          </div>
        </div>

        {/* Last Sync Info */}
        <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
          <div className="flex items-center gap-2">
            <Clock className="h-4 w-4 text-gray-500" />
            <span className="text-sm text-gray-600">L·∫ßn ƒë·ªìng b·ªô cu·ªëi:</span>
          </div>
          <Badge variant="outline">
            {formatLastSync(syncStats.lastSync)}
          </Badge>
        </div>

        {/* Sync Progress */}
        {isSyncing && (
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium">ƒêang ƒë·ªìng b·ªô...</span>
              <span className="text-sm text-gray-500">{syncProgress}%</span>
            </div>
            <Progress value={syncProgress} className="w-full" />
          </div>
        )}

        {/* Action Buttons - Grouped by Function */}
        <div className="space-y-4">
          {/* Data Operations */}
          <div className="space-y-3">
            <h4 className="text-sm font-medium text-gray-700 border-b pb-1">Thao t√°c d·ªØ li·ªáu</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <SyncButton
                onClick={handleSyncAll}
                disabled={isSyncing || syncStats.pending === 0}
                loading={isSyncing}
                className="w-full"
                title={`ƒê·ªìng b·ªô ${syncStats.pending} tasks l√™n Firebase`}
              >
                ƒê·ªìng b·ªô t·∫•t c·∫£ ({syncStats.pending})
              </SyncButton>

              <RefreshButton
                type="ui"
                onClick={loadSyncStats}
                disabled={isSyncing}
                className="w-full"
                variant="outline"
                title="L√†m m·ªõi th·ªëng k√™ t·ª´ localStorage"
              >
                L√†m m·ªõi th·ªëng k√™
              </RefreshButton>
            </div>
          </div>

          {/* State Management */}
          <div className="space-y-3">
            <h4 className="text-sm font-medium text-gray-700 border-b pb-1">Qu·∫£n l√Ω tr·∫°ng th√°i</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <ActionButton
                iconType="reset-state"
                onClick={handleResetSync}
                disabled={isSyncing || syncStats.total === 0}
                className="w-full"
                variant="outline"
                title="ƒê·∫∑t l·∫°i t·∫•t c·∫£ tasks v·ªÅ tr·∫°ng th√°i ch·ªù ƒë·ªìng b·ªô"
              >
                ƒê·∫∑t l·∫°i ƒë·ªÉ sync l·∫°i
              </ActionButton>

              <ActionButton
                iconType="success"
                onClick={handleCleanup}
                disabled={isSyncing || syncStats.synced === 0}
                className="w-full"
                variant="outline"
                title={`X√≥a ${syncStats.synced} tasks ƒë√£ ƒë·ªìng b·ªô kh·ªèi localStorage`}
              >
                D·ªçn d·∫πp ƒë√£ ho√†n th√†nh ({syncStats.synced})
              </ActionButton>
            </div>
          </div>
        </div>

        {/* Danger Zone */}
        <div className="border-t border-red-200 pt-4">
          <h4 className="text-sm font-medium text-red-600 mb-3 flex items-center gap-2">
            ‚ö†Ô∏è V√πng nguy hi·ªÉm
          </h4>
          <DeleteButton
            onClick={handleClearAll}
            disabled={isSyncing}
            size="sm"
            className="w-full"
            title="X√≥a ho√†n to√†n t·∫•t c·∫£ d·ªØ li·ªáu tasks trong localStorage"
          >
            X√≥a t·∫•t c·∫£ d·ªØ li·ªáu local
          </DeleteButton>
        </div>

        {/* Status Indicators */}
        <div className="flex flex-wrap gap-2 text-xs">
          <div className="flex items-center gap-1">
            <Clock className="h-3 w-3 text-orange-500" />
            <span>Ch·ªù ƒë·ªìng b·ªô</span>
          </div>
          <div className="flex items-center gap-1">
            <CheckCircle className="h-3 w-3 text-green-500" />
            <span>ƒê√£ ƒë·ªìng b·ªô</span>
          </div>
          <div className="flex items-center gap-1">
            <AlertCircle className="h-3 w-3 text-red-500" />
            <span>Th·∫•t b·∫°i</span>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};
