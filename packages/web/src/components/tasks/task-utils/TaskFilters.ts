// C√°c h√†m ti·ªán √≠ch li√™n quan ƒë·∫øn vi·ªác l·ªçc c√¥ng vi·ªác
import { Team, User } from '@/types/user';

import { Task } from '../types/TaskTypes';

// H√†m s·∫Øp x·∫øp tasks theo th·ªùi gian v√† m·ª©c ƒë·ªô ∆∞u ti√™n
export const sortTasks = (tasks: Task[]): Task[] => {
  return tasks.sort((a, b) => {
    // L·∫•y th·ªùi gian m·ªõi nh·∫•t (updated_at ho·∫∑c created_at)
    const getLatestTime = (task: Task) => {
      const updatedAt = task.updated_at || task.created_at;
      const createdAt = task.created_at;
      return new Date(updatedAt || createdAt).getTime();
    };

    const timeA = getLatestTime(a);
    const timeB = getLatestTime(b);

    // S·∫Øp x·∫øp theo th·ªùi gian gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc)
    const timeDiff = timeB - timeA;

    // N·∫øu kh√°c nhau h∆°n 1 ph√∫t, s·∫Øp x·∫øp theo th·ªùi gian
    if (Math.abs(timeDiff) > 60000) {
      return timeDiff;
    }

    // N·∫øu c√πng th·ªùi gian (trong v√≤ng 1 ph√∫t), s·∫Øp x·∫øp theo priority
    const priorityWeight = {
      urgent: 4,
      high: 3,
      normal: 2,
      low: 1
    };

    const priorityA = priorityWeight[a.priority as keyof typeof priorityWeight] || 2;
    const priorityB = priorityWeight[b.priority as keyof typeof priorityWeight] || 2;

    return priorityB - priorityA; // Priority cao h∆°n tr∆∞·ªõc
  });
};

// H√†m filter tasks theo ng√†y - ∆∞u ti√™n hi·ªÉn th·ªã c√¥ng vi·ªác hi·ªán t·∫°i v√† pending tasks
export const filterTasksByDate = (tasks: Task[], dateFilter: string = 'current'): Task[] => {
  const today = new Date();
  today.setHours(0, 0, 0, 0);

  console.log('üîç DEBUG filterTasksByDate:', {
    dateFilter,
    totalTasks: tasks.length,
    todayTimestamp: today.getTime()
  });

  return tasks.filter(task => {
    // S·ª≠ d·ª•ng created_at thay v√¨ date ƒë·ªÉ filter theo ng√†y t·∫°o task
    const createdAtField = task.created_at || task.date;
    if (!createdAtField) {
      console.log('‚ùå Task missing created_at and date:', task.id);
      return true; // Hi·ªÉn th·ªã task kh√¥ng c√≥ ng√†y
    }

    // Parse ng√†y t·∫°o task - handle multiple formats
    let taskCreatedDate;
    try {
      if (createdAtField && typeof createdAtField === 'object') {
        // Handle Firestore Timestamp
        if (createdAtField.toDate && typeof createdAtField.toDate === 'function') {
          taskCreatedDate = createdAtField.toDate();
        }
        // Handle plain object with _seconds and _nanoseconds
        else if (createdAtField._seconds && typeof createdAtField._seconds === 'number') {
          taskCreatedDate = new Date(createdAtField._seconds * 1000);
        }
        // Handle other object formats
        else {
          taskCreatedDate = new Date(createdAtField);
        }
      } else {
        // Handle string format
        taskCreatedDate = new Date(createdAtField);
      }

      // Validate parsed date
      if (isNaN(taskCreatedDate.getTime())) {
        console.log('‚ùå Invalid date for task:', task.id, createdAtField);
        return false;
      }

      taskCreatedDate.setHours(0, 0, 0, 0);
    } catch (error) {
      console.log('‚ùå Error parsing date for task:', task.id, error.message);
      return false;
    }

    console.log('üìÖ Task date comparison:', {
      taskId: task.id,
      taskTitle: task.title,
      createdAtField,
      taskCreatedDate: taskCreatedDate.toISOString(),
      taskTimestamp: taskCreatedDate.getTime()
    });

    switch (dateFilter) {
      case 'current':
        // LOGIC M·ªöI: Hi·ªÉn th·ªã c√¥ng vi·ªác hi·ªán t·∫°i + pending tasks t·ª´ qu√° kh·ª©
        const isToday = taskCreatedDate.getTime() === today.getTime();
        const isFromPast = taskCreatedDate.getTime() < today.getTime();
        const isPending = task.status === 'todo' || task.status === 'in-progress' || task.status === 'on-hold';

        // Hi·ªÉn th·ªã n·∫øu:
        // 1. L√† c√¥ng vi·ªác h√¥m nay
        // 2. L√† c√¥ng vi·ªác c≈© nh∆∞ng ch∆∞a ho√†n th√†nh (pending)
        const shouldShow = isToday || (isFromPast && isPending);
        console.log(`üìÖ Current filter for ${task.id}:`, { isToday, isFromPast, isPending, shouldShow });
        return shouldShow;

      case 'today':
        const isTodayOnly = taskCreatedDate.getTime() === today.getTime();
        console.log(`üìÖ Today filter for ${task.id}:`, isTodayOnly);
        return isTodayOnly;

      case 'yesterday':
        const yesterday = new Date(today);
        yesterday.setDate(yesterday.getDate() - 1);
        const isYesterday = taskCreatedDate.getTime() === yesterday.getTime();
        console.log(`üìÖ Yesterday filter for ${task.id}:`, isYesterday);
        return isYesterday;

      case 'tomorrow':
        const tomorrow = new Date(today);
        tomorrow.setDate(tomorrow.getDate() + 1);
        const isTomorrow = taskCreatedDate.getTime() === tomorrow.getTime();
        console.log(`üìÖ Tomorrow filter for ${task.id}:`, isTomorrow);
        return isTomorrow;

      case 'this-week':
        const startOfWeek = new Date(today);
        startOfWeek.setDate(today.getDate() - today.getDay());
        const endOfWeek = new Date(startOfWeek);
        endOfWeek.setDate(startOfWeek.getDate() + 6);
        endOfWeek.setHours(23, 59, 59, 999);
        const isThisWeek = taskCreatedDate >= startOfWeek && taskCreatedDate <= endOfWeek;
        console.log(`üìÖ This week filter for ${task.id}:`, isThisWeek);
        return isThisWeek;

      case 'this-month':
        const isThisMonth = taskCreatedDate.getMonth() === today.getMonth() &&
               taskCreatedDate.getFullYear() === today.getFullYear();
        console.log(`üìÖ This month filter for ${task.id}:`, isThisMonth);
        return isThisMonth;

      case 'all':
        console.log(`üìÖ All filter for ${task.id}: true`);
        return true;

      default:
        // Default to 'current' behavior
        const isDefaultToday = taskCreatedDate.getTime() === today.getTime();
        const isDefaultFromPast = taskCreatedDate.getTime() < today.getTime();
        const isDefaultPending = task.status === 'todo' || task.status === 'in-progress' || task.status === 'on-hold';
        const defaultShouldShow = isDefaultToday || (isDefaultFromPast && isDefaultPending);
        console.log(`üìÖ Default (current) filter for ${task.id}:`, defaultShouldShow);
        return defaultShouldShow;
    }
  });
};

export const filterTasksByUserRole = (
  tasks: Task[],
  currentUser: User | null,
  teams: Team[],
  location: string,
  teamId: string,
): Task[] => {
  return tasks.filter((task) => {
    // L·ªçc theo khu v·ª±c
    const matchLocation = location === 'all' || task.location === location;

    // L·ªçc theo quy·ªÅn c·ªßa ng∆∞·ªùi d√πng
    let hasPermissionToView = false;

    if (currentUser) {
      if (currentUser.role === 'retail_director') {
        // Retail Director ch·ªâ xem c√¥ng vi·ªác c·ªßa ph√≤ng b√°n l·∫ª
        hasPermissionToView = true; // S·∫Ω ƒë∆∞·ª£c l·ªçc ·ªü TaskDataProvider
      } else if (currentUser.role === 'team_leader') {
        // Tr∆∞·ªüng nh√≥m ch·ªâ xem c√¥ng vi·ªác ƒë∆∞·ª£c giao cho th√†nh vi√™n trong nh√≥m
        hasPermissionToView = true; // S·∫Ω ƒë∆∞·ª£c l·ªçc ·ªü TaskDataProvider
      } else {
        // Nh√¢n vi√™n ch·ªâ xem c√¥ng vi·ªác ƒë∆∞·ª£c giao cho m√¨nh
        hasPermissionToView = task.assignedTo === currentUser.id;
      }
    }

    // L·ªçc theo nh√≥m n·∫øu ƒë∆∞·ª£c ch·ªçn
    const matchTeam = teamId === 'all' || task.teamId === teamId;

    return matchLocation && matchTeam && hasPermissionToView;
  });
};

// T·∫°o danh s√°ch nh√≥m c√¥ng vi·ªác theo th·ªùi gian v√† tr·∫°ng th√°i
export const groupTasks = (filteredTasks: Task[]) => {
  // S·∫Øp x·∫øp tasks tr∆∞·ªõc khi nh√≥m
  const sortedTasks = sortTasks(filteredTasks);

  // L·∫•y ng√†y hi·ªán t·∫°i ƒë·ªÉ so s√°nh
  const today = new Date();
  today.setHours(0, 0, 0, 0); // Reset th·ªùi gian v·ªÅ 00:00:00

  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);

  const nextWeekStart = new Date(today);
  nextWeekStart.setDate(today.getDate() + 7);

  // ƒê·ªãnh d·∫°ng ng√†y th√°ng ƒë·ªÉ hi·ªÉn th·ªã
  const formatDate = (date: Date) => {
    return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;
  };

  // Kh·ªüi t·∫°o c√°c nh√≥m
  const todayDateStr = formatDate(today);
  const tomorrowDateStr = formatDate(tomorrow);

  const groupedTasks: Record<string, Task[]> = {
    'T·∫•t c·∫£ c√¥ng vi·ªác': filteredTasks,
    [`H√¥m nay (${todayDateStr})`]: [],
    [`Ng√†y mai (${tomorrowDateStr})`]: [],
    'Tu·∫ßn n√†y': [],
    'Th√°ng n√†y': [],
    'C·∫ßn l√†m': [],
    'ƒêang th·ª±c hi·ªán': [],
    'T·∫°m ho√£n': [],
    'ƒê√£ ho√†n th√†nh': [],
  };

  // Ph√¢n lo·∫°i c√¥ng vi·ªác v√†o c√°c nh√≥m
  sortedTasks.forEach((task) => {
    // Ph√¢n lo·∫°i theo tr·∫°ng th√°i
    if (task.status === 'todo') {
      groupedTasks['C·∫ßn l√†m'].push(task);
    } else if (task.status === 'in-progress') {
      groupedTasks['ƒêang th·ª±c hi·ªán'].push(task);
    } else if (task.status === 'on-hold') {
      groupedTasks['T·∫°m ho√£n'].push(task);
    } else if (task.status === 'completed') {
      groupedTasks['ƒê√£ ho√†n th√†nh'].push(task);
    }

    // Ph√¢n lo·∫°i theo th·ªùi gian
    try {
      if (task.date) {
        const taskDate = new Date(task.date);
        taskDate.setHours(0, 0, 0, 0); // Reset th·ªùi gian ƒë·ªÉ so s√°nh ch√≠nh x√°c

        // Ki·ªÉm tra ng√†y c·ªßa task
        if (taskDate.getTime() === today.getTime()) {
          groupedTasks[`H√¥m nay (${todayDateStr})`].push(task);
        } else if (taskDate.getTime() === tomorrow.getTime()) {
          groupedTasks[`Ng√†y mai (${tomorrowDateStr})`].push(task);
        }

        // Ki·ªÉm tra tu·∫ßn
        const taskDay = taskDate.getDay();
        const todayDay = today.getDay();

        const startOfWeek = new Date(today);
        startOfWeek.setDate(today.getDate() - todayDay); // L√πi ng√†y v·ªÅ ƒë·∫ßu tu·∫ßn (Ch·ªß Nh·∫≠t)

        const endOfWeek = new Date(startOfWeek);
        endOfWeek.setDate(startOfWeek.getDate() + 6); // Cu·ªëi tu·∫ßn (Th·ª© B·∫£y)

        if (taskDate >= startOfWeek && taskDate <= endOfWeek) {
          groupedTasks['Tu·∫ßn n√†y'].push(task);
        }

        // Ki·ªÉm tra th√°ng
        if (
          taskDate.getMonth() === today.getMonth() &&
          taskDate.getFullYear() === today.getFullYear()
        ) {
          groupedTasks['Th√°ng n√†y'].push(task);
        }
      }
    } catch (error) {
      console.error('L·ªói khi x·ª≠ l√Ω ng√†y th√°ng c·ªßa c√¥ng vi·ªác:', error);
    }
  });

  // L·ªçc b·ªè c√°c nh√≥m kh√¥ng c√≥ c√¥ng vi·ªác n√†o
  return Object.fromEntries(
    Object.entries(groupedTasks)
      .filter(([_, tasks]) => tasks.length > 0)
      .sort(([groupA], [groupB]) => {
        // S·∫Øp x·∫øp c√°c nh√≥m theo th·ª© t·ª± ∆∞u ti√™n
        const groupOrder = {
          'T·∫•t c·∫£ c√¥ng vi·ªác': 0,
          [`H√¥m nay (${todayDateStr})`]: 1,
          [`Ng√†y mai (${tomorrowDateStr})`]: 2,
          'Tu·∫ßn n√†y': 3,
          'Th√°ng n√†y': 4,
          'C·∫ßn l√†m': 5,
          'ƒêang th·ª±c hi·ªán': 6,
          'T·∫°m ho√£n': 7,
          'ƒê√£ ho√†n th√†nh': 8,
        };

        const orderA = groupOrder[groupA] !== undefined ? groupOrder[groupA] : 999;
        const orderB = groupOrder[groupB] !== undefined ? groupOrder[groupB] : 999;

        return orderA - orderB;
      }),
  );
};
