import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Calendar, Clock, Users, FileText, AlertCircle } from 'lucide-react';

import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';
import { User } from '@/types/user';
import { personalPlanService } from '@/services/PersonalPlanService';
import { autoPlanSyncService } from '@/services/AutoPlanSyncService';

interface SimpleCreatePlanModalProps {
  isOpen: boolean;
  onClose: () => void;
  currentUser: User | null;
  onPlanCreated?: () => void;
}

const SimpleCreatePlanModal: React.FC<SimpleCreatePlanModalProps> = ({ 
  isOpen, 
  onClose, 
  currentUser, 
  onPlanCreated 
}) => {
  const [formData, setFormData] = useState({
    title: '',
    type: '',
    startDate: '',
    endDate: ''
  });

  // Auto-fill current date when modal opens
  useEffect(() => {
    if (isOpen && !formData.startDate) {
      const today = new Date();
      const todayString = today.toISOString().split('T')[0];

      setFormData(prev => ({
        ...prev,
        startDate: todayString,
        endDate: todayString
      }));
    }
  }, [isOpen]);

  const planTypes = [
    { value: 'personal', label: 'üë§ C√° nh√¢n', description: 'K·∫ø ho·∫°ch c√° nh√¢n' },
    { value: 'team', label: 'üë• Nh√≥m', description: 'K·∫ø ho·∫°ch nh√≥m/team' },
    { value: 'department', label: 'üè¢ To√†n ph√≤ng', description: 'K·∫ø ho·∫°ch to√†n ph√≤ng ban' },
    { value: 'meeting', label: 'ü§ù H·ªçp', description: 'Cu·ªôc h·ªçp n·ªôi b·ªô ho·∫∑c v·ªõi kh√°ch h√†ng' },
    { value: 'training', label: 'üìö ƒê√†o t·∫°o', description: 'Tham gia ho·∫∑c t·ªï ch·ª©c ƒë√†o t·∫°o' },
    { value: 'report', label: 'üìä B√°o c√°o', description: 'T·∫°o v√† tr√¨nh b√†y b√°o c√°o' },
    { value: 'other', label: 'üìù Kh√°c', description: 'K·∫ø ho·∫°ch kh√°c' }
  ];

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Validation - ch·ªâ c·∫ßn 4 tr∆∞·ªùng ch√≠nh
    if (!formData.title || !formData.type || !formData.startDate || !formData.endDate) {
      alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc: Ti√™u ƒë·ªÅ, Lo·∫°i, Ng√†y b·∫Øt ƒë·∫ßu, Ng√†y k·∫øt th√∫c');
      return;
    }

    if (!currentUser?.id) {
      alert('L·ªói: Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng');
      return;
    }

    try {
      // T·∫°o k·∫ø ho·∫°ch m·ªõi v·ªõi th√¥ng tin ƒë∆°n gi·∫£n
      const newPlan = personalPlanService.addPlan(currentUser.id, {
        title: formData.title,
        description: `K·∫ø ho·∫°ch ${formData.type} t·ª´ ${formData.startDate} ƒë·∫øn ${formData.endDate}`,
        type: formData.type as any,
        status: 'pending',
        priority: 'normal',
        startDate: formData.startDate,
        endDate: formData.endDate,
        startTime: '09:00',
        endTime: '17:00',
        location: '',
        notes: 'T·ª± ƒë·ªông chuy·ªÉn th√†nh c√¥ng vi·ªác khi ƒë·∫øn h·∫°n',
        participants: [],
        creator: currentUser.name
      });

      console.log('‚úÖ ƒê√£ t·∫°o k·∫ø ho·∫°ch:', newPlan.title);

      // Reset form
      setFormData({
        title: '',
        type: '',
        startDate: '',
        endDate: ''
      });

      // Callback ƒë·ªÉ refresh data
      if (onPlanCreated) {
        onPlanCreated();
      }

      // Force refresh ModernCalendar
      if ((window as any).refreshModernCalendar) {
        (window as any).refreshModernCalendar();
      }

      // Force refresh other components
      if ((window as any).refreshCalendarPlans) {
        (window as any).refreshCalendarPlans();
      }

      if ((window as any).refreshPlanList) {
        (window as any).refreshPlanList();
      }

      // Trigger auto-sync
      console.log('üöÄ Triggering auto-sync after plan creation...');
      autoPlanSyncService.manualSync(currentUser.id)
        .then(() => {
          console.log('‚úÖ Auto-sync completed');
        })
        .catch((error) => {
          console.error('‚ùå Error in auto-sync:', error);
        });

      onClose();
      alert('T·∫°o k·∫ø ho·∫°ch th√†nh c√¥ng! K·∫ø ho·∫°ch s·∫Ω t·ª± ƒë·ªông chuy·ªÉn th√†nh c√¥ng vi·ªác khi ƒë·∫øn h·∫°n.');
    } catch (error) {
      console.error('L·ªói khi t·∫°o k·∫ø ho·∫°ch:', error);
      alert('C√≥ l·ªói x·∫£y ra khi t·∫°o k·∫ø ho·∫°ch. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  if (!isOpen) return null;

  return (
    <AnimatePresence>
      <div className="fixed inset-0 z-50 flex items-center justify-center">
        {/* Backdrop */}
        <motion.div
          className="absolute inset-0 bg-black/50 backdrop-blur-sm"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          onClick={onClose}
        />

        {/* Modal */}
        <motion.div
          className="relative bg-white rounded-2xl shadow-2xl w-full max-w-md mx-4"
          initial={{ opacity: 0, scale: 0.95, y: 20 }}
          animate={{ opacity: 1, scale: 1, y: 0 }}
          exit={{ opacity: 0, scale: 0.95, y: 20 }}
          transition={{ duration: 0.2 }}
        >
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b border-gray-200">
            <h2 className="text-xl font-semibold text-gray-900">üìÖ T·∫°o k·∫ø ho·∫°ch m·ªõi</h2>
            <Button variant="ghost" size="sm" onClick={onClose}>
              <X className="w-5 h-5" />
            </Button>
          </div>

          {/* Form */}
          <form onSubmit={handleSubmit} className="p-6 space-y-4">
            {/* Ti√™u ƒë·ªÅ */}
            <div className="space-y-2">
              <Label htmlFor="title" className="text-sm font-medium">
                Ti√™u ƒë·ªÅ k·∫ø ho·∫°ch <span className="text-red-500">*</span>
              </Label>
              <Input
                id="title"
                value={formData.title}
                onChange={(e) => handleInputChange('title', e.target.value)}
                placeholder="Nh·∫≠p ti√™u ƒë·ªÅ k·∫ø ho·∫°ch..."
                className="w-full"
              />
            </div>

            {/* Lo·∫°i k·∫ø ho·∫°ch */}
            <div className="space-y-2">
              <Label className="text-sm font-medium">
                Lo·∫°i k·∫ø ho·∫°ch <span className="text-red-500">*</span>
              </Label>
              <Select value={formData.type} onValueChange={(value) => handleInputChange('type', value)}>
                <SelectTrigger>
                  <SelectValue placeholder="Ch·ªçn lo·∫°i k·∫ø ho·∫°ch" />
                </SelectTrigger>
                <SelectContent>
                  {planTypes.map((type) => (
                    <SelectItem key={type.value} value={type.value}>
                      <div className="flex flex-col">
                        <span>{type.label}</span>
                        <span className="text-xs text-gray-500">{type.description}</span>
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c */}
            <div className="grid grid-cols-2 gap-3">
              <div className="space-y-2">
                <Label className="text-sm font-medium">
                  Ng√†y b·∫Øt ƒë·∫ßu <span className="text-red-500">*</span>
                </Label>
                <Input
                  type="date"
                  value={formData.startDate}
                  onChange={(e) => handleInputChange('startDate', e.target.value)}
                />
              </div>
              <div className="space-y-2">
                <Label className="text-sm font-medium">
                  Ng√†y k·∫øt th√∫c <span className="text-red-500">*</span>
                </Label>
                <Input
                  type="date"
                  value={formData.endDate}
                  onChange={(e) => handleInputChange('endDate', e.target.value)}
                />
              </div>
            </div>

            {/* Info */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
              <div className="flex items-start gap-2">
                <AlertCircle className="w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0" />
                <div className="text-sm text-blue-800">
                  <p className="font-medium">T·ª± ƒë·ªông k√≠ch ho·∫°t</p>
                  <p>K·∫ø ho·∫°ch s·∫Ω t·ª± ƒë·ªông chuy·ªÉn th√†nh c√¥ng vi·ªác khi ƒë·∫øn ng√†y b·∫Øt ƒë·∫ßu.</p>
                </div>
              </div>
            </div>

            {/* Actions */}
            <div className="flex gap-3 pt-4">
              <Button
                type="button"
                variant="outline"
                onClick={onClose}
                className="flex-1"
              >
                H·ªßy
              </Button>
              <Button
                type="submit"
                className="flex-1 bg-blue-600 hover:bg-blue-700"
              >
                T·∫°o k·∫ø ho·∫°ch
              </Button>
            </div>
          </form>
        </motion.div>
      </div>
    </AnimatePresence>
  );
};

export default SimpleCreatePlanModal;
