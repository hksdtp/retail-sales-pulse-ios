import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  X, 
  Calendar, 
  Clock, 
  Users, 
  MapPin, 
  FileText, 
  AlertCircle,
  Plus,
  Minus
} from 'lucide-react';

import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { User } from '@/types/user';
import { personalPlanService } from '@/services/PersonalPlanService';

interface CreatePlanModalProps {
  isOpen: boolean;
  onClose: () => void;
  currentUser: User | null;
  onPlanCreated?: () => void; // Callback ƒë·ªÉ refresh data
}

const CreatePlanModal: React.FC<CreatePlanModalProps> = ({ isOpen, onClose, currentUser, onPlanCreated }) => {
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    type: '',
    priority: '',
    startDate: '',
    endDate: '',
    startTime: '',
    endTime: '',
    location: '',
    notes: '',
    participants: [] as string[]
  });

  const [newParticipant, setNewParticipant] = useState('');

  // Auto-fill current date when modal opens
  useEffect(() => {
    if (isOpen && !formData.startDate) {
      const today = new Date();
      const todayString = today.toISOString().split('T')[0]; // YYYY-MM-DD format
      const currentTime = today.toTimeString().slice(0, 5); // HH:MM format

      setFormData(prev => ({
        ...prev,
        startDate: todayString,
        startTime: currentTime
      }));
    }
  }, [isOpen]);

  // Mock danh s√°ch nh√¢n vi√™n
  const availableEmployees = [
    'Kh·ªïng ƒê·ª©c M·∫°nh',
    'L∆∞∆°ng Vi·ªát Anh', 
    'L√™ Kh√°nh Duy',
    'Ph·∫°m Th·ªã H∆∞∆°ng',
    'Nguy·ªÖn Th·ªã Th·∫£o',
    'Tr·ªãnh Th·ªã B·ªën',
    'L√™ Ti·∫øn Qu√¢n',
    'Qu·∫£n Thu H√†',
    'Nguy·ªÖn Th·ªã Nga',
    'Ph√πng Th·ªã Thu·ª≥ V√¢n',
    'Nguy·ªÖn Ng·ªçc Vi·ªát Khanh',
    'H√† Nguy·ªÖn Thanh Tuy·ªÅn'
  ];

  const planTypes = [
    { value: 'meeting', label: 'ü§ù H·ªçp', description: 'Cu·ªôc h·ªçp, th·∫£o lu·∫≠n' },
    { value: 'site_visit', label: 'üèóÔ∏è Kh·∫£o s√°t', description: 'Kh·∫£o s√°t ƒë·ªãa ƒëi·ªÉm, d·ª± √°n' },
    { value: 'report', label: 'üìä B√°o c√°o', description: 'B√°o c√°o, thuy·∫øt tr√¨nh' },
    { value: 'training', label: 'üìö ƒê√†o t·∫°o', description: 'ƒê√†o t·∫°o, h·ªçc t·∫≠p' },
    { value: 'client_meeting', label: 'üë• G·∫∑p kh√°ch h√†ng', description: 'G·∫∑p g·ª° kh√°ch h√†ng' },
    { value: 'other', label: 'üìã Kh√°c', description: 'K·∫ø ho·∫°ch kh√°c' }
  ];

  const priorities = [
    { value: 'high', label: 'Cao', color: 'bg-red-100 text-red-800 border-red-200' },
    { value: 'medium', label: 'Trung b√¨nh', color: 'bg-yellow-100 text-yellow-800 border-yellow-200' },
    { value: 'low', label: 'Th·∫•p', color: 'bg-green-100 text-green-800 border-green-200' }
  ];

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const addParticipant = (participant: string) => {
    if (participant && !formData.participants.includes(participant)) {
      setFormData(prev => ({
        ...prev,
        participants: [...prev.participants, participant]
      }));
      setNewParticipant('');
    }
  };

  const removeParticipant = (participant: string) => {
    setFormData(prev => ({
      ...prev,
      participants: prev.participants.filter(p => p !== participant)
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    // Validation
    if (!formData.title || !formData.type || !formData.startDate || !formData.startTime) {
      alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
      return;
    }

    if (!currentUser?.id) {
      alert('L·ªói: Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng');
      return;
    }

    try {
      // T·∫°o k·∫ø ho·∫°ch m·ªõi trong personal workspace
      const newPlan = personalPlanService.addPlan(currentUser.id, {
        title: formData.title,
        description: formData.description,
        type: formData.type as any,
        status: 'pending',
        priority: formData.priority as any || 'medium',
        startDate: formData.startDate,
        endDate: formData.endDate || formData.startDate,
        startTime: formData.startTime,
        endTime: formData.endTime || formData.startTime,
        location: formData.location,
        notes: formData.notes,
        participants: formData.participants,
        creator: currentUser.name
      });

      console.log('‚úÖ ƒê√£ t·∫°o k·∫ø ho·∫°ch c√° nh√¢n:', newPlan.title);

      // Reset form v√† ƒë√≥ng modal
      setFormData({
        title: '',
        description: '',
        type: '',
        priority: '',
        startDate: '',
        endDate: '',
        startTime: '',
        endTime: '',
        location: '',
        notes: '',
        participants: []
      });

      // Callback ƒë·ªÉ refresh data
      if (onPlanCreated) {
        onPlanCreated();
      }

      onClose();
      alert('T·∫°o k·∫ø ho·∫°ch th√†nh c√¥ng!');
    } catch (error) {
      console.error('L·ªói khi t·∫°o k·∫ø ho·∫°ch:', error);
      alert('C√≥ l·ªói x·∫£y ra khi t·∫°o k·∫ø ho·∫°ch. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  if (!isOpen) return null;

  return (
    <AnimatePresence>
      <div className="fixed inset-0 z-[99999] flex items-center justify-center">
        {/* Backdrop */}
        <motion.div
          className="absolute inset-0 bg-black/50 backdrop-blur-sm"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          onClick={onClose}
        />

        {/* Modal */}
        <motion.div
          className="relative bg-white rounded-2xl shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto mx-4 mb-20"
          initial={{ opacity: 0, scale: 0.95, y: 20 }}
          animate={{ opacity: 1, scale: 1, y: 0 }}
          exit={{ opacity: 0, scale: 0.95, y: 20 }}
          transition={{ duration: 0.2 }}
        >
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b border-gray-200">
            <h2 className="text-xl font-semibold text-gray-900">T·∫°o k·∫ø ho·∫°ch m·ªõi</h2>
            <Button variant="ghost" size="sm" onClick={onClose}>
              <X className="w-5 h-5" />
            </Button>
          </div>

          {/* Form */}
          <form onSubmit={handleSubmit} className="p-6 space-y-6">
            {/* Ti√™u ƒë·ªÅ */}
            <div className="space-y-2">
              <Label htmlFor="title" className="text-sm font-medium">
                Ti√™u ƒë·ªÅ k·∫ø ho·∫°ch <span className="text-red-500">*</span>
              </Label>
              <Input
                id="title"
                value={formData.title}
                onChange={(e) => handleInputChange('title', e.target.value)}
                placeholder="Nh·∫≠p ti√™u ƒë·ªÅ k·∫ø ho·∫°ch..."
                className="w-full"
              />
            </div>

            {/* M√¥ t·∫£ */}
            <div className="space-y-2">
              <Label htmlFor="description" className="text-sm font-medium">M√¥ t·∫£</Label>
              <Textarea
                id="description"
                value={formData.description}
                onChange={(e) => handleInputChange('description', e.target.value)}
                placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ k·∫ø ho·∫°ch..."
                rows={3}
              />
            </div>

            {/* Lo·∫°i v√† ƒê·ªô ∆∞u ti√™n */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label className="text-sm font-medium">
                  Lo·∫°i k·∫ø ho·∫°ch <span className="text-red-500">*</span>
                </Label>
                <Select value={formData.type} onValueChange={(value) => handleInputChange('type', value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="Ch·ªçn lo·∫°i k·∫ø ho·∫°ch" />
                  </SelectTrigger>
                  <SelectContent>
                    {planTypes.map((type) => (
                      <SelectItem key={type.value} value={type.value}>
                        <div className="flex flex-col">
                          <span>{type.label}</span>
                          <span className="text-xs text-gray-500">{type.description}</span>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label className="text-sm font-medium">ƒê·ªô ∆∞u ti√™n</Label>
                <Select value={formData.priority} onValueChange={(value) => handleInputChange('priority', value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="Ch·ªçn ƒë·ªô ∆∞u ti√™n" />
                  </SelectTrigger>
                  <SelectContent>
                    {priorities.map((priority) => (
                      <SelectItem key={priority.value} value={priority.value}>
                        <Badge className={priority.color}>{priority.label}</Badge>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Ng√†y v√† Gi·ªù */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label className="text-sm font-medium">
                  Ng√†y b·∫Øt ƒë·∫ßu <span className="text-red-500">*</span>
                </Label>
                <Input
                  type="date"
                  value={formData.startDate}
                  onChange={(e) => handleInputChange('startDate', e.target.value)}
                />
              </div>
              <div className="space-y-2">
                <Label className="text-sm font-medium">Ng√†y k·∫øt th√∫c</Label>
                <Input
                  type="date"
                  value={formData.endDate}
                  onChange={(e) => handleInputChange('endDate', e.target.value)}
                />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label className="text-sm font-medium">
                  Gi·ªù b·∫Øt ƒë·∫ßu <span className="text-red-500">*</span>
                </Label>
                <Input
                  type="time"
                  value={formData.startTime}
                  onChange={(e) => handleInputChange('startTime', e.target.value)}
                />
              </div>
              <div className="space-y-2">
                <Label className="text-sm font-medium">Gi·ªù k·∫øt th√∫c</Label>
                <Input
                  type="time"
                  value={formData.endTime}
                  onChange={(e) => handleInputChange('endTime', e.target.value)}
                />
              </div>
            </div>

            {/* ƒê·ªãa ƒëi·ªÉm */}
            <div className="space-y-2">
              <Label htmlFor="location" className="text-sm font-medium">ƒê·ªãa ƒëi·ªÉm</Label>
              <Input
                id="location"
                value={formData.location}
                onChange={(e) => handleInputChange('location', e.target.value)}
                placeholder="Nh·∫≠p ƒë·ªãa ƒëi·ªÉm t·ªï ch·ª©c..."
              />
            </div>

            {/* Ng∆∞·ªùi tham gia */}
            <div className="space-y-2">
              <Label className="text-sm font-medium">Ng∆∞·ªùi tham gia</Label>
              <div className="flex gap-2">
                <Select value={newParticipant} onValueChange={setNewParticipant}>
                  <SelectTrigger className="flex-1">
                    <SelectValue placeholder="Ch·ªçn ng∆∞·ªùi tham gia" />
                  </SelectTrigger>
                  <SelectContent>
                    {availableEmployees
                      .filter(emp => !formData.participants.includes(emp))
                      .map((employee) => (
                        <SelectItem key={employee} value={employee}>
                          {employee}
                        </SelectItem>
                      ))}
                  </SelectContent>
                </Select>
                <Button 
                  type="button" 
                  onClick={() => addParticipant(newParticipant)}
                  disabled={!newParticipant}
                >
                  <Plus className="w-4 h-4" />
                </Button>
              </div>
              
              {formData.participants.length > 0 && (
                <div className="flex flex-wrap gap-2 mt-2">
                  {formData.participants.map((participant) => (
                    <Badge key={participant} variant="secondary" className="flex items-center gap-1">
                      {participant}
                      <button
                        type="button"
                        onClick={() => removeParticipant(participant)}
                        className="ml-1 hover:text-red-600"
                      >
                        <Minus className="w-3 h-3" />
                      </button>
                    </Badge>
                  ))}
                </div>
              )}
            </div>

            {/* Ghi ch√∫ */}
            <div className="space-y-2">
              <Label htmlFor="notes" className="text-sm font-medium">Ghi ch√∫</Label>
              <Textarea
                id="notes"
                value={formData.notes}
                onChange={(e) => handleInputChange('notes', e.target.value)}
                placeholder="Ghi ch√∫ th√™m..."
                rows={2}
              />
            </div>

            {/* Actions */}
            <div className="flex justify-end gap-3 pt-4 border-t border-gray-200">
              <Button type="button" variant="outline" onClick={onClose}>
                H·ªßy
              </Button>
              <Button type="submit" className="bg-blue-600 hover:bg-blue-700">
                T·∫°o k·∫ø ho·∫°ch
              </Button>
            </div>
          </form>
        </motion.div>
      </div>
    </AnimatePresence>
  );
};

export default CreatePlanModal;
