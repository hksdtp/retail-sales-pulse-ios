import { User } from '@/types/user';
import { taskKpiService } from '@/services/TaskKpiService';
import { Task } from '@/components/tasks/types/TaskTypes';

export interface KpiItem {
  title: string;
  value: string;
  oldValue: string;
  change: number;
  data: Array<{ value: number }>;
}

export const getKpiDataForUser = (currentUser: User | null, tasks: Task[] = []): KpiItem[] => {
  console.log('üîç getKpiDataForUser called with:', {
    user: currentUser?.name,
    userId: currentUser?.id,
    tasksCount: tasks.length,
    taskSample: tasks.slice(0, 2).map(t => ({ id: t.id, title: t.title, assignedTo: t.assignedTo, user_id: t.user_id }))
  });

  // S·ª≠ d·ª•ng TaskKpiService ƒë·ªÉ l·∫•y d·ªØ li·ªáu KPI t·ª´ c√¥ng vi·ªác
  const kpiData = taskKpiService.getKpiDataForUser(currentUser, tasks);

  console.log('üìä KPI data calculated:', kpiData);
  return kpiData;
};

// X√¢y d·ª±ng ti√™u ƒë·ªÅ ph·ª• (subtitle) d·ª±a tr√™n lo·∫°i ng∆∞·ªùi d√πng
export const getDashboardSubtitle = (currentUser: User | null): string => {
  const isDirector =
    currentUser?.role === 'retail_director' || currentUser?.role === 'project_director';
  const isTeamLeader = currentUser?.role === 'team_leader';

  if (isDirector) {
    const departmentType =
      currentUser?.department_type === 'retail' ? 'Kinh doanh b√°n l·∫ª' : 'Kinh doanh d·ª± √°n';
    return `T·ªïng quan v·ªÅ hi·ªáu su·∫•t kinh doanh ph√≤ng ${departmentType}`;
  } else if (isTeamLeader) {
    return 'T·ªïng quan v·ªÅ hi·ªáu su·∫•t kinh doanh c·ªßa nh√≥m c·ªßa b·∫°n';
  } else {
    return 'T·ªïng quan v·ªÅ hi·ªáu su·∫•t kinh doanh c√° nh√¢n c·ªßa b·∫°n';
  }
};
