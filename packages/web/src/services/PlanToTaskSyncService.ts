import { Task } from '@/components/tasks/types/TaskTypes';
import { PersonalPlan, personalPlanService } from './PersonalPlanService';
import { pushNotificationService } from './pushNotificationService';

export interface PlanToTaskConversion {
  planId: string;
  taskId: string;
  convertedAt: string;
  success: boolean;
  error?: string;
}

export interface SyncStats {
  totalPlansChecked: number;
  plansConverted: number;
  plansFailed: number;
  lastSyncTime: string;
}

class PlanToTaskSyncService {
  private static instance: PlanToTaskSyncService;
  private syncInterval: NodeJS.Timeout | null = null;
  private isRunning: boolean = false;
  private conversions: PlanToTaskConversion[] = [];
  private stats: SyncStats = {
    totalPlansChecked: 0,
    plansConverted: 0,
    plansFailed: 0,
    lastSyncTime: new Date().toISOString()
  };

  private constructor() {}

  public static getInstance(): PlanToTaskSyncService {
    if (!PlanToTaskSyncService.instance) {
      PlanToTaskSyncService.instance = new PlanToTaskSyncService();
    }
    return PlanToTaskSyncService.instance;
  }

  // Kh·ªüi t·∫°o service v·ªõi auto-sync
  public startAutoSync(intervalMinutes: number = 1): void {
    if (this.isRunning) {
      console.log('PlanToTaskSyncService ƒë√£ ƒëang ch·∫°y');
      return;
    }

    this.isRunning = true;
    console.log(`üöÄ Kh·ªüi t·∫°o PlanToTaskSyncService v·ªõi interval ${intervalMinutes} ph√∫t`);

    // Ch·∫°y ngay l·∫ßn ƒë·∫ßu
    this.syncPlansToTasks();

    // Thi·∫øt l·∫≠p interval
    this.syncInterval = setInterval(() => {
      this.syncPlansToTasks();
    }, intervalMinutes * 60 * 1000);
  }

  // D·ª´ng auto-sync
  public stopAutoSync(): void {
    if (this.syncInterval) {
      clearInterval(this.syncInterval);
      this.syncInterval = null;
    }
    this.isRunning = false;
    console.log('‚èπÔ∏è ƒê√£ d·ª´ng PlanToTaskSyncService');
  }

  // Sync th·ªß c√¥ng
  public async manualSync(userId: string): Promise<SyncStats> {
    console.log('üîÑ B·∫Øt ƒë·∫ßu sync th·ªß c√¥ng cho user:', userId);
    return await this.syncUserPlansToTasks(userId);
  }

  // H√†m ch√≠nh ƒë·ªÉ sync plans th√†nh tasks
  private async syncPlansToTasks(): Promise<void> {
    try {
      console.log('üîç Ki·ªÉm tra plans c·∫ßn chuy·ªÉn ƒë·ªïi th√†nh tasks...');
      
      // L·∫•y danh s√°ch t·∫•t c·∫£ users t·ª´ localStorage
      const allUsers = this.getAllUsersFromStorage();
      
      for (const userId of allUsers) {
        await this.syncUserPlansToTasks(userId);
      }

      this.stats.lastSyncTime = new Date().toISOString();
      console.log('‚úÖ Ho√†n th√†nh sync plans to tasks:', this.stats);
      
    } catch (error) {
      console.error('‚ùå L·ªói khi sync plans to tasks:', error);
    }
  }

  // Sync plans c·ªßa m·ªôt user c·ª• th·ªÉ
  private async syncUserPlansToTasks(userId: string): Promise<SyncStats> {
    const userPlans = personalPlanService.getUserPlans(userId);
    const now = new Date();
    let converted = 0;
    let failed = 0;

    console.log(`üìã Ki·ªÉm tra ${userPlans.length} plans c·ªßa user ${userId}`);

    for (const plan of userPlans) {
      this.stats.totalPlansChecked++;

      // Ki·ªÉm tra xem plan ƒë√£ ƒë·∫øn h·∫°n ch∆∞a
      if (this.shouldConvertPlanToTask(plan, now)) {
        try {
          const success = await this.convertPlanToTask(plan, userId);
          if (success) {
            converted++;
            this.stats.plansConverted++;
          } else {
            failed++;
            this.stats.plansFailed++;
          }
        } catch (error) {
          console.error(`‚ùå L·ªói khi convert plan ${plan.id}:`, error);
          failed++;
          this.stats.plansFailed++;
        }
      }
    }

    if (converted > 0) {
      console.log(`‚úÖ ƒê√£ convert ${converted} plans th√†nh tasks cho user ${userId}`);
      
      // G·ª≠i th√¥ng b√°o cho user
      this.sendConversionNotification(userId, converted);
    }

    return {
      ...this.stats,
      plansConverted: converted,
      plansFailed: failed
    };
  }

  // Ki·ªÉm tra xem plan c√≥ c·∫ßn convert th√†nh task kh√¥ng
  private shouldConvertPlanToTask(plan: PersonalPlan, now: Date): boolean {
    // Ch·ªâ convert plans c√≥ status pending ho·∫∑c in_progress
    if (plan.status === 'completed' || plan.status === 'overdue') {
      return false;
    }

    // Ki·ªÉm tra ƒë√£ convert r·ªìi ch∆∞a
    if (this.conversions.some(c => c.planId === plan.id && c.success)) {
      return false;
    }

    // T·∫°o datetime t·ª´ startDate v√† startTime
    const planDateTime = new Date(`${plan.startDate}T${plan.startTime}`);
    
    // Convert n·∫øu ƒë√£ ƒë·∫øn ho·∫∑c qua th·ªùi gian b·∫Øt ƒë·∫ßu
    return planDateTime <= now;
  }

  // Convert plan th√†nh task
  private async convertPlanToTask(plan: PersonalPlan, userId: string): Promise<boolean> {
    try {
      console.log(`üîÑ Converting plan "${plan.title}" to task...`);

      // T·∫°o task ID
      const taskId = `task_from_plan_${plan.id}_${Date.now()}`;

      // T·∫°o task t·ª´ plan
      const newTask: Task = {
        id: taskId,
        title: plan.title,
        description: plan.description,
        type: this.mapPlanTypeToTaskType(plan.type),
        status: 'todo',
        priority: plan.priority === 'high' ? 'urgent' : plan.priority,
        date: plan.startDate,
        time: plan.startTime,
        progress: 0,
        isNew: true,
        location: plan.location || '',
        teamId: '',
        assignedTo: userId,
        user_id: userId,
        user_name: '',
        created_at: new Date().toISOString(),
        visibility: 'personal',
        sharedWith: [],
        isShared: false,
        isSharedWithTeam: false
      };

      // L∆∞u conversion record
      const conversion: PlanToTaskConversion = {
        planId: plan.id,
        taskId: taskId,
        convertedAt: new Date().toISOString(),
        success: true
      };

      this.conversions.push(conversion);

      // C·∫≠p nh·∫≠t plan status th√†nh completed (ƒë√£ chuy·ªÉn th√†nh task)
      personalPlanService.updatePlan(userId, plan.id, {
        status: 'completed',
        notes: `${plan.notes || ''}\n[ƒê√£ chuy·ªÉn th√†nh c√¥ng vi·ªác: ${taskId}]`
      });

      // L∆∞u task v√†o localStorage
      this.saveTaskToLocalStorage(newTask, userId);

      // Trigger custom event ƒë·ªÉ th√¥ng b√°o cho UI
      this.dispatchPlanToTaskEvent(newTask, plan);

      console.log(`‚úÖ ƒê√£ convert plan "${plan.title}" th√†nh task ${taskId}`);
      return true;

    } catch (error) {
      console.error(`‚ùå L·ªói khi convert plan ${plan.id}:`, error);

      // L∆∞u conversion record v·ªõi l·ªói
      const conversion: PlanToTaskConversion = {
        planId: plan.id,
        taskId: '',
        convertedAt: new Date().toISOString(),
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };

      this.conversions.push(conversion);
      return false;
    }
  }

  // Map plan type sang task type
  private mapPlanTypeToTaskType(planType: string): Task['type'] {
    const typeMap: Record<string, Task['type']> = {
      'personal': 'other',
      'team': 'other',
      'department': 'other',
      'meeting': 'other',
      'training': 'other',
      'report': 'other',
      'partner_new': 'partner_new',
      'partner_old': 'partner_old',
      'architect_new': 'architect_new',
      'architect_old': 'architect_old',
      'client_new': 'client_new',
      'client_old': 'client_old',
      'quote_new': 'quote_new',
      'quote_old': 'quote_old',
      'inventory': 'inventory',
      'other': 'other'
    };

    return typeMap[planType] || 'other';
  }

  // G·ª≠i th√¥ng b√°o conversion
  private sendConversionNotification(userId: string, count: number): void {
    try {
      pushNotificationService.sendNotification({
        title: 'üìã K·∫ø ho·∫°ch ƒë√£ chuy·ªÉn th√†nh c√¥ng vi·ªác',
        body: `${count} k·∫ø ho·∫°ch ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông chuy·ªÉn th√†nh c√¥ng vi·ªác c·∫ßn th·ª±c hi·ªán`,
        tag: `plan_conversion_${userId}`,
        data: {
          userId,
          count,
          url: '/tasks'
        }
      });
    } catch (error) {
      console.error('L·ªói khi g·ª≠i th√¥ng b√°o conversion:', error);
    }
  }

  // L∆∞u task v√†o localStorage
  private saveTaskToLocalStorage(task: Task, userId: string): void {
    try {
      // L·∫•y tasks hi·ªán t·∫°i t·ª´ localStorage
      const tasksKey = `tasks_${userId}`;
      const existingTasksJson = localStorage.getItem(tasksKey);
      let existingTasks: Task[] = [];

      if (existingTasksJson) {
        existingTasks = JSON.parse(existingTasksJson);
      }

      // Ki·ªÉm tra task ƒë√£ t·ªìn t·∫°i ch∆∞a
      const taskExists = existingTasks.some(t => t.id === task.id);
      if (!taskExists) {
        // Th√™m task m·ªõi
        existingTasks.push(task);

        // L∆∞u l·∫°i v√†o localStorage
        localStorage.setItem(tasksKey, JSON.stringify(existingTasks));
        console.log(`üíæ ƒê√£ l∆∞u task "${task.title}" v√†o localStorage cho user ${userId}`);
      } else {
        console.log(`‚ö†Ô∏è Task "${task.title}" ƒë√£ t·ªìn t·∫°i trong localStorage`);
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi l∆∞u task v√†o localStorage:', error);
    }
  }

  // Dispatch custom event ƒë·ªÉ UI c√≥ th·ªÉ listen
  private dispatchPlanToTaskEvent(task: Task, plan: PersonalPlan): void {
    const event = new CustomEvent('planToTaskConverted', {
      detail: { task, plan }
    });
    window.dispatchEvent(event);
  }

  // L·∫•y danh s√°ch users t·ª´ localStorage
  private getAllUsersFromStorage(): string[] {
    const users: string[] = [];
    
    // Scan localStorage ƒë·ªÉ t√¨m c√°c key c√≥ pattern personal_plans_*
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && key.startsWith('personal_plans_')) {
        const userId = key.replace('personal_plans_', '');
        users.push(userId);
      }
    }

    return users;
  }

  // L·∫•y th·ªëng k√™
  public getStats(): SyncStats {
    return { ...this.stats };
  }

  // L·∫•y l·ªãch s·ª≠ conversions
  public getConversions(): PlanToTaskConversion[] {
    return [...this.conversions];
  }

  // Reset stats
  public resetStats(): void {
    this.stats = {
      totalPlansChecked: 0,
      plansConverted: 0,
      plansFailed: 0,
      lastSyncTime: new Date().toISOString()
    };
    this.conversions = [];
  }

  // Ki·ªÉm tra service c√≥ ƒëang ch·∫°y kh√¥ng
  public isActive(): boolean {
    return this.isRunning;
  }

  // Debug function - force sync ngay l·∫≠p t·ª©c
  public async debugForceSync(userId: string): Promise<void> {
    console.log('üîß DEBUG: Force sync for user:', userId);
    await this.syncUserPlansToTasks(userId);
  }
}

export const planToTaskSyncService = PlanToTaskSyncService.getInstance();
