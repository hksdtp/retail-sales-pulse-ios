import { Download, Plus, Trash2, UserRound, Users, RefreshCw } from 'lucide-react';
import { Settings } from 'lucide-react';
import React, { useEffect, useState } from 'react';

import { getApiUrl } from '@/config/api';

import ErrorBoundary from '../components/ErrorBoundary';
import { ExportDialog } from '../components/export/ExportDialog';
import AutoFirebaseSetup from '../components/firebase/AutoFirebaseSetup';
import AppLayout from '../components/layout/AppLayout';
import PageHeader from '../components/layout/PageHeader';
import NotificationCenter from '../components/notifications/NotificationCenter';
import FirebaseConfig from '../components/settings/FirebaseConfig';
import MemberTaskSelector from '../components/tasks/MemberTaskSelector';
import SimpleTaskView from '../components/tasks/SimpleTaskView';
import TaskFormDialog from '../components/tasks/TaskFormDialog';
import TaskManagementView from '../components/tasks/TaskManagementView';
import TaskViewSelector from '../components/tasks/TaskViewSelector';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '../components/ui/alert-dialog';
import { Button } from '../components/ui/button';
import { RefreshButton, ExportButton } from '../components/ui/ActionButton';
import { useAuth } from '../context/AuthContext';
import { TaskViewLevel, useManagerTaskData } from '../hooks/use-manager-task-data';
import { useTaskData } from '../hooks/use-task-data';
import { useToast } from '../hooks/use-toast';
import { FirebaseService } from '../services/FirebaseService';
import TaskList from './TaskList';


const Tasks = () => {
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [isFirebaseConfigOpen, setIsFirebaseConfigOpen] = useState(false);
  const [taskFormType, setTaskFormType] = useState<'self' | 'team' | 'individual'>('self');
  const [taskUpdateTrigger, setTaskUpdateTrigger] = useState(0); // Trigger ƒë·ªÉ k√≠ch ho·∫°t l√†m m·ªõi danh s√°ch c√¥ng vi·ªác
  const [isDeleting, setIsDeleting] = useState(false);
  const [showFirebaseSetup, setShowFirebaseSetup] = useState(false);
  const [viewLevel, setViewLevel] = useState<TaskViewLevel>('personal');
  const [selectedMemberId, setSelectedMemberId] = useState<string | null>(null);
  const { currentUser, teams } = useAuth();
  const { toast } = useToast();

  // Ki·ªÉm tra xem user c√≥ ph·∫£i manager kh√¥ng
  const isManager =
    currentUser?.role === 'retail_director' ||
    currentUser?.role === 'project_director' ||
    currentUser?.role === 'team_leader';

  // S·ª≠ d·ª•ng hook ph√π h·ª£p d·ª±a tr√™n role
  const regularTaskData = useTaskData();
  const managerTaskData = useManagerTaskData(viewLevel, selectedMemberId);

  // Ch·ªçn data source d·ª±a tr√™n role v√† view level
  const tasks =
    isManager && viewLevel !== 'personal' ? managerTaskData.tasks : regularTaskData.tasks;

  // H√†m ƒë·ªÉ k√≠ch ho·∫°t l√†m m·ªõi danh s√°ch c√¥ng vi·ªác
  const handleTaskCreated = () => {
    // TƒÉng gi√° tr·ªã trigger ƒë·ªÉ k√≠ch ho·∫°t useEffect trong TaskList
    setTaskUpdateTrigger((prev) => prev + 1);
    toast({
      title: 'ƒê√£ l√†m m·ªõi d·ªØ li·ªáu',
      description: 'Danh s√°ch c√¥ng vi·ªác ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi c√¥ng vi·ªác m·ªõi',
    });
  };

  // H√†m x√≥a to√†n b·ªô c√¥ng vi·ªác
  const handleDeleteAllTasks = async () => {
    console.log('üöÄ === DELETE ALL TASKS STARTED ===');
    console.log('Current user:', currentUser);

    setIsDeleting(true);
    try {
      if (!currentUser?.id) {
        console.error('‚ùå No current user ID');
        throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng');
      }

      console.log('‚úÖ User ID found:', currentUser.id, 'Type:', typeof currentUser.id);

      // S·ª¨ D·ª§NG FIRESTORE REST API THAY V√å SDK
      console.log('üî• USING FIRESTORE REST API FOR DEBUGGING');

      const projectId = 'appqlgd';
      const baseUrl = `https://firestore.googleapis.com/v1/projects/${projectId}/databases/(default)/documents`;

      console.log('üîß Fetching tasks via REST API...');

      try {
        // L·∫•y t·∫•t c·∫£ tasks qua REST API
        const response = await fetch(`${baseUrl}/tasks`);

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log('‚úÖ REST API response:', data);

        const tasks = data.documents || [];
        console.log(`üìä Total tasks found: ${tasks.length}`);

        // Debug: Xem c·∫•u tr√∫c tasks
        tasks.forEach((task, index) => {
          console.log(`Task ${index}:`, task);
          const fields = task.fields || {};
          console.log(
            `  - assignedTo: ${fields.assignedTo?.stringValue || fields.assignedTo?.integerValue || 'undefined'}`,
          );
          console.log(
            `  - user_id: ${fields.user_id?.stringValue || fields.user_id?.integerValue || 'undefined'}`,
          );
          console.log(`  - title: ${fields.title?.stringValue || 'undefined'}`);
        });

        console.log(`=== CURRENT USER INFO ===`);
        console.log(`Current user ID: ${currentUser.id} (type: ${typeof currentUser.id})`);

        // T√¨m tasks c·ªßa user hi·ªán t·∫°i
        const userTasks = tasks.filter((task) => {
          const fields = task.fields || {};
          const assignedTo = fields.assignedTo?.stringValue || fields.assignedTo?.integerValue;
          const user_id = fields.user_id?.stringValue || fields.user_id?.integerValue;

          return assignedTo == currentUser.id || user_id == currentUser.id;
        });

        console.log(`üéØ Found ${userTasks.length} tasks for current user`);

        if (userTasks.length === 0) {
          toast({
            title: 'Th√¥ng b√°o',
            description: `Kh√¥ng c√≥ c√¥ng vi·ªác n√†o ƒë·ªÉ x√≥a. T√¨m th·∫•y ${tasks.length} tasks t·ªïng c·ªông nh∆∞ng kh√¥ng c√≥ task n√†o thu·ªôc v·ªÅ user ${currentUser.id}.`,
          });
          return;
        }

        // X√≥a tasks qua REST API
        console.log('üóëÔ∏è Deleting tasks via REST API...');
        const deletePromises = userTasks.map(async (task) => {
          const taskPath = task.name; // Full path c·ªßa document
          const deleteResponse = await fetch(`https://firestore.googleapis.com/v1/${taskPath}`, {
            method: 'DELETE',
          });
          return deleteResponse.ok;
        });

        const deleteResults = await Promise.all(deletePromises);
        const successCount = deleteResults.filter((result) => result).length;

        toast({
          title: 'Th√†nh c√¥ng!',
          description: `ƒê√£ x√≥a ${successCount}/${userTasks.length} c√¥ng vi·ªác qua REST API.`,
        });

        // Trigger refresh
        setTaskUpdateTrigger((prev) => prev + 1);
        return;
      } catch (error) {
        console.error('‚ùå REST API error:', error);
        throw error;
      }

      // Fallback: N·∫øu REST API kh√¥ng ho·∫°t ƒë·ªông, th√¥ng b√°o l·ªói
      console.log('‚ùå All methods failed');
    } catch (error) {
      console.error('L·ªói khi x√≥a to√†n b·ªô c√¥ng vi·ªác:', error);
      toast({
        title: 'L·ªói',
        description: `Kh√¥ng th·ªÉ x√≥a to√†n b·ªô c√¥ng vi·ªác: ${error instanceof Error ? error.message : 'Unknown error'}`,
        variant: 'destructive',
      });
    } finally {
      setIsDeleting(false);
    }
  };

  // Firebase ƒë√£ ƒë∆∞·ª£c auto-setup trong App.tsx, kh√¥ng c·∫ßn manual setup n·ªØa
  useEffect(() => {
    const isConfigured = FirebaseService.isConfigured();

    if (isConfigured) {
      console.log('‚úÖ Firebase is ready');
    } else {
      console.log('‚ö†Ô∏è Firebase not configured, some features may be limited');
    }
  }, []);

  // Listen for auto-sync events
  useEffect(() => {
    const handleTasksUpdated = (event: CustomEvent) => {
      console.log('üì° Tasks page received tasks-updated event:', event.detail);

      // Force refresh tasks
      console.log('üîÑ Tasks page refreshing due to auto-sync...');
      setTaskUpdateTrigger((prev) => prev + 1);

      // Show toast notification
      if (event.detail?.taskTitle) {
        toast({
          title: 'üéâ C√¥ng vi·ªác m·ªõi ƒë∆∞·ª£c ƒë·ªìng b·ªô',
          description: `K·∫ø ho·∫°ch "${event.detail.taskTitle}" ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông chuy·ªÉn th√†nh c√¥ng vi·ªác`,
        });
      }
    };

    const handleTasksRefreshed = (event: CustomEvent) => {
      console.log('üì° Tasks page received tasks-refreshed event:', event.detail);

      // Additional UI refresh
      console.log('üîÑ Tasks page additional refresh due to tasks-refreshed event...');
      setTaskUpdateTrigger((prev) => prev + 1);
    };

    // Add event listeners
    window.addEventListener('tasks-updated', handleTasksUpdated as EventListener);
    window.addEventListener('tasks-refreshed', handleTasksRefreshed as EventListener);
    console.log('üì° Tasks page added event listeners');

    // Cleanup
    return () => {
      window.removeEventListener('tasks-updated', handleTasksUpdated as EventListener);
      window.removeEventListener('tasks-refreshed', handleTasksRefreshed as EventListener);
      console.log('üì° Tasks page removed event listeners');
    };
  }, [toast]);

  // X√°c ƒë·ªãnh v·ªã tr√≠ v√† ti√™u ƒë·ªÅ ph√π h·ª£p v·ªõi vai tr√≤
  const locationName = currentUser?.location === 'hanoi' ? 'H√† N·ªôi' : 'H·ªì Ch√≠ Minh';

  let subtitle = '';
  let headerTitle = 'Qu·∫£n l√Ω c√¥ng vi·ªác';

  if (currentUser?.role === 'retail_director') {
    subtitle = 'Theo d√µi v√† qu·∫£n l√Ω t·∫•t c·∫£ c√¥ng vi·ªác c·ªßa ph√≤ng kinh doanh b√°n l·∫ª';
  } else if (currentUser?.role === 'project_director') {
    subtitle = 'Theo d√µi v√† qu·∫£n l√Ω t·∫•t c·∫£ c√¥ng vi·ªác c·ªßa ph√≤ng kinh doanh d·ª± √°n';
  } else if (currentUser?.role === 'team_leader') {
    const userTeam = teams.find((team) => team.leader_id === currentUser.id);
    subtitle = `Theo d√µi v√† qu·∫£n l√Ω c√¥ng vi·ªác c·ªßa ${userTeam?.name || 'nh√≥m'} - ${locationName}`;
  } else {
    subtitle = `Theo d√µi c√¥ng vi·ªác ƒë∆∞·ª£c giao - ${locationName}`;
    headerTitle = 'C√¥ng vi·ªác c·ªßa t√¥i';
  }

  // T·∫•t c·∫£ ng∆∞·ªùi d√πng ƒë·ªÅu c√≥ th·ªÉ t·∫°o c√¥ng vi·ªác m·ªõi, nh√¢n vi√™n ch·ªâ c√≥ th·ªÉ t·∫°o c√¥ng vi·ªác cho ch√≠nh m√¨nh
  const canCreateTask = true; // Cho ph√©p t·∫•t c·∫£ ng∆∞·ªùi d√πng t·∫°o c√¥ng vi·ªác

  // Firebase auto-setup ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong App.tsx

  return (
    <AppLayout>
      <PageHeader
        title={headerTitle}
        subtitle={subtitle}
        onTaskClick={(taskId) => {
          console.log('Clicked on task:', taskId);
          // TODO: Implement task navigation
          alert(`M·ªü c√¥ng vi·ªác: ${taskId}`);
        }}
        actions={
          <div className="flex space-x-2">
            <ExportDialog>
              <ExportButton
                size="icon"
                title="Xu·∫•t d·ªØ li·ªáu tasks"
                className="text-blue-600 border-blue-200 bg-blue-50 dark:text-blue-400 dark:border-blue-700 dark:bg-blue-900/20"
              >
                <span className="sr-only">Xu·∫•t d·ªØ li·ªáu</span>
              </ExportButton>
            </ExportDialog>

            {/* Data refresh button */}
            <RefreshButton
              type="data"
              size="icon"
              variant="outline"
              title="T·∫£i l·∫°i d·ªØ li·ªáu t·ª´ Firebase"
              className="text-green-600 border-green-200 bg-green-50 dark:text-green-400 dark:border-green-700 dark:bg-green-900/20"
              onClick={() => {
                console.log('üîÑ Data refresh triggered');
                setTaskUpdateTrigger((prev) => prev + 1);
                toast({
                  title: 'üîÑ ƒêang t·∫£i l·∫°i',
                  description: 'D·ªØ li·ªáu c√¥ng vi·ªác ƒëang ƒë∆∞·ª£c t·∫£i l·∫°i t·ª´ Firebase...',
                });
              }}
            >
              <span className="sr-only">T·∫£i l·∫°i d·ªØ li·ªáu</span>
            </RefreshButton>

            {/* N√∫t t·∫°o c√¥ng vi·ªác g·ªôp */}
            <Button
              className="flex items-center gap-2 bg-gradient-to-r from-[#6c5ce7] to-[#4ecdc4] text-white shadow-md hover:opacity-90"
              onClick={() => {
                // M·∫∑c ƒë·ªãnh m·ªü form v·ªõi type ph√π h·ª£p v·ªõi role
                if (
                  currentUser?.role === 'retail_director' ||
                  currentUser?.role === 'project_director'
                ) {
                  setTaskFormType('team');
                } else if (currentUser?.role === 'team_leader') {
                  setTaskFormType('individual');
                } else {
                  setTaskFormType('self');
                }
                setIsFormOpen(true);
              }}
            >
              <Plus className="h-5 w-5" />
              <span>T·∫°o c√¥ng vi·ªác</span>
            </Button>
          </div>
        }
      />

      <div>
        {/* Giao di·ªán qu·∫£n l√Ω c√¥ng vi·ªác th·ªëng nh·∫•t */}
        <ErrorBoundary>
          <TaskManagementView
            viewLevel={viewLevel}
            selectedMemberId={selectedMemberId}
            onViewLevelChange={setViewLevel}
            onSelectedMemberChange={setSelectedMemberId}
            onCreateTask={() => {
              if (
                currentUser?.role === 'retail_director' ||
                currentUser?.role === 'project_director'
              ) {
                setTaskFormType('team');
              } else if (currentUser?.role === 'team_leader') {
                setTaskFormType('individual');
              } else {
                setTaskFormType('self');
              }
              setIsFormOpen(true);
            }}
          />
        </ErrorBoundary>
      </div>

      <TaskFormDialog
        open={isFormOpen}
        onOpenChange={setIsFormOpen}
        formType={taskFormType}
        onTaskCreated={handleTaskCreated}
      />
      <FirebaseConfig
        open={isFirebaseConfigOpen}
        onOpenChange={setIsFirebaseConfigOpen}
        onConfigSaved={() => {
          toast({
            title: 'C·∫•u h√¨nh th√†nh c√¥ng',
            description:
              'Firebase ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh th√†nh c√¥ng. D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c l∆∞u tr·ªØ an to√†n tr√™n Cloud Firestore.',
          });
        }}
      />
    </AppLayout>
  );
};

export default Tasks;
