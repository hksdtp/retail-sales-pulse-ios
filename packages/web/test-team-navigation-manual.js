// Manual test ƒë·ªÉ verify team navigation fix
import { chromium } from 'playwright';

async function testTeamNavigation() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu test team navigation...');
  
  const browser = await chromium.launch({ headless: false });
  const page = await browser.newPage();
  
  try {
    // B∆∞·ªõc 1: ƒêƒÉng nh·∫≠p
    console.log('üìù B∆∞·ªõc 1: ƒêƒÉng nh·∫≠p v·ªõi Kh·ªïng ƒê·ª©c M·∫°nh');
    await page.goto('http://localhost:8088');
    await page.waitForLoadState('networkidle');
    
    // Ch·ªçn ƒë·ªãa ƒëi·ªÉm
    await page.selectOption('select', 'hanoi');
    await page.waitForTimeout(1000);
    
    // Ch·ªçn user
    await page.selectOption('select >> nth=1', { label: 'Kh·ªïng ƒê·ª©c M·∫°nh' });
    await page.waitForTimeout(1000);
    
    // Nh·∫≠p password
    await page.fill('input[type="password"]', 'Haininh1');
    
    // Click ƒëƒÉng nh·∫≠p
    await page.click('button:has-text("ƒêƒÉng nh·∫≠p")');
    await page.waitForTimeout(3000);
    
    // B∆∞·ªõc 2: V√†o tab C√¥ng vi·ªác
    console.log('üìù B∆∞·ªõc 2: V√†o tab C√¥ng vi·ªác');
    await page.click('button:has-text("C√¥ng vi·ªác")');
    await page.waitForTimeout(2000);
    
    // B∆∞·ªõc 3: V√†o tab C·ªßa nh√≥m
    console.log('üìù B∆∞·ªõc 3: V√†o tab C·ªßa nh√≥m');
    await page.click('button:has-text("C·ªßa nh√≥m")');
    await page.waitForTimeout(3000);
    
    // B∆∞·ªõc 4: Test ch·ªçn c√°c nh√≥m kh√°c nhau
    console.log('üìù B∆∞·ªõc 4: Test ch·ªçn c√°c nh√≥m');
    
    const teams = [
      'NH√ìM 2 - TH·∫¢O',
      'NH√ìM 3', 
      'NH√ìM 4',
      'NH√ìM 1 - VI·ªÜT ANH'
    ];
    
    for (const teamName of teams) {
      console.log(`üéØ Test nh√≥m: ${teamName}`);
      
      // T√¨m v√† click team card
      const teamCard = page.locator('.cursor-pointer').filter({ hasText: teamName });
      const exists = await teamCard.count() > 0;
      
      if (exists) {
        await teamCard.click();
        console.log(`‚úÖ ƒê√£ click v√†o ${teamName}`);
        
        // ƒê·ª£i 4 gi√¢y ƒë·ªÉ xem c√≥ b·ªã auto-redirect kh√¥ng
        await page.waitForTimeout(4000);
        
        // Ki·ªÉm tra header hi·ªán t·∫°i
        const header = await page.locator('h3').filter({ hasText: 'NH√ìM' }).textContent();
        console.log(`üìã Header hi·ªán t·∫°i: ${header}`);
        
        if (header && header.includes(teamName)) {
          console.log(`‚úÖ SUCCESS: ƒê√∫ng nh√≥m ${teamName}`);
        } else {
          console.log(`‚ùå BUG: Ch·ªçn ${teamName} nh∆∞ng hi·ªÉn th·ªã ${header}`);
        }
        
        // Quay l·∫°i danh s√°ch nh√≥m
        const backButton = page.locator('button:has-text("Quay l·∫°i")');
        if (await backButton.count() > 0) {
          await backButton.click();
          await page.waitForTimeout(2000);
        }
      } else {
        console.log(`‚ùå Kh√¥ng t√¨m th·∫•y nh√≥m: ${teamName}`);
      }
    }
    
    console.log('‚úÖ Test ho√†n th√†nh!');
    
  } catch (error) {
    console.error('‚ùå L·ªói trong test:', error);
  } finally {
    await browser.close();
  }
}

// Ch·∫°y test
testTeamNavigation();
