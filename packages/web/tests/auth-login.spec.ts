import { test, expect } from '@playwright/test';

test.describe('Authentication Tests', () => {
  test.beforeEach(async ({ page }) => {
    // ƒê·∫£m b·∫£o b·∫Øt ƒë·∫ßu t·ª´ trang ch·ªß
    await page.goto('http://localhost:8088/');
    await page.waitForLoadState('networkidle');
  });

  test('should display login form when not authenticated', async ({ page }) => {
    console.log('üß™ Testing login form display...');
    
    // Ki·ªÉm tra c√≥ form ƒëƒÉng nh·∫≠p
    const loginForm = page.locator('form').first();
    await expect(loginForm).toBeVisible({ timeout: 10000 });
    
    // Ki·ªÉm tra c√°c tr∆∞·ªùng input
    const usernameInput = page.locator('input[type="text"], input[placeholder*="t√™n"], input[placeholder*="user"]').first();
    const passwordInput = page.locator('input[type="password"]').first();
    
    await expect(usernameInput).toBeVisible();
    await expect(passwordInput).toBeVisible();
    
    console.log('‚úÖ Login form displayed correctly');
  });

  test('should login successfully with valid credentials', async ({ page }) => {
    console.log('üß™ Testing successful login...');
    
    // T√¨m form ƒëƒÉng nh·∫≠p
    await page.waitForSelector('form', { timeout: 10000 });
    
    // Nh·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p (s·ª≠ d·ª•ng credentials t·ª´ mockAuth)
    const usernameInput = page.locator('input[type="text"], input[placeholder*="t√™n"], input[placeholder*="user"]').first();
    const passwordInput = page.locator('input[type="password"]').first();
    
    await usernameInput.fill('vietanh');
    await passwordInput.fill('123456');
    
    // Click n√∫t ƒëƒÉng nh·∫≠p
    const loginButton = page.locator('button[type="submit"], button:has-text("ƒêƒÉng nh·∫≠p")').first();
    await loginButton.click();
    
    // ƒê·ª£i chuy·ªÉn h∆∞·ªõng v√† ki·ªÉm tra ƒëƒÉng nh·∫≠p th√†nh c√¥ng
    await page.waitForLoadState('networkidle');
    
    // Ki·ªÉm tra c√≥ dashboard ho·∫∑c n·ªôi dung sau ƒëƒÉng nh·∫≠p
    const dashboardContent = page.locator('text=Dashboard, text=T·ªïng quan, text=KPI').first();
    await expect(dashboardContent).toBeVisible({ timeout: 15000 });
    
    console.log('‚úÖ Login successful');
  });

  test('should show error with invalid credentials', async ({ page }) => {
    console.log('üß™ Testing login with invalid credentials...');
    
    // T√¨m form ƒëƒÉng nh·∫≠p
    await page.waitForSelector('form', { timeout: 10000 });
    
    // Nh·∫≠p th√¥ng tin sai
    const usernameInput = page.locator('input[type="text"], input[placeholder*="t√™n"], input[placeholder*="user"]').first();
    const passwordInput = page.locator('input[type="password"]').first();
    
    await usernameInput.fill('wronguser');
    await passwordInput.fill('wrongpass');
    
    // Click n√∫t ƒëƒÉng nh·∫≠p
    const loginButton = page.locator('button[type="submit"], button:has-text("ƒêƒÉng nh·∫≠p")').first();
    await loginButton.click();
    
    // ƒê·ª£i v√† ki·ªÉm tra th√¥ng b√°o l·ªói
    await page.waitForTimeout(2000);
    
    // Ki·ªÉm tra v·∫´n ·ªü trang ƒëƒÉng nh·∫≠p ho·∫∑c c√≥ th√¥ng b√°o l·ªói
    const errorMessage = page.locator('text=sai, text=l·ªói, text=kh√¥ng ƒë√∫ng').first();
    const stillOnLogin = page.locator('input[type="password"]').first();
    
    const hasError = await errorMessage.isVisible().catch(() => false);
    const stillLogin = await stillOnLogin.isVisible().catch(() => false);
    
    expect(hasError || stillLogin).toBe(true);
    
    console.log('‚úÖ Invalid login handled correctly');
  });

  test('should logout successfully', async ({ page }) => {
    console.log('üß™ Testing logout functionality...');
    
    // ƒêƒÉng nh·∫≠p tr∆∞·ªõc
    await page.waitForSelector('form', { timeout: 10000 });
    
    const usernameInput = page.locator('input[type="text"], input[placeholder*="t√™n"], input[placeholder*="user"]').first();
    const passwordInput = page.locator('input[type="password"]').first();
    
    await usernameInput.fill('vietanh');
    await passwordInput.fill('123456');
    
    const loginButton = page.locator('button[type="submit"], button:has-text("ƒêƒÉng nh·∫≠p")').first();
    await loginButton.click();
    
    await page.waitForLoadState('networkidle');
    
    // T√¨m n√∫t ƒëƒÉng xu·∫•t
    const logoutButton = page.locator('button:has-text("ƒêƒÉng xu·∫•t"), button:has-text("Logout"), [data-testid="logout"]').first();
    
    if (await logoutButton.isVisible({ timeout: 5000 })) {
      await logoutButton.click();
      
      // Ki·ªÉm tra quay v·ªÅ trang ƒëƒÉng nh·∫≠p
      await page.waitForLoadState('networkidle');
      const loginForm = page.locator('input[type="password"]').first();
      await expect(loginForm).toBeVisible({ timeout: 10000 });
      
      console.log('‚úÖ Logout successful');
    } else {
      console.log('‚ö†Ô∏è Logout button not found - may be in menu');
      
      // Th·ª≠ t√¨m trong menu
      const menuButton = page.locator('button:has-text("Menu"), [data-testid="menu"], .menu-trigger').first();
      if (await menuButton.isVisible({ timeout: 3000 })) {
        await menuButton.click();
        await page.waitForTimeout(1000);
        
        const menuLogout = page.locator('button:has-text("ƒêƒÉng xu·∫•t"), a:has-text("ƒêƒÉng xu·∫•t")').first();
        if (await menuLogout.isVisible({ timeout: 3000 })) {
          await menuLogout.click();
          
          await page.waitForLoadState('networkidle');
          const loginForm = page.locator('input[type="password"]').first();
          await expect(loginForm).toBeVisible({ timeout: 10000 });
          
          console.log('‚úÖ Logout from menu successful');
        }
      }
    }
  });

  test('should persist login state on page refresh', async ({ page }) => {
    console.log('üß™ Testing login persistence...');
    
    // ƒêƒÉng nh·∫≠p
    await page.waitForSelector('form', { timeout: 10000 });
    
    const usernameInput = page.locator('input[type="text"], input[placeholder*="t√™n"], input[placeholder*="user"]').first();
    const passwordInput = page.locator('input[type="password"]').first();
    
    await usernameInput.fill('vietanh');
    await passwordInput.fill('123456');
    
    const loginButton = page.locator('button[type="submit"], button:has-text("ƒêƒÉng nh·∫≠p")').first();
    await loginButton.click();
    
    await page.waitForLoadState('networkidle');
    
    // Refresh trang
    await page.reload();
    await page.waitForLoadState('networkidle');
    
    // Ki·ªÉm tra v·∫´n ƒëƒÉng nh·∫≠p
    const dashboardContent = page.locator('text=Dashboard, text=T·ªïng quan, text=KPI').first();
    const loginForm = page.locator('input[type="password"]').first();
    
    const hasDashboard = await dashboardContent.isVisible({ timeout: 5000 }).catch(() => false);
    const hasLoginForm = await loginForm.isVisible({ timeout: 2000 }).catch(() => false);
    
    // N·∫øu c√≥ dashboard th√¨ OK, n·∫øu c√≥ login form th√¨ c≈©ng OK (t√πy implementation)
    expect(hasDashboard || !hasLoginForm).toBe(true);
    
    console.log('‚úÖ Login persistence tested');
  });
});
