import { test, expect } from '@playwright/test';

test.describe('Fix Task UI Issues', () => {
  test('should test task creation with UI fixes', async ({ page }) => {
    console.log('üîß Testing task creation with UI fixes...');
    
    // ƒêi·ªÅu h∆∞·ªõng v√† ƒëƒÉng nh·∫≠p
    await page.goto('http://localhost:8088');
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(3000);
    
    // ƒêƒÉng nh·∫≠p
    const emailInput = page.locator('input[type="email"]');
    if (await emailInput.isVisible()) {
      await emailInput.fill('manh.khong@example.com');
      await page.locator('input[type="password"]').fill('password123');
      await page.locator('button[type="submit"]').click();
      await page.waitForTimeout(5000);
    }
    
    // Click v√†o menu C√¥ng vi·ªác
    await page.locator('text=C√¥ng vi·ªác').click();
    await page.waitForTimeout(2000);
    
    // Click button T·∫°o c√¥ng vi·ªác
    await page.locator('button:has-text("T·∫°o c√¥ng vi·ªác")').click();
    await page.waitForTimeout(3000);
    
    console.log('‚úÖ Dialog opened successfully');
    
    // Ch·ª•p ·∫£nh dialog
    await page.screenshot({ 
      path: 'test-results/task-dialog-opened.png',
      fullPage: true 
    });
    
    // Test ƒëi·ªÅn form v·ªõi c√°ch ti·∫øp c·∫≠n kh√°c
    console.log('üìù Testing form filling...');
    
    // ƒêi·ªÅn title - th·ª≠ nhi·ªÅu selector
    const titleSelectors = [
      'input[placeholder*="ti√™u ƒë·ªÅ"]',
      'input[placeholder*="Nh·∫≠p ti√™u ƒë·ªÅ"]',
      '[role="dialog"] input:first-of-type'
    ];
    
    for (const selector of titleSelectors) {
      try {
        const titleInput = page.locator(selector);
        if (await titleInput.isVisible()) {
          await titleInput.fill('Test Task - Ki·ªÉm tra giao di·ªán');
          console.log(`‚úÖ Title filled using selector: ${selector}`);
          break;
        }
      } catch (error) {
        console.log(`‚ùå Failed with selector ${selector}: ${error.message}`);
      }
    }
    
    // ƒêi·ªÅn description
    const descSelectors = [
      'textarea[placeholder*="m√¥ t·∫£"]',
      'textarea[placeholder*="M√¥ t·∫£"]',
      '[role="dialog"] textarea'
    ];
    
    for (const selector of descSelectors) {
      try {
        const descInput = page.locator(selector);
        if (await descInput.isVisible()) {
          await descInput.fill('ƒê√¢y l√† task test ƒë·ªÉ ki·ªÉm tra giao di·ªán t·∫°o c√¥ng vi·ªác m·ªõi');
          console.log(`‚úÖ Description filled using selector: ${selector}`);
          break;
        }
      } catch (error) {
        console.log(`‚ùå Failed with selector ${selector}: ${error.message}`);
      }
    }
    
    // Ch·ªçn ng√†y
    const dateInput = page.locator('input[type="date"]');
    if (await dateInput.isVisible()) {
      const today = new Date().toISOString().split('T')[0];
      await dateInput.fill(today);
      console.log('‚úÖ Date filled');
    }
    
    // Ch·ªçn th·ªùi gian
    const timeInput = page.locator('input[type="time"]');
    if (await timeInput.isVisible()) {
      await timeInput.fill('09:00');
      console.log('‚úÖ Time filled');
    }
    
    // Ch·ª•p ·∫£nh sau khi ƒëi·ªÅn form
    await page.screenshot({ 
      path: 'test-results/task-form-filled.png',
      fullPage: true 
    });
    
    // Test dropdown selection v·ªõi c√°ch kh√°c
    console.log('üìã Testing dropdown selection...');
    
    // Th·ª≠ click v√†o dropdown ƒë·∫ßu ti√™n (lo·∫°i c√¥ng vi·ªác)
    try {
      // ƒê·ª£i overlay bi·∫øn m·∫•t
      await page.waitForTimeout(1000);
      
      // Th·ª≠ click v√†o dropdown trigger
      const dropdownTrigger = page.locator('[role="combobox"]').first();
      
      // Scroll element v√†o view
      await dropdownTrigger.scrollIntoViewIfNeeded();
      await page.waitForTimeout(500);
      
      // Force click ƒë·ªÉ bypass overlay
      await dropdownTrigger.click({ force: true });
      await page.waitForTimeout(1000);
      
      // T√¨m options
      const options = page.locator('[role="option"]');
      const optionCount = await options.count();
      
      if (optionCount > 0) {
        console.log(`‚úÖ Found ${optionCount} options in dropdown`);
        
        // Click option ƒë·∫ßu ti√™n
        await options.first().click();
        console.log('‚úÖ Selected first option');
      } else {
        console.log('‚ùå No options found in dropdown');
      }
      
    } catch (error) {
      console.log(`‚ùå Dropdown selection failed: ${error.message}`);
    }
    
    // Ch·ª•p ·∫£nh sau khi ch·ªçn dropdown
    await page.screenshot({ 
      path: 'test-results/task-dropdown-selected.png',
      fullPage: true 
    });
    
    // Test submit form
    console.log('üöÄ Testing form submission...');
    
    try {
      // T√¨m submit button
      const submitButtons = [
        'button:has-text("T·∫°o c√¥ng vi·ªác")',
        'button:has-text("Giao c√¥ng vi·ªác")',
        'button[type="submit"]',
        '[role="dialog"] button:last-of-type'
      ];
      
      for (const selector of submitButtons) {
        const submitButton = page.locator(selector);
        if (await submitButton.isVisible() && await submitButton.isEnabled()) {
          console.log(`üñ±Ô∏è Clicking submit button: ${selector}`);
          
          await submitButton.click({ force: true });
          await page.waitForTimeout(3000);
          
          // Ki·ªÉm tra xem dialog c√≥ ƒë√≥ng kh√¥ng
          const dialog = page.locator('[role="dialog"]');
          const isDialogVisible = await dialog.isVisible();
          
          if (!isDialogVisible) {
            console.log('üéâ SUCCESS! Form submitted and dialog closed');
            
            // Ch·ª•p ·∫£nh sau khi submit
            await page.screenshot({ 
              path: 'test-results/task-submitted.png',
              fullPage: true 
            });
            
            return;
          } else {
            console.log('‚ö†Ô∏è Dialog still visible after submit');
          }
          
          break;
        }
      }
      
    } catch (error) {
      console.log(`‚ùå Form submission failed: ${error.message}`);
    }
    
    // Ki·ªÉm tra validation errors
    const errorElements = await page.locator('.error, .text-red, [role="alert"]').count();
    if (errorElements > 0) {
      console.log(`‚ö†Ô∏è Found ${errorElements} validation errors`);
      
      // Ch·ª•p ·∫£nh errors
      await page.screenshot({ 
        path: 'test-results/task-validation-errors.png',
        fullPage: true 
      });
    }
    
    console.log('üîß Task UI testing completed');
  });

  test('should test UI responsiveness', async ({ page }) => {
    console.log('üì± Testing UI responsiveness...');
    
    // Test tr√™n desktop
    await page.setViewportSize({ width: 1920, height: 1080 });
    await page.goto('http://localhost:8088');
    await page.waitForTimeout(3000);
    
    // ƒêƒÉng nh·∫≠p
    const emailInput = page.locator('input[type="email"]');
    if (await emailInput.isVisible()) {
      await emailInput.fill('manh.khong@example.com');
      await page.locator('input[type="password"]').fill('password123');
      await page.locator('button[type="submit"]').click();
      await page.waitForTimeout(5000);
    }
    
    // M·ªü dialog tr√™n desktop
    await page.locator('text=C√¥ng vi·ªác').click();
    await page.waitForTimeout(1000);
    await page.locator('button:has-text("T·∫°o c√¥ng vi·ªác")').click();
    await page.waitForTimeout(2000);
    
    await page.screenshot({ 
      path: 'test-results/task-dialog-desktop.png',
      fullPage: true 
    });
    
    // ƒê√≥ng dialog
    await page.keyboard.press('Escape');
    await page.waitForTimeout(1000);
    
    // Test tr√™n tablet
    await page.setViewportSize({ width: 768, height: 1024 });
    await page.locator('button:has-text("T·∫°o c√¥ng vi·ªác")').click();
    await page.waitForTimeout(2000);
    
    await page.screenshot({ 
      path: 'test-results/task-dialog-tablet.png',
      fullPage: true 
    });
    
    // ƒê√≥ng dialog
    await page.keyboard.press('Escape');
    await page.waitForTimeout(1000);
    
    // Test tr√™n mobile
    await page.setViewportSize({ width: 375, height: 667 });
    await page.locator('button:has-text("T·∫°o c√¥ng vi·ªác")').click();
    await page.waitForTimeout(2000);
    
    await page.screenshot({ 
      path: 'test-results/task-dialog-mobile.png',
      fullPage: true 
    });
    
    console.log('üì± Responsiveness testing completed');
  });
});
