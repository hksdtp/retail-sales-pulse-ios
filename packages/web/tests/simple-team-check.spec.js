import { test, expect } from '@playwright/test';

test.describe('Ki·ªÉm tra Teams v√† Tr∆∞·ªüng nh√≥m - ƒê∆°n gi·∫£n', () => {
  test('Ki·ªÉm tra to√†n b·ªô h·ªá th·ªëng teams', async ({ page }) => {
    console.log('üéØ B·∫ÆT ƒê·∫¶U KI·ªÇM TRA TO√ÄN B·ªò H·ªÜ TH·ªêNG TEAMS');
    
    // 1. ƒêi ƒë·∫øn trang ch·ªß
    await page.goto('http://localhost:8088');
    await page.waitForLoadState('networkidle');
    
    // Ki·ªÉm tra title ƒë√∫ng
    await expect(page).toHaveTitle(/Ph√≤ng Kinh Doanh|Retail Sales Pulse/);
    console.log('‚úÖ Trang web ƒë√£ load th√†nh c√¥ng');
    
    // 2. ƒêƒÉng nh·∫≠p
    console.log('üîê ƒêƒÉng nh·∫≠p v√†o h·ªá th·ªëng...');
    
    // T√¨m form ƒëƒÉng nh·∫≠p
    const emailInput = page.locator('input[type="email"], input[name="email"], input[placeholder*="email"]').first();
    const passwordInput = page.locator('input[type="password"], input[name="password"]').first();
    const loginButton = page.locator('button[type="submit"], button:has-text("ƒêƒÉng nh·∫≠p"), button:has-text("Login")').first();
    
    if (await emailInput.isVisible()) {
      await emailInput.fill('manh.khong@example.com');
      await passwordInput.fill('password123');
      await loginButton.click();
      
      // ƒê·ª£i ƒëƒÉng nh·∫≠p th√†nh c√¥ng
      await page.waitForTimeout(2000);
      console.log('‚úÖ ƒê√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng');
    } else {
      console.log('‚ÑπÔ∏è ƒê√£ ƒëƒÉng nh·∫≠p s·∫µn ho·∫∑c kh√¥ng c·∫ßn ƒëƒÉng nh·∫≠p');
    }
    
    // 3. Ki·ªÉm tra Dashboard
    console.log('üè† Ki·ªÉm tra Dashboard...');
    
    // ƒêi ƒë·∫øn dashboard n·∫øu ch∆∞a c√≥
    if (!page.url().includes('dashboard')) {
      await page.goto('http://localhost:8088/dashboard');
      await page.waitForLoadState('networkidle');
    }
    
    // T√¨m dropdown team trong dashboard
    const dashboardTeamDropdown = page.locator('select, [role="combobox"]').first();
    
    if (await dashboardTeamDropdown.isVisible()) {
      console.log('üìã T√¨m th·∫•y dropdown team trong Dashboard');
      
      await dashboardTeamDropdown.click();
      await page.waitForTimeout(500);
      
      const options = await page.locator('option, [role="option"]').allTextContents();
      console.log('Dashboard team options:', options);
      
      // Ki·ªÉm tra c√≥ teams v·ªõi leaders
      const teamOptions = options.filter(opt => opt.includes('NH√ìM') && opt.includes(' - '));
      console.log(`‚úÖ T√¨m th·∫•y ${teamOptions.length} teams v·ªõi leaders`);
      
      // Ki·ªÉm tra Ph·∫°m Th·ªã H∆∞∆°ng ·ªü NH√ìM 4
      const hasHuongTeam4 = options.some(opt => opt.includes('NH√ìM 4') && opt.includes('Ph·∫°m Th·ªã H∆∞∆°ng'));
      console.log(`‚úÖ NH√ìM 4 - Ph·∫°m Th·ªã H∆∞∆°ng: ${hasHuongTeam4 ? 'C√ì' : 'KH√îNG'}`);
      
      // Ki·ªÉm tra kh√¥ng c√≤n L√™ Ti·∫øn Qu√¢n
      const hasQuan = options.some(opt => opt.includes('L√™ Ti·∫øn Qu√¢n'));
      console.log(`‚úÖ L√™ Ti·∫øn Qu√¢n ƒë√£ x√≥a: ${!hasQuan ? 'ƒê√öNG' : 'V·∫™N C√íN'}`);
      
      await page.keyboard.press('Escape');
    } else {
      console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y dropdown team trong Dashboard');
    }
    
    // 4. Ki·ªÉm tra Tasks page
    console.log('üìã Ki·ªÉm tra Tasks page...');
    
    // T√¨m link ƒë·∫øn tasks
    const tasksLink = page.locator('a[href*="tasks"], a:has-text("Tasks"), a:has-text("C√¥ng vi·ªác")').first();
    if (await tasksLink.isVisible()) {
      await tasksLink.click();
      await page.waitForLoadState('networkidle');
      
      // T√¨m dropdown team trong tasks
      const tasksTeamDropdown = page.locator('select, [role="combobox"]').first();
      
      if (await tasksTeamDropdown.isVisible()) {
        console.log('üìã T√¨m th·∫•y dropdown team trong Tasks');
        
        await tasksTeamDropdown.click();
        await page.waitForTimeout(500);
        
        const tasksOptions = await page.locator('option, [role="option"]').allTextContents();
        console.log('Tasks team options:', tasksOptions);
        
        const tasksTeamOptions = tasksOptions.filter(opt => opt.includes('NH√ìM') && opt.includes(' - '));
        console.log(`‚úÖ Tasks c√≥ ${tasksTeamOptions.length} teams v·ªõi leaders`);
        
        await page.keyboard.press('Escape');
      }
    } else {
      console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y link Tasks');
    }
    
    // 5. Ki·ªÉm tra Employees page
    console.log('üë• Ki·ªÉm tra Employees page...');
    
    // T√¨m link ƒë·∫øn employees
    const employeesLink = page.locator('a[href*="employees"], a:has-text("Employees"), a:has-text("Nh√¢n vi√™n")').first();
    if (await employeesLink.isVisible()) {
      await employeesLink.click();
      await page.waitForLoadState('networkidle');
      
      // T√¨m dropdown team trong employees
      const employeesTeamDropdown = page.locator('select, [role="combobox"]').first();
      
      if (await employeesTeamDropdown.isVisible()) {
        console.log('üë• T√¨m th·∫•y dropdown team trong Employees');
        
        await employeesTeamDropdown.click();
        await page.waitForTimeout(500);
        
        const employeesOptions = await page.locator('option, [role="option"]').allTextContents();
        console.log('Employees team options:', employeesOptions);
        
        const employeesTeamOptions = employeesOptions.filter(opt => opt.includes('NH√ìM') && opt.includes(' - '));
        console.log(`‚úÖ Employees c√≥ ${employeesTeamOptions.length} teams v·ªõi leaders`);
        
        await page.keyboard.press('Escape');
      }
    } else {
      console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y link Employees');
    }
    
    // 6. T·ªïng k·∫øt ki·ªÉm tra
    console.log('üìä T·ªîNG K·∫æT KI·ªÇM TRA:');
    console.log('====================');
    
    // Quay l·∫°i dashboard ƒë·ªÉ ki·ªÉm tra cu·ªëi c√πng
    await page.goto('http://localhost:8088/dashboard');
    await page.waitForLoadState('networkidle');
    
    const finalDropdown = page.locator('select, [role="combobox"]').first();
    
    if (await finalDropdown.isVisible()) {
      await finalDropdown.click();
      await page.waitForTimeout(500);
      
      const finalOptions = await page.locator('option, [role="option"]').allTextContents();
      const finalTeamOptions = finalOptions.filter(opt => opt.includes('NH√ìM') && opt.includes(' - '));
      
      console.log('üéØ K·∫æT QU·∫¢ CU·ªêI C√ôNG:');
      console.log(`‚úÖ T·ªïng teams v·ªõi leaders: ${finalTeamOptions.length}`);
      
      // Ki·ªÉm tra c·∫•u tr√∫c mong ƒë·ª£i
      const expectedTeams = [
        'NH√ìM 1 - L∆∞∆°ng Vi·ªát Anh',
        'NH√ìM 2 - Nguy·ªÖn Th·ªã Th·∫£o',
        'NH√ìM 3 - Tr·ªãnh Th·ªã B·ªën',
        'NH√ìM 4 - Ph·∫°m Th·ªã H∆∞∆°ng',
        'NH√ìM 1 - Nguy·ªÖn Th·ªã Nga',
        'NH√ìM 2 - Nguy·ªÖn Ng·ªçc Vi·ªát Khanh'
      ];
      
      let correctCount = 0;
      expectedTeams.forEach(expected => {
        const found = finalOptions.some(opt => opt.includes(expected));
        if (found) {
          correctCount++;
          console.log(`‚úÖ ${expected}: C√ì`);
        } else {
          console.log(`‚ùå ${expected}: THI·∫æU`);
        }
      });
      
      console.log(`\nüìä K·∫øt qu·∫£: ${correctCount}/${expectedTeams.length} teams ƒë√∫ng`);
      
      // Ki·ªÉm tra kh√¥ng c√≥ L√™ Ti·∫øn Qu√¢n
      const hasQuan = finalOptions.some(opt => opt.includes('L√™ Ti·∫øn Qu√¢n'));
      console.log(`üóëÔ∏è L√™ Ti·∫øn Qu√¢n ƒë√£ x√≥a: ${!hasQuan ? '‚úÖ ƒê√öNG' : '‚ùå V·∫™N C√íN'}`);
      
      // Ki·ªÉm tra c√≥ Ph·∫°m Th·ªã H∆∞∆°ng ·ªü NH√ìM 4
      const hasHuongTeam4 = finalOptions.some(opt => opt.includes('NH√ìM 4') && opt.includes('Ph·∫°m Th·ªã H∆∞∆°ng'));
      console.log(`üë©‚Äçüíº NH√ìM 4 - Ph·∫°m Th·ªã H∆∞∆°ng: ${hasHuongTeam4 ? '‚úÖ C√ì' : '‚ùå THI·∫æU'}`);
      
      if (correctCount === expectedTeams.length && !hasQuan && hasHuongTeam4) {
        console.log('\nüéâ HO√ÄN H·∫¢O! T·∫§T C·∫¢ TEAMS ƒê√É ƒê√öNG!');
      } else {
        console.log('\n‚ö†Ô∏è V·∫´n c√≤n v·∫•n ƒë·ªÅ c·∫ßn kh·∫Øc ph·ª•c');
      }
      
      // Log t·∫•t c·∫£ options ƒë·ªÉ debug
      console.log('\nüìã T·∫§T C·∫¢ OPTIONS:');
      finalOptions.forEach((opt, index) => {
        console.log(`   ${index + 1}. ${opt}`);
      });
      
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y dropdown team ƒë·ªÉ ki·ªÉm tra cu·ªëi c√πng');
    }
    
    console.log('\n‚úÖ HO√ÄN TH√ÄNH KI·ªÇM TRA TO√ÄN B·ªò H·ªÜ TH·ªêNG!');
  });
});
