import { test, expect } from '@playwright/test';

test.describe('Mobile Visual Testing', () => {
  test('should capture mobile screenshots of employees page', async ({ page }) => {
    console.log('üì± Starting mobile visual testing...');
    
    // Navigate to page first, then set up auth
    await page.goto('http://localhost:8088/employees');
    
    // Setup authentication after page load
    await page.addInitScript(() => {
      const testUser = {
        id: '1',
        name: 'Kh·ªïng ƒê·ª©c M·∫°nh',
        email: 'manh@company.com',
        role: 'retail_director',
        team: 'Ph√≤ng Kinh Doanh',
        location: 'H√† N·ªôi',
        password_changed: true,
      };
      localStorage.setItem('currentUser', JSON.stringify(testUser));
    });
    
    // Reload to apply auth
    await page.reload();
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(3000);
    
    console.log('üì± Testing iPhone SE (375x667)...');
    await page.setViewportSize({ width: 375, height: 667 });
    await page.waitForTimeout(1000);
    
    // Take initial screenshot
    await page.screenshot({ 
      path: 'test-results/mobile-iphone-se-initial.png',
      fullPage: true 
    });
    console.log('‚úÖ iPhone SE initial screenshot saved');
    
    // Test search functionality
    const searchInput = page.locator('input[placeholder*="T√¨m ki·∫øm"]');
    if (await searchInput.isVisible()) {
      await searchInput.fill('L∆∞∆°ng');
      await page.waitForTimeout(1000);
      
      await page.screenshot({ 
        path: 'test-results/mobile-iphone-se-search.png',
        fullPage: true 
      });
      console.log('‚úÖ iPhone SE search screenshot saved');
    }
    
    // Test location filter
    const locationSelect = page.locator('button').filter({ hasText: 'ƒê·ªãa ƒëi·ªÉm' }).first();
    if (await locationSelect.isVisible()) {
      await locationSelect.click();
      await page.waitForTimeout(500);
      
      await page.screenshot({ 
        path: 'test-results/mobile-iphone-se-location-dropdown.png',
        fullPage: true 
      });
      console.log('‚úÖ iPhone SE location dropdown screenshot saved');
      
      const hanoiOption = page.locator('div[role="option"]:has-text("H√† N·ªôi")');
      if (await hanoiOption.isVisible()) {
        await hanoiOption.click();
        await page.waitForTimeout(1000);
        
        await page.screenshot({ 
          path: 'test-results/mobile-iphone-se-location-selected.png',
          fullPage: true 
        });
        console.log('‚úÖ iPhone SE location selected screenshot saved');
      }
    }
    
    console.log('üì± Testing iPhone 12 (390x844)...');
    await page.setViewportSize({ width: 390, height: 844 });
    await page.waitForTimeout(1000);
    
    await page.screenshot({ 
      path: 'test-results/mobile-iphone-12.png',
      fullPage: true 
    });
    console.log('‚úÖ iPhone 12 screenshot saved');
    
    console.log('üì± Testing Galaxy S20 (360x800)...');
    await page.setViewportSize({ width: 360, height: 800 });
    await page.waitForTimeout(1000);
    
    await page.screenshot({ 
      path: 'test-results/mobile-galaxy-s20.png',
      fullPage: true 
    });
    console.log('‚úÖ Galaxy S20 screenshot saved');
    
    console.log('üì± Testing iPad Mini (768x1024)...');
    await page.setViewportSize({ width: 768, height: 1024 });
    await page.waitForTimeout(1000);
    
    await page.screenshot({ 
      path: 'test-results/mobile-ipad-mini.png',
      fullPage: true 
    });
    console.log('‚úÖ iPad Mini screenshot saved');
    
    // Test filter interactions on tablet
    const roleSelect = page.locator('button').filter({ hasText: 'Vai tr√≤' }).first();
    if (await roleSelect.isVisible()) {
      await roleSelect.click();
      await page.waitForTimeout(500);
      
      const teamLeaderOption = page.locator('div[role="option"]:has-text("Tr∆∞·ªüng nh√≥m")');
      if (await teamLeaderOption.isVisible()) {
        await teamLeaderOption.click();
        await page.waitForTimeout(1000);
        
        await page.screenshot({ 
          path: 'test-results/mobile-ipad-mini-filters.png',
          fullPage: true 
        });
        console.log('‚úÖ iPad Mini with filters screenshot saved');
      }
    }
    
    console.log('üì± Testing landscape mode (667x375)...');
    await page.setViewportSize({ width: 667, height: 375 });
    await page.waitForTimeout(1000);
    
    await page.screenshot({ 
      path: 'test-results/mobile-landscape.png',
      fullPage: true 
    });
    console.log('‚úÖ Landscape mode screenshot saved');
    
    console.log('üéâ All mobile screenshots captured successfully!');
  });

  test('should test mobile interactions and responsiveness', async ({ page }) => {
    console.log('üì± Testing mobile interactions...');
    
    await page.goto('http://localhost:8088/employees');
    
    await page.addInitScript(() => {
      const testUser = {
        id: '1',
        name: 'Kh·ªïng ƒê·ª©c M·∫°nh',
        email: 'manh@company.com',
        role: 'retail_director',
        team: 'Ph√≤ng Kinh Doanh',
        location: 'H√† N·ªôi',
        password_changed: true,
      };
      localStorage.setItem('currentUser', JSON.stringify(testUser));
    });
    
    await page.reload();
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(3000);
    
    // Set mobile viewport
    await page.setViewportSize({ width: 375, height: 667 });
    await page.waitForTimeout(1000);
    
    // Test touch interactions
    console.log('üîç Testing search input touch...');
    const searchInput = page.locator('input[placeholder*="T√¨m ki·∫øm"]');
    await searchInput.tap();
    await searchInput.fill('Nguy·ªÖn');
    await page.waitForTimeout(1000);
    
    // Test dropdown touch interactions
    console.log('üìç Testing location dropdown touch...');
    const locationSelect = page.locator('button').filter({ hasText: 'ƒê·ªãa ƒëi·ªÉm' }).first();
    await locationSelect.tap();
    await page.waitForTimeout(1000);
    
    // Check if dropdown is properly positioned
    const dropdown = page.locator('[role="listbox"]');
    if (await dropdown.isVisible()) {
      const boundingBox = await dropdown.boundingBox();
      console.log(`üìè Dropdown position: x=${boundingBox.x}, y=${boundingBox.y}, width=${boundingBox.width}`);
      
      // Ensure dropdown doesn't overflow screen
      expect(boundingBox.x + boundingBox.width).toBeLessThanOrEqual(375);
    }
    
    await page.screenshot({ 
      path: 'test-results/mobile-interactions-test.png',
      fullPage: true 
    });
    
    console.log('‚úÖ Mobile interactions test completed');
  });
});
