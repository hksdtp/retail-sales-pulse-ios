import { test, expect } from '@playwright/test';

test.describe('Force Refresh v√† ki·ªÉm tra Teams', () => {
  test('Force refresh v√† ki·ªÉm tra teams dropdown', async ({ page }) => {
    console.log('üîÑ FORCE REFRESH V√Ä KI·ªÇM TRA TEAMS');
    
    // 1. Clear cache v√† cookies
    await page.context().clearCookies();
    await page.context().clearPermissions();
    
    // 2. ƒêi ƒë·∫øn trang v·ªõi cache disabled
    await page.goto('http://localhost:8088', { waitUntil: 'networkidle' });
    
    // 3. Hard refresh
    await page.reload({ waitUntil: 'networkidle' });
    
    // 4. ƒêƒÉng nh·∫≠p
    const emailInput = page.locator('input[type="email"]').first();
    if (await emailInput.isVisible()) {
      await emailInput.fill('manh.khong@example.com');
      await page.locator('input[type="password"]').fill('password123');
      await page.locator('button[type="submit"]').click();
      await page.waitForTimeout(3000);
    }
    
    // 5. ƒêi ƒë·∫øn employees page v√† force refresh
    await page.goto('http://localhost:8088/employees', { waitUntil: 'networkidle' });
    await page.reload({ waitUntil: 'networkidle' });
    
    // 6. ƒê·ª£i API calls ho√†n th√†nh
    await page.waitForTimeout(2000);
    
    // 7. T√¨m team dropdown v√† click
    console.log('üîç T√¨m team dropdown...');
    
    // Th·ª≠ nhi·ªÅu c√°ch t√¨m dropdown
    const selectors = [
      'select:has(option:text("T·∫•t c·∫£ nh√≥m"))',
      '[role="combobox"]:has-text("nh√≥m")',
      'button:has-text("T·∫•t c·∫£ nh√≥m")',
      '[data-testid*="team"]',
      '.team-select',
      'select:nth-of-type(3)',
      '[role="combobox"]:nth-of-type(3)'
    ];
    
    let teamDropdown = null;
    for (const selector of selectors) {
      const element = page.locator(selector).first();
      if (await element.isVisible()) {
        console.log(`‚úÖ T√¨m th·∫•y dropdown v·ªõi selector: ${selector}`);
        teamDropdown = element;
        break;
      }
    }
    
    if (teamDropdown) {
      // Click dropdown
      await teamDropdown.click();
      await page.waitForTimeout(1000);
      
      // L·∫•y t·∫•t c·∫£ options
      const options = await page.locator('option, [role="option"]').allTextContents();
      console.log('üìã Team dropdown options:', options);
      
      // Ki·ªÉm tra chi ti·∫øt
      const teamOptions = options.filter(opt => opt.includes('NH√ìM') && opt.includes(' - '));
      console.log(`‚úÖ Teams v·ªõi leaders: ${teamOptions.length}`);
      
      teamOptions.forEach((opt, index) => {
        console.log(`   ${index + 1}. ${opt}`);
      });
      
      // Ki·ªÉm tra c·ª• th·ªÉ
      const hasHuongTeam4 = options.some(opt => opt.includes('NH√ìM 4') && opt.includes('Ph·∫°m Th·ªã H∆∞∆°ng'));
      const hasQuan = options.some(opt => opt.includes('L√™ Ti·∫øn Qu√¢n'));
      
      console.log(`üë©‚Äçüíº NH√ìM 4 - Ph·∫°m Th·ªã H∆∞∆°ng: ${hasHuongTeam4 ? '‚úÖ C√ì' : '‚ùå THI·∫æU'}`);
      console.log(`üë®‚Äçüíº L√™ Ti·∫øn Qu√¢n: ${hasQuan ? '‚ùå V·∫™N C√íN' : '‚úÖ ƒê√É X√ìA'}`);
      
      // Ki·ªÉm tra t·∫•t c·∫£ expected teams
      const expectedTeams = [
        'NH√ìM 1 - L∆∞∆°ng Vi·ªát Anh',
        'NH√ìM 2 - Nguy·ªÖn Th·ªã Th·∫£o', 
        'NH√ìM 3 - Tr·ªãnh Th·ªã B·ªën',
        'NH√ìM 4 - Ph·∫°m Th·ªã H∆∞∆°ng',
        'NH√ìM 1 - Nguy·ªÖn Th·ªã Nga',
        'NH√ìM 2 - Nguy·ªÖn Ng·ªçc Vi·ªát Khanh'
      ];
      
      let correctCount = 0;
      expectedTeams.forEach(expected => {
        const found = options.some(opt => opt.includes(expected));
        if (found) {
          correctCount++;
          console.log(`‚úÖ ${expected}: C√ì`);
        } else {
          console.log(`‚ùå ${expected}: THI·∫æU`);
        }
      });
      
      console.log(`\nüìä K·∫øt qu·∫£: ${correctCount}/${expectedTeams.length} teams ƒë√∫ng`);
      
      if (correctCount === expectedTeams.length && !hasQuan && hasHuongTeam4) {
        console.log('üéâ HO√ÄN H·∫¢O! T·∫§T C·∫¢ TEAMS ƒê√É ƒê√öNG!');
      } else {
        console.log('‚ö†Ô∏è V·∫´n c√≤n v·∫•n ƒë·ªÅ c·∫ßn kh·∫Øc ph·ª•c');
        
        // Debug th√™m
        console.log('\nüîç DEBUG TH√îNG TIN:');
        console.log('T·∫•t c·∫£ options:', options);
        
        // Ki·ªÉm tra API response
        await page.route('**/users', route => {
          console.log('üì° API Users ƒë∆∞·ª£c g·ªçi');
          route.continue();
        });
        
        await page.route('**/teams', route => {
          console.log('üì° API Teams ƒë∆∞·ª£c g·ªçi');
          route.continue();
        });
        
        // Refresh l·∫°i ƒë·ªÉ trigger API
        await page.reload({ waitUntil: 'networkidle' });
      }
      
      await page.keyboard.press('Escape');
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y team dropdown');
      
      // Debug: Screenshot v√† DOM
      await page.screenshot({ path: 'debug-no-dropdown.png' });
      
      // T√¨m t·∫•t c·∫£ elements c√≥ text "nh√≥m"
      const nhomElements = await page.locator('text=nh√≥m').all();
      console.log(`üîç T√¨m th·∫•y ${nhomElements.length} elements ch·ª©a "nh√≥m"`);
      
      for (let i = 0; i < Math.min(nhomElements.length, 5); i++) {
        const text = await nhomElements[i].textContent();
        const tagName = await nhomElements[i].evaluate(el => el.tagName);
        console.log(`   ${i + 1}. <${tagName}>: ${text}`);
      }
    }
    
    console.log('\n‚úÖ HO√ÄN TH√ÄNH FORCE REFRESH CHECK!');
  });
});
