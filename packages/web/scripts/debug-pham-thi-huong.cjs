#!/usr/bin/env node

/**
 * Script ƒë·ªÉ debug v·∫•n ƒë·ªÅ ph√¢n quy·ªÅn c·ªßa Ph·∫°m Th·ªã H∆∞∆°ng
 * Ki·ªÉm tra user data, tasks data, v√† logic ph√¢n quy·ªÅn
 */

const API_BASE = 'http://localhost:3003';

async function debugPhamThiHuong() {
  console.log('üîç DEBUGGING PH·∫†M TH·ªä H∆Ø∆†NG PERMISSION ISSUE');
  console.log('='.repeat(60));

  try {
    // 1. Ki·ªÉm tra API Server data
    console.log('\n1. üìä KI·ªÇM TRA API SERVER DATA:');
    console.log('-'.repeat(40));
    
    const usersResponse = await fetch(`${API_BASE}/users`);
    const usersResult = await usersResponse.json();
    
    console.log(`üë• Users trong API: ${usersResult.data?.length || 0}`);
    if (usersResult.data) {
      usersResult.data.forEach(user => {
        console.log(`   - ${user.name} (${user.email}) - Role: ${user.role}, Team: ${user.team_id}`);
      });
    }

    const tasksResponse = await fetch(`${API_BASE}/tasks`);
    const tasksResult = await tasksResponse.json();
    
    console.log(`üìã Tasks trong API: ${tasksResult.data?.length || 0}`);
    if (tasksResult.data && tasksResult.data.length > 0) {
      tasksResult.data.forEach(task => {
        console.log(`   - ${task.title} - Assigned: ${task.assignedTo}, Team: ${task.teamId}`);
      });
    }

    // 2. Ki·ªÉm tra Mock Data
    console.log('\n2. üé≠ KI·ªÇM TRA MOCK DATA:');
    console.log('-'.repeat(40));
    
    // Import mock data
    const path = require('path');
    const mockAuthPath = path.join(__dirname, '../src/services/mockAuth.ts');
    
    console.log('Mock data location:', mockAuthPath);
    
    // T√¨m Ph·∫°m Th·ªã H∆∞∆°ng trong mock data
    const fs = require('fs');
    const mockContent = fs.readFileSync(mockAuthPath, 'utf8');
    
    const huongMatches = mockContent.match(/Ph·∫°m Th·ªã H∆∞∆°ng.*?\n.*?email.*?\n.*?role.*?\n.*?team_id.*?\n/g);
    if (huongMatches) {
      console.log('‚úÖ T√¨m th·∫•y Ph·∫°m Th·ªã H∆∞∆°ng trong mock data:');
      huongMatches.forEach(match => {
        console.log(match.trim());
      });
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y Ph·∫°m Th·ªã H∆∞∆°ng trong mock data');
    }

    // 3. Th√™m Ph·∫°m Th·ªã H∆∞∆°ng v√†o API Server
    console.log('\n3. ‚ûï TH√äM PH·∫†M TH·ªä H∆Ø∆†NG V√ÄO API SERVER:');
    console.log('-'.repeat(40));
    
    const huongData = {
      id: 'pham_thi_huong_id',
      name: 'Ph·∫°m Th·ªã H∆∞∆°ng',
      email: 'huong.pham@example.com',
      role: 'team_leader',
      team_id: '5',
      location: 'H√† N·ªôi',
      department: 'B√°n l·∫ª',
      department_type: 'retail',
      position: 'Tr∆∞·ªüng nh√≥m',
      status: 'active',
      password_changed: true
    };

    try {
      const createResponse = await fetch(`${API_BASE}/users`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(huongData)
      });

      const createResult = await createResponse.json();
      if (createResult.success) {
        console.log(`‚úÖ ƒê√£ th√™m Ph·∫°m Th·ªã H∆∞∆°ng v√†o API: ${createResult.data.id}`);
      } else {
        console.log(`‚ùå L·ªói th√™m v√†o API: ${createResult.error}`);
      }
    } catch (error) {
      console.log(`‚ùå L·ªói khi th√™m v√†o API: ${error.message}`);
    }

    // 4. Th√™m m·ªôt s·ªë tasks m·∫´u cho team 5
    console.log('\n4. üìã TH√äM TASKS M·∫™U CHO TEAM 5:');
    console.log('-'.repeat(40));
    
    const sampleTasks = [
      {
        id: 'task_team5_1',
        title: 'Kh·∫£o s√°t kh√°ch h√†ng m·ªõi - Team 5',
        description: 'Kh·∫£o s√°t nhu c·∫ßu c·ªßa kh√°ch h√†ng m·ªõi t·∫°i khu v·ª±c H√† N·ªôi',
        assignedTo: 'pham_thi_huong_id',
        teamId: '5',
        status: 'pending',
        priority: 'high',
        type: 'KTS m·ªõi',
        date: new Date().toISOString().split('T')[0],
        location: 'H√† N·ªôi',
        user_id: 'pham_thi_huong_id',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      },
      {
        id: 'task_team5_2', 
        title: 'B√°o c√°o doanh s·ªë tu·∫ßn - Team 5',
        description: 'T·ªïng h·ª£p b√°o c√°o doanh s·ªë b√°n h√†ng tu·∫ßn c·ªßa team',
        assignedTo: 'pham_thi_huong_id',
        teamId: '5',
        status: 'in_progress',
        priority: 'medium',
        type: 'B√°o c√°o',
        date: new Date().toISOString().split('T')[0],
        location: 'H√† N·ªôi',
        user_id: 'pham_thi_huong_id',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      },
      {
        id: 'task_other_team',
        title: 'C√¥ng vi·ªác c·ªßa team kh√°c - Team 1',
        description: 'ƒê√¢y l√† c√¥ng vi·ªác c·ªßa team 1, Ph·∫°m Th·ªã H∆∞∆°ng kh√¥ng ƒë∆∞·ª£c xem',
        assignedTo: 'Ue4vzSj1KDg4vZyXwlHJ', // L∆∞∆°ng Vi·ªát Anh
        teamId: '1',
        status: 'pending',
        priority: 'low',
        type: 'KH/CƒêT',
        date: new Date().toISOString().split('T')[0],
        location: 'H√† N·ªôi',
        user_id: 'Ue4vzSj1KDg4vZyXwlHJ',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }
    ];

    for (const task of sampleTasks) {
      try {
        const taskResponse = await fetch(`${API_BASE}/tasks`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(task)
        });

        const taskResult = await taskResponse.json();
        if (taskResult.success) {
          console.log(`‚úÖ ƒê√£ th√™m task: ${task.title}`);
        } else {
          console.log(`‚ùå L·ªói th√™m task: ${taskResult.error}`);
        }
      } catch (error) {
        console.log(`‚ùå L·ªói khi th√™m task: ${error.message}`);
      }
    }

    // 5. Ki·ªÉm tra l·∫°i data sau khi th√™m
    console.log('\n5. üîÑ KI·ªÇM TRA L·∫†I DATA SAU KHI TH√äM:');
    console.log('-'.repeat(40));
    
    const finalUsersResponse = await fetch(`${API_BASE}/users`);
    const finalUsersResult = await finalUsersResponse.json();
    
    console.log(`üë• Users cu·ªëi c√πng: ${finalUsersResult.data?.length || 0}`);
    const huongUser = finalUsersResult.data?.find(u => u.name.includes('Ph·∫°m Th·ªã H∆∞∆°ng'));
    if (huongUser) {
      console.log(`‚úÖ Ph·∫°m Th·ªã H∆∞∆°ng: ${huongUser.name} (ID: ${huongUser.id}, Team: ${huongUser.team_id}, Role: ${huongUser.role})`);
    }

    const finalTasksResponse = await fetch(`${API_BASE}/tasks`);
    const finalTasksResult = await finalTasksResponse.json();
    
    console.log(`üìã Tasks cu·ªëi c√πng: ${finalTasksResult.data?.length || 0}`);
    if (finalTasksResult.data) {
      const team5Tasks = finalTasksResult.data.filter(t => t.teamId === '5');
      const otherTasks = finalTasksResult.data.filter(t => t.teamId !== '5');
      
      console.log(`   - Tasks c·ªßa Team 5: ${team5Tasks.length}`);
      team5Tasks.forEach(task => {
        console.log(`     * ${task.title} (${task.status})`);
      });
      
      console.log(`   - Tasks c·ªßa teams kh√°c: ${otherTasks.length}`);
      otherTasks.forEach(task => {
        console.log(`     * ${task.title} (Team: ${task.teamId})`);
      });
    }

    // 6. H∆∞·ªõng d·∫´n test
    console.log('\n6. üß™ H∆Ø·ªöNG D·∫™N TEST:');
    console.log('-'.repeat(40));
    console.log('1. M·ªü tr√¨nh duy·ªát: http://localhost:8088');
    console.log('2. ƒêƒÉng nh·∫≠p v·ªõi:');
    console.log('   - Email: huong.pham@example.com');
    console.log('   - Password: haininh1 (admin master password)');
    console.log('3. Ki·ªÉm tra trang Tasks:');
    console.log('   - Ph·∫°m Th·ªã H∆∞∆°ng ch·ªâ th·∫•y 2 tasks c·ªßa team 5');
    console.log('   - Kh√¥ng th·∫•y task c·ªßa team 1');
    console.log('4. Ki·ªÉm tra trang "C√¥ng vi·ªác c·ªßa Nh√≥m":');
    console.log('   - Ch·ªâ hi·ªÉn th·ªã tasks c·ªßa team 5');
    console.log('   - Kh√¥ng hi·ªÉn th·ªã tasks c·ªßa teams kh√°c');

    console.log('\n‚úÖ HO√ÄN TH√ÄNH DEBUG SCRIPT!');
    
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh debug:', error);
  }
}

// Ch·∫°y script
debugPhamThiHuong().catch(console.error);
