const fetch = require('node-fetch');

const API_BASE = 'https://api-adwc442mha-uc.a.run.app';

// Danh s√°ch 11 users duplicate c·∫ßn x√≥a
const usersToDelete = [
  {
    id: '1',
    name: 'Kh·ªïng ƒê·ª©c M·∫°nh 123',
    email: 'manh.khong@example.com',
    reason: 'Thi·∫øu ho√†n to√†n d·ªØ li·ªáu (role, team, location, status = undefined)'
  },
  {
    id: 'ObroYv1R4odHRcTGOB8d',
    name: 'Kh·ªïng ƒê·ª©c M·∫°nh',
    email: 'manh.khong@example.com',
    reason: 'Duplicate - gi·ªØ l·∫°i Ve7sGRnMoRvT1E0VL5Ds (t·∫°o s·ªõm h∆°n 6/4/2025)'
  },
  {
    id: 'aa2tloFwBhe6m05lwypc',
    name: 'Nguy·ªÖn Ng·ªçc Vi·ªát Khanh',
    email: 'vietkhanh@example.com',
    reason: 'Duplicate - gi·ªØ l·∫°i 0AzCiDnWxcCMzIAwLA9D (t·∫°o s·ªõm h∆°n 6/4/2025)'
  },
  {
    id: 'ERi0hcgzKhWsRKx1Gm26',
    name: 'Ph·∫°m Th·ªã H∆∞∆°ng',
    email: 'huong.pham@example.com',
    reason: 'Duplicate - gi·ªØ l·∫°i ACKzl2RISqrx5ca9QDM6 (t·∫°o s·ªõm h∆°n 6/4/2025)'
  },
  {
    id: 'XbEKpUCw6OPLiFQWmCCm',
    name: 'H√† Nguy·ªÖn Tuy·∫øn',
    email: 'tuyen.ha@example.com',
    reason: 'Duplicate - gi·ªØ l·∫°i 8NpVPLaiLDhv75jZNq5q (t·∫°o s·ªõm h∆°n 6/4/2025)'
  },
  {
    id: 'pGahEQwrJN8aIpEdRnBY',
    name: 'H√† Nguy·ªÖn Thanh Tuy·ªÅn',
    email: 'tuyen.ha@example.com',
    reason: 'Duplicate - gi·ªØ l·∫°i 8NpVPLaiLDhv75jZNq5q (t·∫°o s·ªõm h∆°n 6/4/2025)'
  },
  {
    id: 'tacjOehkubNmOvgnmvOo',
    name: 'Ph√πng Th·ªã Thu·ª≥ V√¢n',
    email: 'thuyvan@example.com',
    reason: 'Duplicate - gi·ªØ l·∫°i RIWI0w6ETBPy6AA2Z5hL (t·∫°o s·ªõm h∆°n 6/4/2025)'
  },
  {
    id: 'xpKkMvhRi7nfT8v81pUr',
    name: 'Ph√πng Th·ªã Thu·ª≥ V√¢n',
    email: 'thuyvan@example.com',
    reason: 'Duplicate - gi·ªØ l·∫°i RIWI0w6ETBPy6AA2Z5hL (t·∫°o s·ªõm h∆°n 6/4/2025)'
  },
  {
    id: 'ZIJgzHB2b60qfWyOK0Ko',
    name: 'Tr·ªãnh Th·ªã B·ªën',
    email: 'bon.trinh@example.com',
    reason: 'Duplicate - gi·ªØ l·∫°i k030JV0tAobf5rMvdzG4 (t·∫°o s·ªõm h∆°n 6/4/2025)'
  },
  {
    id: 'oH7an8cvGdI4uwmi7bpZ',
    name: 'Nguy·ªÖn Th·ªã Nga',
    email: 'nga.nguyen@example.com',
    reason: 'Duplicate - gi·ªØ l·∫°i pzSa30JeZR0UoOoKhZ7l (t·∫°o s·ªõm h∆°n 6/4/2025)'
  },
  {
    id: 'zdORDsodkjHvQjDwbIEX',
    name: 'Nguy·ªÖn Th·ªã Nga',
    email: 'nga.nguyen@example.com',
    reason: 'Duplicate - gi·ªØ l·∫°i pzSa30JeZR0UoOoKhZ7l (t·∫°o s·ªõm h∆°n 6/4/2025)'
  }
];

async function markUsersAsDeleted() {
  console.log('üóëÔ∏è ƒê√ÅNH D·∫§U DUPLICATE USERS L√Ä ƒê√É X√ìA');
  console.log('=====================================\n');

  try {
    // 1. Ki·ªÉm tra API health
    console.log('1. üè• Ki·ªÉm tra API health...');
    const healthResponse = await fetch(`${API_BASE}/health`);
    const healthData = await healthResponse.json();
    console.log('‚úÖ API Status:', healthData.status);
    console.log('');

    // 2. Ki·ªÉm tra s·ªë l∆∞·ª£ng users hi·ªán t·∫°i
    console.log('2. üë• Ki·ªÉm tra users hi·ªán t·∫°i...');
    const usersResponse = await fetch(`${API_BASE}/users`);
    const usersData = await usersResponse.json();
    console.log(`üìä T·ªïng users hi·ªán t·∫°i: ${usersData.data.length}`);
    console.log('');

    // 3. ƒê√°nh d·∫•u users l√† deleted thay v√¨ x√≥a th·∫≠t
    console.log('3. üè∑Ô∏è ƒê√°nh d·∫•u users duplicate l√† DELETED...');
    let markedCount = 0;
    let errorCount = 0;

    for (let i = 0; i < usersToDelete.length; i++) {
      const user = usersToDelete[i];
      console.log(`üè∑Ô∏è ƒê√°nh d·∫•u ${i + 1}/${usersToDelete.length}: "${user.name}" (ID: ${user.id})`);

      try {
        // C·∫≠p nh·∫≠t user v·ªõi status = 'deleted' v√† ·∫©n kh·ªèi danh s√°ch
        const updateData = {
          status: 'deleted',
          deleted_at: new Date().toISOString(),
          deleted_reason: user.reason,
          name: `[DELETED] ${user.name}`,
          email: `deleted_${user.id}@deleted.com`,
          active: false
        };

        const response = await fetch(`${API_BASE}/users/${user.id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(updateData)
        });

        if (response.ok) {
          const result = await response.json();
          if (result.success) {
            markedCount++;
            console.log(`   ‚úÖ ƒê√£ ƒë√°nh d·∫•u: "${user.name}"`);
          } else {
            errorCount++;
            console.log(`   ‚ùå L·ªói ƒë√°nh d·∫•u: "${user.name}" - ${result.error || 'Unknown error'}`);
          }
        } else {
          errorCount++;
          console.log(`   ‚ùå HTTP Error: "${user.name}" - Status ${response.status}`);
        }

        // Delay ƒë·ªÉ tr√°nh rate limit
        await new Promise((resolve) => setTimeout(resolve, 500));
      } catch (error) {
        errorCount++;
        console.log(`   ‚ùå L·ªói khi ƒë√°nh d·∫•u: "${user.name}" - ${error.message}`);
      }
    }

    console.log('');

    // 4. Ki·ªÉm tra k·∫øt qu·∫£
    console.log('4. üìä Ki·ªÉm tra k·∫øt qu·∫£...');
    const finalUsersResponse = await fetch(`${API_BASE}/users`);
    const finalUsersData = await finalUsersResponse.json();

    // L·ªçc ra users active (kh√¥ng b·ªã deleted)
    const activeUsers = finalUsersData.data.filter(user => user.status !== 'deleted');
    const deletedUsers = finalUsersData.data.filter(user => user.status === 'deleted');

    console.log('üìä K·∫æT QU·∫¢ ƒê√ÅNH D·∫§U DUPLICATE USERS:');
    console.log('===================================');
    console.log(`‚úÖ Users ƒë√£ ƒë√°nh d·∫•u deleted: ${markedCount}/${usersToDelete.length}`);
    console.log(`‚ùå L·ªói: ${errorCount}`);
    console.log(`üìã T·ªïng users trong DB: ${finalUsersData.data.length}`);
    console.log(`‚úÖ Users active: ${activeUsers.length}`);
    console.log(`üóëÔ∏è Users deleted: ${deletedUsers.length}`);
    console.log('');

    if (activeUsers.length > 0) {
      console.log('‚úÖ Danh s√°ch users ACTIVE (unique):');
      activeUsers.forEach((user, index) => {
        console.log(`   ${index + 1}. "${user.name}" (${user.email})`);
        console.log(`      - ID: ${user.id}`);
        console.log(`      - Role: ${user.role || 'undefined'}`);
        console.log(`      - Team: ${user.team_id || 'undefined'}`);
        console.log(`      - Status: ${user.status || 'undefined'}`);
        console.log('');
      });
    }

    if (deletedUsers.length > 0) {
      console.log('üóëÔ∏è Danh s√°ch users DELETED:');
      deletedUsers.forEach((user, index) => {
        console.log(`   ${index + 1}. "${user.name}" - ${user.deleted_reason || 'No reason'}`);
      });
      console.log('');
    }

    // 5. Ki·ªÉm tra duplicate trong users active
    console.log('5. üîç Ki·ªÉm tra duplicate trong users active...');
    const emailCounts = {};
    activeUsers.forEach(user => {
      const email = user.email || 'no-email';
      if (!email.startsWith('deleted_')) {
        emailCounts[email] = (emailCounts[email] || 0) + 1;
      }
    });

    const remainingDuplicates = Object.keys(emailCounts).filter(email => emailCounts[email] > 1);
    
    if (remainingDuplicates.length === 0) {
      console.log('‚úÖ HO√ÄN H·∫¢O! Kh√¥ng c√≤n duplicate users trong danh s√°ch active');
    } else {
      console.log(`‚ö†Ô∏è C√≤n ${remainingDuplicates.length} email b·ªã duplicate trong users active:`);
      remainingDuplicates.forEach(email => {
        console.log(`   - ${email}: ${emailCounts[email]} users`);
      });
    }

    console.log('');
    console.log('üéâ HO√ÄN TH√ÄNH ƒê√ÅNH D·∫§U DUPLICATE USERS!');
    console.log('üìã Users duplicate ƒë√£ ƒë∆∞·ª£c ·∫©n kh·ªèi h·ªá th·ªëng');
    console.log('‚úÖ Ch·ªâ c√≤n users unique trong danh s√°ch active');
    console.log('üåê Web app s·∫Ω ch·ªâ hi·ªÉn th·ªã users active');

    return {
      markedCount,
      errorCount,
      totalUsers: finalUsersData.data.length,
      activeUsers: activeUsers.length,
      deletedUsers: deletedUsers.length,
      remainingDuplicates: remainingDuplicates.length
    };

  } catch (error) {
    console.error('‚ùå L·ªói khi ƒë√°nh d·∫•u duplicate users:', error.message);
  }
}

// Ch·∫°y script
console.log('üö® SCRIPT ƒê√ÅNH D·∫§U 11 DUPLICATE USERS L√Ä DELETED');
console.log('üìã Thay v√¨ x√≥a th·∫≠t, s·∫Ω ƒë√°nh d·∫•u status = deleted');
console.log('‚úÖ Users active s·∫Ω unique, users deleted s·∫Ω ·∫©n');
console.log('‚è∞ B·∫Øt ƒë·∫ßu sau 2 gi√¢y...\n');

setTimeout(() => {
  markUsersAsDeleted().catch(console.error);
}, 2000);
