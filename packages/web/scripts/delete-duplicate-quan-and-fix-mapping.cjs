const fetch = require('node-fetch');

const API_BASE = 'https://api-adwc442mha-uc.a.run.app';

async function deleteDuplicateQuanAndFixMapping() {
  console.log('üóëÔ∏è X√ìA L√ä TI·∫æN QU√ÇN DUPLICATE V√Ä S·ª¨A MAPPING');
  console.log('============================================\n');

  try {
    // 1. T√¨m v√† x√≥a L√™ Ti·∫øn Qu√¢n duplicate (v·ª´a t·∫°o)
    console.log('1. üîç T√åM L√ä TI·∫æN QU√ÇN DUPLICATE:');
    console.log('=================================');
    
    const usersResponse = await fetch(`${API_BASE}/users`);
    const usersData = await usersResponse.json();
    const users = usersData.data.filter(user => user.status !== 'deleted');
    
    const quanUsers = users.filter(user => user.name.includes('Qu√¢n'));
    console.log(`üìä T√¨m th·∫•y ${quanUsers.length} user c√≥ t√™n ch·ª©a "Qu√¢n":`);
    
    quanUsers.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.name} (ID: ${user.id})`);
      console.log(`      - Email: ${user.email}`);
      console.log(`      - Team ID: ${user.team_id}`);
      console.log(`      - Created: ${user.created_at ? new Date(user.created_at._seconds * 1000).toLocaleString() : 'N/A'}`);
    });
    console.log('');

    // T√¨m user v·ª´a t·∫°o (c√≥ email quan.le@example.com)
    const duplicateQuan = quanUsers.find(user => user.email === 'quan.le@example.com');
    
    if (duplicateQuan) {
      console.log(`üóëÔ∏è X√≥a L√™ Ti·∫øn Qu√¢n duplicate: ${duplicateQuan.name} (ID: ${duplicateQuan.id})`);
      
      try {
        const deleteResponse = await fetch(`${API_BASE}/users/${duplicateQuan.id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            ...duplicateQuan,
            status: 'deleted',
            name: `[DELETED] ${duplicateQuan.name}`,
            deleted_at: new Date().toISOString(),
            deleted_reason: 'Duplicate user - kh√¥ng c·∫ßn thi·∫øt'
          })
        });

        const deleteResult = await deleteResponse.json();
        if (deleteResult.success) {
          console.log(`‚úÖ ƒê√£ x√≥a duplicate Qu√¢n`);
        } else {
          console.log(`‚ùå L·ªói x√≥a: ${deleteResult.error}`);
        }
      } catch (error) {
        console.log(`‚ùå L·ªói khi x√≥a: ${error.message}`);
      }
    } else {
      console.log('‚úÖ Kh√¥ng t√¨m th·∫•y duplicate Qu√¢n c·∫ßn x√≥a');
    }
    console.log('');

    // 2. X√≥a NH√ìM 5 kh√¥ng c·∫ßn thi·∫øt
    console.log('2. üóëÔ∏è X√ìA NH√ìM 5 KH√îNG C·∫¶N THI·∫æT:');
    console.log('=================================');
    
    const teamsResponse = await fetch(`${API_BASE}/teams`);
    const teamsData = await teamsResponse.json();
    const teams = teamsData.data;
    
    const team5 = teams.find(t => t.name === 'NH√ìM 5' && t.location === 'hanoi');
    
    if (team5) {
      console.log(`üóëÔ∏è X√≥a NH√ìM 5: ${team5.name} (ID: ${team5.id})`);
      
      try {
        const deleteTeamResponse = await fetch(`${API_BASE}/teams/${team5.id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            ...team5,
            name: `[DELETED] ${team5.name}`,
            active: false,
            deleted_at: new Date().toISOString()
          })
        });

        const deleteTeamResult = await deleteTeamResponse.json();
        if (deleteTeamResult.success) {
          console.log(`‚úÖ ƒê√£ x√≥a NH√ìM 5`);
        } else {
          console.log(`‚ùå L·ªói x√≥a team: ${deleteTeamResult.error}`);
        }
      } catch (error) {
        console.log(`‚ùå L·ªói khi x√≥a team: ${error.message}`);
      }
    } else {
      console.log('‚úÖ Kh√¥ng t√¨m th·∫•y NH√ìM 5 c·∫ßn x√≥a');
    }
    console.log('');

    // 3. Ki·ªÉm tra c·∫•u tr√∫c sau khi x√≥a
    console.log('3. ‚úÖ KI·ªÇM TRA C·∫§U TR√öC SAU KHI X√ìA:');
    console.log('===================================');
    
    const finalUsersResponse = await fetch(`${API_BASE}/users`);
    const finalUsersData = await finalUsersResponse.json();
    const finalUsers = finalUsersData.data.filter(user => user.status !== 'deleted');
    
    const teamLeaders = finalUsers.filter(user => user.role === 'team_leader');
    
    console.log(`üìä Team leaders c√≤n l·∫°i: ${teamLeaders.length}`);
    
    const hanoiLeaders = teamLeaders.filter(l => l.location === 'hanoi');
    const hcmLeaders = teamLeaders.filter(l => l.location === 'hcm');
    
    console.log('\nüè¢ H√Ä N·ªòI LEADERS:');
    hanoiLeaders.forEach((leader, index) => {
      console.log(`   ${index + 1}. ${leader.name} (Team: ${leader.team_id})`);
    });
    
    console.log('\nüè¢ H·ªí CH√ç MINH LEADERS:');
    hcmLeaders.forEach((leader, index) => {
      console.log(`   ${index + 1}. ${leader.name} (Team: ${leader.team_id})`);
    });

    // 4. Mapping theo file JSON chu·∫©n
    console.log('\n4. üéØ MAPPING THEO FILE JSON CHU·∫®N:');
    console.log('==================================');
    
    const correctMapping = {
      hanoi: {
        'NH√ìM 1': 'L∆∞∆°ng Vi·ªát Anh',
        'NH√ìM 2': 'Nguy·ªÖn Th·ªã Th·∫£o', 
        'NH√ìM 3': 'Tr·ªãnh Th·ªã B·ªën',
        'NH√ìM 4': 'L√™ Ti·∫øn Qu√¢n',     // Qu√¢n c√≥ s·∫µn
        'NH√ìM 5': 'Ph·∫°m Th·ªã H∆∞∆°ng',   // H∆∞∆°ng team 5
      },
      hcm: {
        'NH√ìM 1': 'Nguy·ªÖn Th·ªã Nga',
        'NH√ìM 2': 'Nguy·ªÖn Ng·ªçc Vi·ªát Khanh',
      }
    };

    console.log('‚úÖ MAPPING ƒê√öNG THEO FILE JSON:');
    console.log('üè¢ H√Ä N·ªòI:');
    Object.entries(correctMapping.hanoi).forEach(([team, leader]) => {
      const found = hanoiLeaders.find(l => l.name.includes(leader.split(' ')[0]));
      console.log(`   ${team} - ${leader}: ${found ? '‚úÖ C√≥' : '‚ùå Thi·∫øu'}`);
    });
    
    console.log('üè¢ H·ªí CH√ç MINH:');
    Object.entries(correctMapping.hcm).forEach(([team, leader]) => {
      const found = hcmLeaders.find(l => l.name.includes(leader.split(' ')[0]));
      console.log(`   ${team} - ${leader}: ${found ? '‚úÖ C√≥' : '‚ùå Thi·∫øu'}`);
    });

    console.log('\n‚úÖ HO√ÄN TH√ÄNH X√ìA DUPLICATE V√Ä CHU·∫®N B·ªä MAPPING!');
    console.log('üéØ B∆∞·ªõc ti·∫øp theo: C·∫≠p nh·∫≠t utility function theo c·∫•u tr√∫c chu·∫©n');

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
  }
}

deleteDuplicateQuanAndFixMapping().catch(console.error);
