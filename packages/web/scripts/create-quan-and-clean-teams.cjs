const fetch = require('node-fetch');

const API_BASE = 'https://api-adwc442mha-uc.a.run.app';

async function createQuanAndCleanTeams() {
  console.log('üîß T·∫†O L√ä TI·∫æN QU√ÇN V√Ä D·ªåN D·∫∏P TEAMS');
  console.log('====================================\n');

  try {
    // 1. T·∫°o user L√™ Ti·∫øn Qu√¢n
    console.log('1. üë®‚Äçüíº T·∫†O USER L√ä TI·∫æN QU√ÇN:');
    console.log('=============================');
    
    const quanData = {
      name: 'L√™ Ti·∫øn Qu√¢n',
      email: 'quan.le@example.com',
      role: 'team_leader',
      team_id: '5',
      location: 'hanoi',
      department_type: 'retail',
      status: 'active',
      phone: '+84987654321',
      address: 'H√† N·ªôi, Vi·ªát Nam'
    };

    console.log('üìù T·∫°o user L√™ Ti·∫øn Qu√¢n...');
    try {
      const createUserResponse = await fetch(`${API_BASE}/users`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(quanData)
      });

      const createUserResult = await createUserResponse.json();
      if (createUserResult.success) {
        console.log(`‚úÖ ƒê√£ t·∫°o user: ${quanData.name} (ID: ${createUserResult.data.id})`);
      } else {
        console.log(`‚ùå L·ªói t·∫°o user: ${createUserResult.error}`);
      }
    } catch (error) {
      console.log(`‚ùå L·ªói khi t·∫°o user: ${error.message}`);
    }
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    console.log('');

    // 2. L·∫•y danh s√°ch teams ƒë·ªÉ x√≥a duplicate
    console.log('2. üóëÔ∏è X√ìA TEAMS DUPLICATE:');
    console.log('==========================');
    
    const teamsResponse = await fetch(`${API_BASE}/teams`);
    const teamsData = await teamsResponse.json();
    const teams = teamsData.data;

    // Danh s√°ch teams duplicate c·∫ßn x√≥a (gi·ªØ l·∫°i team ƒë·∫ßu ti√™n)
    const teamsToDelete = [
      's1rkdVvo11xUCyytFqki', // NH√ìM 4 duplicate (H√† N·ªôi)
      'mLrqhMcKaZ1OUV4fTksW', // NH√ìM 2 duplicate (HCM)
      'xNiwgcK8snNg1m047vmD', // NH√ìM 1 duplicate (HCM)
      'w9qvRm7gDUNlYpNU1rZE', // NH√ìM 3 duplicate (H√† N·ªôi)
    ];

    console.log('üóëÔ∏è X√≥a teams duplicate...');
    for (const teamId of teamsToDelete) {
      const team = teams.find(t => t.id === teamId);
      if (team) {
        console.log(`üóëÔ∏è X√≥a team: ${team.name} (${team.location}) - ID: ${teamId}`);
        
        try {
          // V√¨ kh√¥ng c√≥ DELETE endpoint, ta s·∫Ω ƒë√°nh d·∫•u team l√† inactive
          const updateResponse = await fetch(`${API_BASE}/teams/${teamId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              ...team,
              name: `[DELETED] ${team.name}`,
              active: false,
              deleted_at: new Date().toISOString()
            })
          });

          const updateResult = await updateResponse.json();
          if (updateResult.success) {
            console.log(`   ‚úÖ ƒê√£ ƒë√°nh d·∫•u x√≥a`);
          } else {
            console.log(`   ‚ùå L·ªói: ${updateResult.error || 'Unknown error'}`);
          }
        } catch (error) {
          console.log(`   ‚ùå L·ªói khi x√≥a: ${error.message}`);
        }
        
        await new Promise(resolve => setTimeout(resolve, 500));
      }
    }
    console.log('');

    // 3. T·∫°o team cho L√™ Ti·∫øn Qu√¢n n·∫øu ch∆∞a c√≥
    console.log('3. üè¢ T·∫†O TEAM CHO L√ä TI·∫æN QU√ÇN:');
    console.log('===============================');
    
    const existingTeam5 = teams.find(t => 
      t.name.includes('NH√ìM 5') && t.location === 'hanoi'
    );
    
    if (!existingTeam5) {
      console.log('üìù T·∫°o NH√ìM 5 cho L√™ Ti·∫øn Qu√¢n...');
      
      const team5Data = {
        name: 'NH√ìM 5',
        location: 'hanoi',
        department_type: 'retail',
        leader_id: null, // S·∫Ω c·∫≠p nh·∫≠t sau khi c√≥ ID c·ªßa Qu√¢n
        active: true,
        description: 'Nh√≥m 5 - L√™ Ti·∫øn Qu√¢n'
      };

      try {
        const createTeamResponse = await fetch(`${API_BASE}/teams`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(team5Data)
        });

        const createTeamResult = await createTeamResponse.json();
        if (createTeamResult.success) {
          console.log(`‚úÖ ƒê√£ t·∫°o team: ${team5Data.name} (ID: ${createTeamResult.data.id})`);
        } else {
          console.log(`‚ùå L·ªói t·∫°o team: ${createTeamResult.error}`);
        }
      } catch (error) {
        console.log(`‚ùå L·ªói khi t·∫°o team: ${error.message}`);
      }
    } else {
      console.log('‚úÖ NH√ìM 5 ƒë√£ t·ªìn t·∫°i');
    }
    console.log('');

    // 4. Ki·ªÉm tra k·∫øt qu·∫£
    console.log('4. ‚úÖ KI·ªÇM TRA K·∫æT QU·∫¢:');
    console.log('=======================');
    
    const [finalUsersResponse, finalTeamsResponse] = await Promise.all([
      fetch(`${API_BASE}/users`),
      fetch(`${API_BASE}/teams`)
    ]);

    const finalUsersData = await finalUsersResponse.json();
    const finalTeamsData = await finalTeamsResponse.json();

    const finalUsers = finalUsersData.data.filter(user => user.status !== 'deleted');
    const finalTeams = finalTeamsData.data.filter(team => team.active !== false);

    // Ki·ªÉm tra L√™ Ti·∫øn Qu√¢n
    const quan = finalUsers.find(user => user.name.includes('Qu√¢n'));
    console.log(`üë®‚Äçüíº L√™ Ti·∫øn Qu√¢n: ${quan ? '‚úÖ C√≥' : '‚ùå Kh√¥ng c√≥'}`);
    if (quan) {
      console.log(`   - ID: ${quan.id}`);
      console.log(`   - Team ID: ${quan.team_id}`);
    }

    // Ki·ªÉm tra c·∫•u tr√∫c teams
    const hanoiTeams = finalTeams.filter(t => t.location === 'hanoi');
    const hcmTeams = finalTeams.filter(t => t.location === 'hcm');
    
    console.log(`\nüè¢ H√Ä N·ªòI TEAMS: ${hanoiTeams.length}`);
    hanoiTeams.forEach((team, index) => {
      console.log(`   ${index + 1}. ${team.name}`);
    });
    
    console.log(`\nüè¢ H·ªí CH√ç MINH TEAMS: ${hcmTeams.length}`);
    hcmTeams.forEach((team, index) => {
      console.log(`   ${index + 1}. ${team.name}`);
    });

    console.log('\nüìä TH·ªêNG K√ä:');
    console.log(`üî¢ T·ªïng users: ${finalUsers.length}`);
    console.log(`üî¢ T·ªïng teams active: ${finalTeams.length}`);
    console.log(`üë®‚Äçüíº Team leaders: ${finalUsers.filter(u => u.role === 'team_leader').length}`);

    console.log('\n‚úÖ HO√ÄN TH√ÄNH T·∫†O QU√ÇN V√Ä D·ªåN D·∫∏P TEAMS!');

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
  }
}

createQuanAndCleanTeams().catch(console.error);
