#!/usr/bin/env node

/**
 * Script ƒë·ªÉ debug v·∫•n ƒë·ªÅ session persistence
 * T·∫°i sao refresh trang l·∫°i tr·ªü v·ªÅ Kh·ªïng ƒê·ª©c M·∫°nh thay v√¨ Ph·∫°m Th·ªã H∆∞∆°ng
 */

console.log('üîç DEBUGGING SESSION PERSISTENCE ISSUE');
console.log('='.repeat(60));

console.log('\nüìã V·∫§N ƒê·ªÄ:');
console.log('- Login v·ªõi Ph·∫°m Th·ªã H∆∞∆°ng th√†nh c√¥ng');
console.log('- Refresh trang ‚Üí tr·ªü v·ªÅ Kh·ªïng ƒê·ª©c M·∫°nh');
console.log('- Session kh√¥ng persist ƒë√∫ng user');

console.log('\nüîç NGUY√äN NH√ÇN C√ì TH·ªÇ:');
console.log('1. localStorage ƒëang cache user c≈© (Kh·ªïng ƒê·ª©c M·∫°nh)');
console.log('2. AuthContext load user t·ª´ localStorage thay v√¨ login session');
console.log('3. Conflict gi·ªØa Firebase data v√† API data');
console.log('4. Login kh√¥ng l∆∞u ƒë√∫ng user v√†o localStorage');
console.log('5. Mock data override API data');

console.log('\nüß™ DEBUG SCRIPT CHO BROWSER CONSOLE:');
console.log('-'.repeat(50));

const debugScript = `
console.log('üîç DEBUGGING SESSION PERSISTENCE');
console.log('='.repeat(50));

// 1. Ki·ªÉm tra localStorage hi·ªán t·∫°i
console.log('\\n1. üì¶ LOCALSTORAGE HI·ªÜN T·∫†I:');
console.log('currentUser:', localStorage.getItem('currentUser'));
console.log('authToken:', localStorage.getItem('authToken'));
console.log('loginType:', localStorage.getItem('loginType'));

// Parse currentUser ƒë·ªÉ xem chi ti·∫øt
try {
  const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
  console.log('Current User Details:', {
    id: currentUser.id,
    name: currentUser.name,
    email: currentUser.email,
    role: currentUser.role,
    team_id: currentUser.team_id
  });
} catch (e) {
  console.log('No valid currentUser in localStorage');
}

// 2. Ki·ªÉm tra t·∫•t c·∫£ localStorage keys
console.log('\\n2. üóÇÔ∏è T·∫§T C·∫¢ LOCALSTORAGE KEYS:');
Object.keys(localStorage).forEach(key => {
  console.log(\`\${key}: \${localStorage.getItem(key)?.substring(0, 100)}...\`);
});

// 3. Clear t·∫•t c·∫£ auth data
console.log('\\n3. üßπ CLEARING ALL AUTH DATA:');
localStorage.removeItem('currentUser');
localStorage.removeItem('authToken');
localStorage.removeItem('loginType');

// Clear Firebase data
localStorage.removeItem('firebaseConfig');
localStorage.removeItem('firebase_initialized');

// Clear cached data
localStorage.removeItem('rawTasks');
localStorage.removeItem('tasks');
localStorage.removeItem('filteredTasks');
localStorage.removeItem('users');
localStorage.removeItem('teams');

// Clear auto-sync data
Object.keys(localStorage).forEach(key => {
  if (key.startsWith('user_tasks_') || key.startsWith('auto_sync_')) {
    localStorage.removeItem(key);
    console.log('Removed:', key);
  }
});

console.log('‚úÖ Cleared all auth and cached data');

// 4. Force reload ƒë·ªÉ test
console.log('\\n4. üîÑ FORCE RELOAD TEST:');
console.log('Reloading page in 3 seconds...');
setTimeout(() => {
  window.location.reload();
}, 3000);
`;

console.log(debugScript);

console.log('\nüîß MANUAL FIX STEPS:');
console.log('-'.repeat(50));
console.log('1. M·ªü browser: http://localhost:8088');
console.log('2. M·ªü DevTools Console (F12)');
console.log('3. Copy v√† paste script ·ªü tr√™n');
console.log('4. Ch·ªù page reload t·ª± ƒë·ªông');
console.log('5. Login l·∫°i v·ªõi Ph·∫°m Th·ªã H∆∞∆°ng:');
console.log('   - Email: huong.pham@example.com');
console.log('   - Password: haininh1');
console.log('6. Test refresh page nhi·ªÅu l·∫ßn');

console.log('\nüéØ EXPECTED BEHAVIOR AFTER FIX:');
console.log('-'.repeat(50));
console.log('‚úÖ Login v·ªõi Ph·∫°m Th·ªã H∆∞∆°ng ‚Üí localStorage l∆∞u ƒë√∫ng user');
console.log('‚úÖ Refresh page ‚Üí v·∫´n l√† Ph·∫°m Th·ªã H∆∞∆°ng');
console.log('‚úÖ Kh√¥ng b·ªã revert v·ªÅ Kh·ªïng ƒê·ª©c M·∫°nh');
console.log('‚úÖ Session persistence ho·∫°t ƒë·ªông ƒë√∫ng');

console.log('\nüîç ADDITIONAL DEBUG SCRIPT:');
console.log('-'.repeat(50));

const additionalDebugScript = `
// Script ƒë·ªÉ monitor localStorage changes
const originalSetItem = localStorage.setItem;
localStorage.setItem = function(key, value) {
  console.log('üìù localStorage.setItem:', key, value?.substring(0, 100));
  return originalSetItem.apply(this, arguments);
};

const originalGetItem = localStorage.getItem;
localStorage.getItem = function(key) {
  const value = originalGetItem.apply(this, arguments);
  if (key === 'currentUser' || key === 'authToken') {
    console.log('üìñ localStorage.getItem:', key, value?.substring(0, 100));
  }
  return value;
};

console.log('‚úÖ localStorage monitoring enabled');
console.log('Now login and watch the console for localStorage changes');
`;

console.log(additionalDebugScript);

console.log('\nüìä API DATA VERIFICATION:');
console.log('-'.repeat(50));
console.log('Verify API has correct data:');
console.log('curl -s "http://localhost:3003/users" | jq \'.data[] | select(.name | contains("Ph·∫°m Th·ªã H∆∞∆°ng"))\'');
console.log('curl -s "http://localhost:3003/auth/login" -X POST -H "Content-Type: application/json" -d \'{"email":"huong.pham@example.com","password":"haininh1"}\'');

console.log('\n‚úÖ DEBUG SCRIPT READY!');
console.log('Copy the scripts above and run them in browser console.');
