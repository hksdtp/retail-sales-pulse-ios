const fetch = require('node-fetch');

const API_BASE = 'https://us-central1-appqlgd.cloudfunctions.net/api';

async function testUIImprovements() {
  try {
    console.log('üé® Ki·ªÉm tra c·∫£i ti·∫øn giao di·ªán...');
    
    // L·∫•y t·∫•t c·∫£ tasks ƒë·ªÉ ki·ªÉm tra
    const response = await fetch(`${API_BASE}/tasks`);
    const result = await response.json();
    
    if (!result.success) {
      console.error('‚ùå L·ªói khi l·∫•y danh s√°ch tasks:', result.error);
      return;
    }
    
    const tasks = result.data || [];
    console.log(`üìã T√¨m th·∫•y ${tasks.length} tasks ƒë·ªÉ test UI`);
    
    console.log('\nüéØ Ki·ªÉm tra mapping icon cho tr·∫°ng th√°i:');
    console.log('='.repeat(50));
    
    const statusIconMapping = {
      'todo': 'Circle (‚≠ï)',
      'in-progress': 'Play (‚ñ∂Ô∏è)',
      'on-hold': 'Pause (‚è∏Ô∏è)',
      'completed': 'CheckCircle (‚úÖ)',
    };
    
    const priorityIconMapping = {
      'high': 'Zap (‚ö°)',
      'normal': 'AlertCircle (‚ö†Ô∏è)',
      'low': 'Circle (‚≠ï)',
    };
    
    const statusCounts = {};
    const priorityCounts = {};
    
    tasks.forEach(task => {
      statusCounts[task.status] = (statusCounts[task.status] || 0) + 1;
      priorityCounts[task.priority] = (priorityCounts[task.priority] || 0) + 1;
    });
    
    console.log('üìä Ph√¢n b·ªë tr·∫°ng th√°i v√† icon t∆∞∆°ng ·ª©ng:');
    Object.entries(statusCounts).forEach(([status, count]) => {
      const icon = statusIconMapping[status] || 'Unknown';
      console.log(`  ${status}: ${count} tasks ‚Üí ${icon}`);
    });
    
    console.log('\nüìä Ph√¢n b·ªë ∆∞u ti√™n v√† icon t∆∞∆°ng ·ª©ng:');
    Object.entries(priorityCounts).forEach(([priority, count]) => {
      const icon = priorityIconMapping[priority] || 'Unknown';
      console.log(`  ${priority}: ${count} tasks ‚Üí ${icon}`);
    });
    
    console.log('\nüé® C·∫£i ti·∫øn giao di·ªán ƒë√£ √°p d·ª•ng:');
    console.log('='.repeat(50));
    console.log('‚úÖ B·ªè avatar trong c·ªôt "Ng∆∞·ªùi l√†m", ch·ªâ hi·ªÉn th·ªã t√™n');
    console.log('‚úÖ Thay text tr·∫°ng th√°i b·∫±ng icon:');
    console.log('   - Ch∆∞a b·∫Øt ƒë·∫ßu: ‚≠ï Circle');
    console.log('   - ƒêang th·ª±c hi·ªán: ‚ñ∂Ô∏è Play');
    console.log('   - T·∫°m ho√£n: ‚è∏Ô∏è Pause');
    console.log('   - Ho√†n th√†nh: ‚úÖ CheckCircle');
    console.log('‚úÖ Thay text ∆∞u ti√™n b·∫±ng icon:');
    console.log('   - Cao: ‚ö° Zap');
    console.log('   - B√¨nh th∆∞·ªùng: ‚ö†Ô∏è AlertCircle');
    console.log('   - Th·∫•p: ‚≠ï Circle');
    console.log('‚úÖ Ti·∫øt ki·ªám di·ªán t√≠ch hi·ªÉn th·ªã');
    console.log('‚úÖ Tooltip v·∫´n hi·ªÉn th·ªã text ƒë·ªÉ ng∆∞·ªùi d√πng hi·ªÉu');
    
    console.log('\nüîß H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:');
    console.log('='.repeat(50));
    console.log('‚Ä¢ Hover v√†o icon ƒë·ªÉ xem tooltip v·ªõi text m√¥ t·∫£');
    console.log('‚Ä¢ Click v√†o icon tr·∫°ng th√°i ƒë·ªÉ chuy·ªÉn tr·∫°ng th√°i ti·∫øp theo');
    console.log('‚Ä¢ Click v√†o icon ∆∞u ti√™n ƒë·ªÉ chuy·ªÉn m·ª©c ∆∞u ti√™n ti·∫øp theo');
    console.log('‚Ä¢ C·ªôt "Ng∆∞·ªùi l√†m" gi·ªù ch·ªâ hi·ªÉn th·ªã t√™n, kh√¥ng c√≥ avatar');
    
    console.log('\n‚ú® K·∫øt qu·∫£: Giao di·ªán g·ªçn g√†ng h∆°n, ti·∫øt ki·ªám di·ªán t√≠ch!');
    
  } catch (error) {
    console.error('‚ùå L·ªói khi test UI improvements:', error);
  }
}

// Ch·∫°y script
testUIImprovements();
