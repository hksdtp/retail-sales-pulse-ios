const fetch = require('node-fetch');

const API_BASE = 'https://api-adwc442mha-uc.a.run.app';

async function analyzeTeamStructure() {
  console.log('üîç PH√ÇN T√çCH C·∫§U TR√öC TEAMS');
  console.log('==========================\n');

  try {
    // 1. L·∫•y d·ªØ li·ªáu
    const [usersResponse, teamsResponse] = await Promise.all([
      fetch(`${API_BASE}/users`),
      fetch(`${API_BASE}/teams`)
    ]);

    const usersData = await usersResponse.json();
    const teamsData = await teamsResponse.json();

    const users = usersData.data.filter(user => user.status !== 'deleted');
    const teams = teamsData.data;

    console.log(`‚úÖ Users active: ${users.length}`);
    console.log(`‚úÖ Teams: ${teams.length}`);
    console.log('');

    // 2. Ph√¢n t√≠ch team leaders
    console.log('2. üë®‚Äçüíº PH√ÇN T√çCH TEAM LEADERS:');
    console.log('==============================');
    
    const teamLeaders = users.filter(user => user.role === 'team_leader');
    teamLeaders.forEach(leader => {
      console.log(`üë®‚Äçüíº ${leader.name}`);
      console.log(`   - ID: ${leader.id}`);
      console.log(`   - Email: ${leader.email}`);
      console.log(`   - Team ID: ${leader.team_id}`);
      console.log(`   - Location: ${leader.location}`);
      console.log('');
    });

    // 3. Ph√¢n t√≠ch teams theo location
    console.log('3. üè¢ PH√ÇN T√çCH TEAMS THEO LOCATION:');
    console.log('===================================');
    
    const hanoiTeams = teams.filter(t => t.location === 'hanoi');
    const hcmTeams = teams.filter(t => t.location === 'hcm');
    
    console.log('üè¢ H√Ä N·ªòI TEAMS:');
    hanoiTeams.forEach(team => {
      console.log(`   - ${team.name} (ID: ${team.id})`);
      console.log(`     Leader ID: ${team.leader_id}`);
    });
    
    console.log('\nüè¢ H·ªí CH√ç MINH TEAMS:');
    hcmTeams.forEach(team => {
      console.log(`   - ${team.name} (ID: ${team.id})`);
      console.log(`     Leader ID: ${team.leader_id}`);
    });

    // 4. Mapping ƒë√∫ng theo y√™u c·∫ßu
    console.log('\n4. üéØ MAPPING ƒê√öNG THEO Y√äU C·∫¶U:');
    console.log('================================');
    
    console.log('üìã Theo memory c·ªßa user:');
    console.log('- Teams 5 v√† 6 should be reassigned to Teams 1 and 2 respectively for Ho Chi Minh location');
    console.log('- Thao should have her own Team 2');
    console.log('');

    // Mapping ƒë√∫ng
    const correctMapping = {
      // H√Ä N·ªòI
      hanoi: {
        'NH√ìM 1': 'L∆∞∆°ng Vi·ªát Anh',      // team_id: 1
        'NH√ìM 2': 'Nguy·ªÖn Th·ªã Th·∫£o',     // team_id: 2 - TH·∫¢O
        'NH√ìM 3': 'Tr·ªãnh Th·ªã B·ªën',       // team_id: 3
        'NH√ìM 4': 'Ph·∫°m Th·ªã H∆∞∆°ng',      // team_id: 4
      },
      // H·ªí CH√ç MINH (Teams 5,6 -> 1,2)
      hcm: {
        'NH√ìM 1': 'Nguy·ªÖn Th·ªã Nga',      // team_id: 5 -> Team 1 HCM
        'NH√ìM 2': 'Nguy·ªÖn Ng·ªçc Vi·ªát Khanh', // team_id: 6 -> Team 2 HCM
      }
    };

    console.log('‚úÖ MAPPING ƒê√öNG:');
    console.log('üè¢ H√Ä N·ªòI:');
    Object.entries(correctMapping.hanoi).forEach(([team, leader]) => {
      console.log(`   ${team} -> ${leader}`);
    });
    
    console.log('üè¢ H·ªí CH√ç MINH:');
    Object.entries(correctMapping.hcm).forEach(([team, leader]) => {
      console.log(`   ${team} -> ${leader}`);
    });

    // 5. Ki·ªÉm tra teams hi·ªán t·∫°i vs mapping ƒë√∫ng
    console.log('\n5. üîç KI·ªÇM TRA TEAMS HI·ªÜN T·∫†I:');
    console.log('==============================');
    
    teams.forEach(team => {
      console.log(`üìã ${team.name} (${team.location.toUpperCase()})`);
      
      let expectedLeader = null;
      if (team.location === 'hanoi') {
        if (team.name.includes('NH√ìM 1')) expectedLeader = 'L∆∞∆°ng Vi·ªát Anh';
        else if (team.name.includes('NH√ìM 2')) expectedLeader = 'Nguy·ªÖn Th·ªã Th·∫£o';
        else if (team.name.includes('NH√ìM 3')) expectedLeader = 'Tr·ªãnh Th·ªã B·ªën';
        else if (team.name.includes('NH√ìM 4')) expectedLeader = 'Ph·∫°m Th·ªã H∆∞∆°ng';
      } else if (team.location === 'hcm') {
        if (team.name.includes('NH√ìM 1') || team.name.includes('NH√ìM 5')) expectedLeader = 'Nguy·ªÖn Th·ªã Nga';
        else if (team.name.includes('NH√ìM 2') || team.name.includes('NH√ìM 6')) expectedLeader = 'Nguy·ªÖn Ng·ªçc Vi·ªát Khanh';
      }
      
      console.log(`   N√™n c√≥ leader: ${expectedLeader || 'Kh√¥ng x√°c ƒë·ªãnh'}`);
      
      // T√¨m leader th·ª±c t·∫ø
      const actualLeader = users.find(u => u.id === team.leader_id);
      if (actualLeader) {
        console.log(`   Leader hi·ªán t·∫°i: ${actualLeader.name}`);
        console.log(`   ‚úÖ ${actualLeader.name === expectedLeader ? 'ƒê√öNG' : '‚ùå SAI'}`);
      } else {
        console.log(`   Leader hi·ªán t·∫°i: Kh√¥ng c√≥`);
        console.log(`   ‚ùå SAI`);
      }
      console.log('');
    });

    // 6. ƒê·ªÅ xu·∫•t s·ª≠a
    console.log('6. üí° ƒê·ªÄ XU·∫§T S·ª¨A UTILITY FUNCTION:');
    console.log('===================================');
    console.log('C·∫ßn c·∫≠p nh·∫≠t logic trong teamUtils.ts ƒë·ªÉ:');
    console.log('1. Ph√¢n bi·ªát Th·∫£o (team_id: 2, H√† N·ªôi) vs Vi·ªát Khanh (team_id: 2, H√† N·ªôi)');
    console.log('2. Mapping Teams 5,6 (HCM) th√†nh Teams 1,2 (HCM)');
    console.log('3. ∆Øu ti√™n theo t√™n team c·ª• th·ªÉ (VD: "NH√ìM 2 - TH·∫¢O" -> Th·∫£o)');

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
  }
}

analyzeTeamStructure().catch(console.error);
