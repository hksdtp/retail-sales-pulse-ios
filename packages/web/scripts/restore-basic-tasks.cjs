const fetch = require('node-fetch');

const API_BASE = 'https://api-adwc442mha-uc.a.run.app';

// D·ªØ li·ªáu tasks c∆° b·∫£n ƒë·ªÉ kh√¥i ph·ª•c
const basicTasks = [
  {
    title: 'B√°o c√°o doanh thu th√°ng hi·ªán t·∫°i',
    description: 'T·ªïng h·ª£p v√† ph√¢n t√≠ch doanh thu b√°n l·∫ª th√°ng hi·ªán t·∫°i',
    type: 'report',
    status: 'todo',
    priority: 'high',
    date: new Date().toISOString().split('T')[0],
    time: '09:00',
    progress: 0,
    assignedTo: 'Ve7sGRnMoRvT1E0VL5Ds', // Kh·ªïng ƒê·ª©c M·∫°nh
    user_id: 'Ve7sGRnMoRvT1E0VL5Ds',
    user_name: 'Kh·ªïng ƒê·ª©c M·∫°nh',
    team_id: '0',
    teamId: '0',
    location: 'hanoi',
    department_type: 'retail',
    isNew: false,
    isShared: false,
    isSharedWithTeam: false,
    extraAssignees: ''
  },
  {
    title: 'Li√™n h·ªá kh√°ch h√†ng ti·ªÅm nƒÉng',
    description: 'G·ªçi ƒëi·ªán v√† t∆∞ v·∫•n cho kh√°ch h√†ng m·ªõi v·ªÅ s·∫£n ph·∫©m',
    type: 'customer_new',
    status: 'in-progress',
    priority: 'high',
    date: new Date().toISOString().split('T')[0],
    time: '10:30',
    progress: 30,
    assignedTo: 'Ue4vzSj1KDg4vZyXwlHJ', // L∆∞∆°ng Vi·ªát Anh
    user_id: 'Ve7sGRnMoRvT1E0VL5Ds', // Kh·ªïng ƒê·ª©c M·∫°nh t·∫°o
    user_name: 'Kh·ªïng ƒê·ª©c M·∫°nh',
    team_id: '1',
    teamId: '1',
    location: 'hanoi',
    department_type: 'retail',
    isNew: false,
    isShared: false,
    isSharedWithTeam: false,
    extraAssignees: ''
  },
  {
    title: 'Chu·∫©n b·ªã b√°o gi√° d·ª± √°n ABC',
    description: 'L·∫≠p b√°o gi√° chi ti·∫øt cho d·ª± √°n ABC c·ªßa kh√°ch h√†ng',
    type: 'quote_new',
    status: 'todo',
    priority: 'normal',
    date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0], // Ng√†y mai
    time: '14:00',
    progress: 0,
    assignedTo: 'abtSSmK0p0oeOyy5YWGZ', // L√™ Kh√°nh Duy
    user_id: 'Ue4vzSj1KDg4vZyXwlHJ', // L∆∞∆°ng Vi·ªát Anh t·∫°o
    user_name: 'L∆∞∆°ng Vi·ªát Anh',
    team_id: '1',
    teamId: '1',
    location: 'hanoi',
    department_type: 'retail',
    isNew: false,
    isShared: false,
    isSharedWithTeam: false,
    extraAssignees: ''
  },
  {
    title: 'H·ªçp nh√≥m tu·∫ßn',
    description: 'H·ªçp t·ªïng k·∫øt c√¥ng vi·ªác tu·∫ßn v√† l√™n k·∫ø ho·∫°ch tu·∫ßn t·ªõi',
    type: 'meeting',
    status: 'completed',
    priority: 'normal',
    date: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString().split('T')[0], // H√¥m qua
    time: '16:00',
    progress: 100,
    assignedTo: 'MO7N4Trk6mASlHpIcjME', // Nguy·ªÖn Th·ªã Th·∫£o
    user_id: 'MO7N4Trk6mASlHpIcjME',
    user_name: 'Nguy·ªÖn Th·ªã Th·∫£o',
    team_id: '2',
    teamId: '2',
    location: 'hanoi',
    department_type: 'retail',
    isNew: false,
    isShared: false,
    isSharedWithTeam: true, // Shared v·ªõi team
    extraAssignees: ''
  },
  {
    title: 'ChƒÉm s√≥c kh√°ch h√†ng VIP',
    description: 'Follow up v√† chƒÉm s√≥c kh√°ch h√†ng VIP trong th√°ng',
    type: 'customer_care',
    status: 'in-progress',
    priority: 'high',
    date: new Date().toISOString().split('T')[0],
    time: '11:00',
    progress: 60,
    assignedTo: '76ui8I1vw3wiJLyvwFjq', // Nguy·ªÖn M·∫°nh Linh
    user_id: 'MO7N4Trk6mASlHpIcjME', // Nguy·ªÖn Th·ªã Th·∫£o t·∫°o
    user_name: 'Nguy·ªÖn Th·ªã Th·∫£o',
    team_id: '2',
    teamId: '2',
    location: 'hanoi',
    department_type: 'retail',
    isNew: false,
    isShared: false,
    isSharedWithTeam: false,
    extraAssignees: ''
  }
];

async function restoreBasicTasks() {
  console.log('üîÑ B·∫ÆT ƒê·∫¶U KH√îI PH·ª§C D·ªÆ LI·ªÜU TASKS C∆† B·∫¢N...\n');

  try {
    // Ki·ªÉm tra API health
    console.log('1. Ki·ªÉm tra API health...');
    const healthResponse = await fetch(`${API_BASE}/health`);
    const healthData = await healthResponse.json();
    console.log('‚úÖ API Status:', healthData.status);
    console.log('');

    // Ki·ªÉm tra tasks hi·ªán t·∫°i
    console.log('2. Ki·ªÉm tra tasks hi·ªán t·∫°i...');
    const currentTasksResponse = await fetch(`${API_BASE}/tasks`);
    const currentTasksData = await currentTasksResponse.json();
    console.log(`üìä Tasks hi·ªán t·∫°i: ${currentTasksData.count} tasks`);
    console.log('');

    // T·∫°o tasks c∆° b·∫£n
    console.log('3. T·∫°o tasks c∆° b·∫£n...');
    let createdCount = 0;
    let errorCount = 0;

    for (let i = 0; i < basicTasks.length; i++) {
      const task = basicTasks[i];
      console.log(`üìù ƒêang t·∫°o task ${i + 1}/${basicTasks.length}: ${task.title}`);

      try {
        const response = await fetch(`${API_BASE}/tasks`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(task),
        });

        const result = await response.json();

        if (result.success) {
          createdCount++;
          console.log(`   ‚úÖ ƒê√£ t·∫°o: ${task.title}`);
        } else {
          errorCount++;
          console.log(`   ‚ùå L·ªói t·∫°o: ${task.title} - ${result.error}`);
        }

        // Delay ƒë·ªÉ tr√°nh rate limit
        await new Promise((resolve) => setTimeout(resolve, 500));
      } catch (error) {
        errorCount++;
        console.log(`   ‚ùå L·ªói khi t·∫°o task: ${task.title} - ${error.message}`);
      }
    }

    console.log('');

    // Ki·ªÉm tra k·∫øt qu·∫£
    console.log('4. Ki·ªÉm tra k·∫øt qu·∫£...');
    const finalTasksResponse = await fetch(`${API_BASE}/tasks`);
    const finalTasksData = await finalTasksResponse.json();

    console.log('üìä K·∫æT QU·∫¢ KH√îI PH·ª§C:');
    console.log(`‚úÖ Tasks ƒë√£ t·∫°o th√†nh c√¥ng: ${createdCount}`);
    console.log(`‚ùå L·ªói: ${errorCount}`);
    console.log(`üìã T·ªïng tasks hi·ªán t·∫°i: ${finalTasksData.count}`);
    console.log('');

    if (finalTasksData.count > 0) {
      console.log('‚úÖ Danh s√°ch tasks ƒë√£ kh√¥i ph·ª•c:');
      finalTasksData.data.forEach((task, index) => {
        console.log(`   ${index + 1}. ${task.title} (${task.status}) - ${task.user_name}`);
      });
    }

    console.log('');
    console.log('üéâ HO√ÄN TH√ÄNH KH√îI PH·ª§C D·ªÆ LI·ªÜU TASKS C∆† B·∫¢N!');
    console.log('üåê D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u tr√™n server');
    console.log('üîó Ki·ªÉm tra t·∫°i web app: http://localhost:8088');

  } catch (error) {
    console.error('‚ùå L·ªói khi kh√¥i ph·ª•c d·ªØ li·ªáu:', error.message);
  }
}

// Ch·∫°y script
console.log('üö® SCRIPT KH√îI PH·ª§C D·ªÆ LI·ªÜU TASKS C∆† B·∫¢N');
console.log('üìã S·∫Ω t·∫°o 5 tasks m·∫´u v·ªõi d·ªØ li·ªáu th·∫≠t');
console.log('‚è∞ B·∫Øt ƒë·∫ßu sau 2 gi√¢y...\n');

setTimeout(() => {
  restoreBasicTasks().catch(console.error);
}, 2000);
