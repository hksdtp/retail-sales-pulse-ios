const fetch = require('node-fetch');

const API_BASE = 'https://api-adwc442mha-uc.a.run.app';

async function debugTeamsData() {
  console.log('üîç DEBUG TEAMS DATA TRONG DATABASE');
  console.log('==================================\n');

  try {
    // 1. L·∫•y teams data
    console.log('1. üìã TEAMS DATA:');
    console.log('=================');
    
    const teamsResponse = await fetch(`${API_BASE}/teams`);
    const teamsData = await teamsResponse.json();
    const teams = teamsData.data;
    
    console.log(`‚úÖ T·ªïng teams: ${teams.length}`);
    console.log('');
    
    teams.forEach((team, index) => {
      console.log(`Team ${index + 1}:`);
      console.log(`   - ID: ${team.id}`);
      console.log(`   - Name: "${team.name}"`);
      console.log(`   - Location: ${team.location}`);
      console.log(`   - Active: ${team.active}`);
      console.log(`   - Leader ID: ${team.leader_id}`);
      console.log('');
    });

    // 2. L·∫•y users data
    console.log('2. üë• USERS DATA (TEAM LEADERS):');
    console.log('================================');
    
    const usersResponse = await fetch(`${API_BASE}/users`);
    const usersData = await usersResponse.json();
    const users = usersData.data.filter(user => user.status !== 'deleted');
    
    const teamLeaders = users.filter(user => user.role === 'team_leader');
    console.log(`‚úÖ Team leaders: ${teamLeaders.length}`);
    console.log('');
    
    teamLeaders.forEach((leader, index) => {
      console.log(`Leader ${index + 1}:`);
      console.log(`   - ID: ${leader.id}`);
      console.log(`   - Name: "${leader.name}"`);
      console.log(`   - Team ID: ${leader.team_id}`);
      console.log(`   - Location: ${leader.location}`);
      console.log(`   - Email: ${leader.email}`);
      console.log('');
    });

    // 3. Test getUniqueTeams logic
    console.log('3. üß™ TEST getUniqueTeams LOGIC:');
    console.log('================================');
    
    const desiredStructure = {
      hanoi: ['NH√ìM 1', 'NH√ìM 2', 'NH√ìM 3', 'NH√ìM 4'],
      hcm: ['NH√ìM 1', 'NH√ìM 2']
    };
    
    const uniqueTeams = [];
    
    Object.entries(desiredStructure).forEach(([location, teamNames]) => {
      console.log(`\nüè¢ ${location.toUpperCase()}:`);
      
      teamNames.forEach(teamName => {
        console.log(`\n   T√¨m "${teamName}" t·∫°i ${location}:`);
        
        // T√¨m team ph√π h·ª£p, ∆∞u ti√™n team c√≥ t√™n c·ª• th·ªÉ
        let team = teams.find(t => 
          t.location === location && 
          t.name === teamName &&
          t.active !== false
        );
        
        if (team) {
          console.log(`   ‚úÖ T√¨m th·∫•y exact match: ${team.name} (ID: ${team.id})`);
          uniqueTeams.push(team);
        } else {
          // N·∫øu kh√¥ng t√¨m th·∫•y, t√¨m team c√≥ ch·ª©a t√™n
          team = teams.find(t => 
            t.location === location && 
            t.name.includes(teamName) &&
            t.active !== false
          );
          
          if (team) {
            console.log(`   ‚úÖ T√¨m th·∫•y partial match: ${team.name} (ID: ${team.id})`);
            uniqueTeams.push(team);
          } else {
            console.log(`   ‚ùå Kh√¥ng t√¨m th·∫•y team "${teamName}" t·∫°i ${location}`);
            
            // Debug: hi·ªÉn th·ªã teams c√≥ s·∫µn t·∫°i location n√†y
            const availableTeams = teams.filter(t => t.location === location);
            console.log(`   üìã Teams c√≥ s·∫µn t·∫°i ${location}:`);
            availableTeams.forEach(t => {
              console.log(`      - "${t.name}" (ID: ${t.id}, Active: ${t.active})`);
            });
          }
        }
      });
    });
    
    console.log(`\nüìä K·∫øt qu·∫£ getUniqueTeams: ${uniqueTeams.length} teams`);
    uniqueTeams.forEach((team, index) => {
      console.log(`   ${index + 1}. ${team.name} (${team.location})`);
    });

    // 4. Test findTeamLeaderByPattern
    console.log('\n4. üß™ TEST findTeamLeaderByPattern:');
    console.log('===================================');
    
    const teamLeaderMapping = {
      hanoi: {
        'NH√ìM 1': 'L∆∞∆°ng Vi·ªát Anh',
        'NH√ìM 2': 'Nguy·ªÖn Th·ªã Th·∫£o',
        'NH√ìM 3': 'Tr·ªãnh Th·ªã B·ªën',
        'NH√ìM 4': 'Ph·∫°m Th·ªã H∆∞∆°ng',
      },
      hcm: {
        'NH√ìM 1': 'Nguy·ªÖn Th·ªã Nga',
        'NH√ìM 2': 'Nguy·ªÖn Ng·ªçc Vi·ªát Khanh',
      }
    };
    
    uniqueTeams.forEach(team => {
      console.log(`\nüîç Team: ${team.name} (${team.location})`);
      
      const location = team.location === 'hcm' ? 'hcm' : 'hanoi';
      const locationMapping = teamLeaderMapping[location];
      
      let foundLeader = null;
      
      // T√¨m pattern ph√π h·ª£p
      for (const [pattern, leaderName] of Object.entries(locationMapping)) {
        if (team.name.includes(pattern)) {
          console.log(`   üìã Pattern match: "${pattern}" -> "${leaderName}"`);
          
          // T√¨m leader theo t√™n
          const leader = users.find(user =>
            user.name === leaderName && user.role === 'team_leader'
          );
          
          if (leader) {
            console.log(`   ‚úÖ T√¨m th·∫•y leader: ${leader.name} (ID: ${leader.id})`);
            foundLeader = leader;
            break;
          } else {
            console.log(`   ‚ùå Kh√¥ng t√¨m th·∫•y leader: ${leaderName}`);
            
            // Fallback: t√¨m theo t√™n g·∫ßn ƒë√∫ng
            const partialMatch = users.find(user =>
              user.role === 'team_leader' &&
              leaderName.split(' ').some(part => user.name.includes(part))
            );
            
            if (partialMatch) {
              console.log(`   ‚úÖ T√¨m th·∫•y partial match: ${partialMatch.name}`);
              foundLeader = partialMatch;
              break;
            }
          }
        }
      }
      
      if (!foundLeader) {
        console.log(`   ‚ùå Kh√¥ng t√¨m th·∫•y leader cho team ${team.name}`);
      }
    });

    // 5. Test getTeamsWithLeaderNames
    console.log('\n5. üß™ TEST getTeamsWithLeaderNames:');
    console.log('==================================');
    
    const teamsWithLeaders = uniqueTeams.map((team) => {
      const location = team.location === 'hcm' ? 'hcm' : 'hanoi';
      const locationMapping = teamLeaderMapping[location];
      
      let leader = null;
      
      // T√¨m pattern ph√π h·ª£p
      for (const [pattern, leaderName] of Object.entries(locationMapping)) {
        if (team.name.includes(pattern)) {
          leader = users.find(user =>
            user.name === leaderName && user.role === 'team_leader'
          );
          
          if (!leader) {
            leader = users.find(user =>
              user.role === 'team_leader' &&
              leaderName.split(' ').some(part => user.name.includes(part))
            );
          }
          break;
        }
      }
      
      const displayName = leader ? `${team.name} - ${leader.name}` : team.name;
      
      return {
        id: team.id,
        name: team.name,
        displayName,
        leader: leader || undefined,
      };
    });
    
    console.log(`üìã Teams v·ªõi leaders: ${teamsWithLeaders.length}`);
    teamsWithLeaders.forEach((team, index) => {
      console.log(`   ${index + 1}. ${team.displayName}`);
    });

    // 6. K·∫øt lu·∫≠n
    console.log('\n6. üéØ K·∫æT LU·∫¨N:');
    console.log('===============');
    
    if (uniqueTeams.length === 0) {
      console.log('‚ùå V·∫§N ƒê·ªÄ: getUniqueTeams tr·∫£ v·ªÅ empty array');
      console.log('üîß NGUY√äN NH√ÇN: Teams trong database kh√¥ng match v·ªõi expected structure');
      console.log('üí° GI·∫¢I PH√ÅP: C·∫ßn c·∫≠p nh·∫≠t logic ho·∫∑c data structure');
    } else if (teamsWithLeaders.filter(t => t.leader).length === 0) {
      console.log('‚ùå V·∫§N ƒê·ªÄ: Kh√¥ng c√≥ team n√†o c√≥ leader');
      console.log('üîß NGUY√äN NH√ÇN: findTeamLeaderByPattern kh√¥ng ho·∫°t ƒë·ªông');
      console.log('üí° GI·∫¢I PH√ÅP: C·∫ßn fix mapping logic');
    } else {
      console.log('‚úÖ Logic ho·∫°t ƒë·ªông ƒë√∫ng');
      console.log(`üìä ${teamsWithLeaders.length} teams, ${teamsWithLeaders.filter(t => t.leader).length} c√≥ leaders`);
    }

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
  }
}

debugTeamsData().catch(console.error);
