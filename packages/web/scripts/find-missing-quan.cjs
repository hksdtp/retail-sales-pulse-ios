const fetch = require('node-fetch');

const API_BASE = 'https://api-adwc442mha-uc.a.run.app';

async function findMissingQuan() {
  console.log('üîç T√åM L√ä TI·∫æN QU√ÇN V√Ä S·ª¨A C·∫§U TR√öC TEAMS');
  console.log('=========================================\n');

  try {
    // 1. L·∫•y d·ªØ li·ªáu
    const [usersResponse, teamsResponse] = await Promise.all([
      fetch(`${API_BASE}/users`),
      fetch(`${API_BASE}/teams`)
    ]);

    const usersData = await usersResponse.json();
    const teamsData = await teamsResponse.json();

    const users = usersData.data.filter(user => user.status !== 'deleted');
    const teams = teamsData.data;

    console.log(`‚úÖ Users active: ${users.length}`);
    console.log(`‚úÖ Teams: ${teams.length}`);
    console.log('');

    // 2. T√¨m L√™ Ti·∫øn Qu√¢n
    console.log('2. üîç T√åM L√ä TI·∫æN QU√ÇN:');
    console.log('======================');
    
    const quan = users.find(user => user.name.includes('Qu√¢n'));
    if (quan) {
      console.log(`‚úÖ T√¨m th·∫•y: ${quan.name}`);
      console.log(`   - ID: ${quan.id}`);
      console.log(`   - Email: ${quan.email}`);
      console.log(`   - Role: ${quan.role}`);
      console.log(`   - Team ID: ${quan.team_id}`);
      console.log(`   - Location: ${quan.location}`);
    } else {
      console.log('‚ùå KH√îNG t√¨m th·∫•y L√™ Ti·∫øn Qu√¢n trong users');
      console.log('üîç T√¨m ki·∫øm t·∫•t c·∫£ users c√≥ t√™n ch·ª©a "Qu√¢n", "Quan", "Ti·∫øn":');
      
      const possibleQuan = users.filter(user => 
        user.name.toLowerCase().includes('qu√¢n') ||
        user.name.toLowerCase().includes('quan') ||
        user.name.toLowerCase().includes('ti·∫øn')
      );
      
      if (possibleQuan.length > 0) {
        possibleQuan.forEach(user => {
          console.log(`   - ${user.name} (${user.email}) - Role: ${user.role}`);
        });
      } else {
        console.log('   Kh√¥ng t√¨m th·∫•y user n√†o c√≥ t√™n t∆∞∆°ng t·ª±');
      }
    }
    console.log('');

    // 3. Ph√¢n t√≠ch team leaders hi·ªán t·∫°i
    console.log('3. üë®‚Äçüíº TEAM LEADERS HI·ªÜN T·∫†I:');
    console.log('=============================');
    
    const teamLeaders = users.filter(user => user.role === 'team_leader');
    teamLeaders.forEach(leader => {
      console.log(`üë®‚Äçüíº ${leader.name}`);
      console.log(`   - Team ID: ${leader.team_id}`);
      console.log(`   - Location: ${leader.location}`);
    });
    console.log('');

    // 4. C·∫•u tr√∫c teams l√Ω t∆∞·ªüng
    console.log('4. üéØ C·∫§U TR√öC TEAMS L√ù T∆Ø·ªûNG:');
    console.log('==============================');
    
    const idealStructure = {
      hanoi: [
        { team: 'NH√ìM 1', leader: 'L∆∞∆°ng Vi·ªát Anh', teamId: '1' },
        { team: 'NH√ìM 2', leader: 'Nguy·ªÖn Th·ªã Th·∫£o', teamId: '2' },
        { team: 'NH√ìM 3', leader: 'Tr·ªãnh Th·ªã B·ªën', teamId: '3' },
        { team: 'NH√ìM 4', leader: 'Ph·∫°m Th·ªã H∆∞∆°ng', teamId: '4' },
        { team: 'NH√ìM 5', leader: 'L√™ Ti·∫øn Qu√¢n (?)', teamId: '?' },
      ],
      hcm: [
        { team: 'NH√ìM 1', leader: 'Nguy·ªÖn Th·ªã Nga', teamId: '5' },
        { team: 'NH√ìM 2', leader: 'Nguy·ªÖn Ng·ªçc Vi·ªát Khanh', teamId: '6' },
      ]
    };

    console.log('üè¢ H√Ä N·ªòI (n√™n c√≥):');
    idealStructure.hanoi.forEach((item, index) => {
      const leader = teamLeaders.find(l => l.name.includes(item.leader.split(' ')[0]));
      console.log(`   ${index + 1}. ${item.team} - ${item.leader}`);
      console.log(`      Status: ${leader ? '‚úÖ C√≥' : '‚ùå Thi·∫øu'}`);
    });
    
    console.log('\nüè¢ H·ªí CH√ç MINH (n√™n c√≥):');
    idealStructure.hcm.forEach((item, index) => {
      const leader = teamLeaders.find(l => l.name.includes(item.leader.split(' ')[0]));
      console.log(`   ${index + 1}. ${item.team} - ${item.leader}`);
      console.log(`      Status: ${leader ? '‚úÖ C√≥' : '‚ùå Thi·∫øu'}`);
    });

    // 5. Ph√¢n t√≠ch teams hi·ªán t·∫°i
    console.log('\n5. üìã TEAMS HI·ªÜN T·∫†I:');
    console.log('====================');
    
    const hanoiTeams = teams.filter(t => t.location === 'hanoi');
    const hcmTeams = teams.filter(t => t.location === 'hcm');
    
    console.log('üè¢ H√Ä N·ªòI TEAMS:');
    hanoiTeams.forEach((team, index) => {
      console.log(`   ${index + 1}. ${team.name} (ID: ${team.id})`);
    });
    
    console.log('\nüè¢ H·ªí CH√ç MINH TEAMS:');
    hcmTeams.forEach((team, index) => {
      console.log(`   ${index + 1}. ${team.name} (ID: ${team.id})`);
    });

    // 6. ƒê·ªÅ xu·∫•t gi·∫£i ph√°p
    console.log('\n6. üí° ƒê·ªÄ XU·∫§T GI·∫¢I PH√ÅP:');
    console.log('========================');
    
    if (!quan) {
      console.log('üîß B∆Ø·ªöC 1: T·∫°o user L√™ Ti·∫øn Qu√¢n');
      console.log('   - T√™n: L√™ Ti·∫øn Qu√¢n');
      console.log('   - Role: team_leader');
      console.log('   - Team ID: 5 (ho·∫∑c s·ªë ph√π h·ª£p)');
      console.log('   - Location: hanoi');
      console.log('');
    }
    
    console.log('üîß B∆Ø·ªöC 2: X√≥a teams duplicate');
    console.log('   - Gi·ªØ l·∫°i 1 team cho m·ªói nh√≥m');
    console.log('   - HN: NH√ìM 1,2,3,4 (+ NH√ìM 5 n·∫øu c√≥ Qu√¢n)');
    console.log('   - HCM: NH√ìM 1,2');
    console.log('');
    
    console.log('üîß B∆Ø·ªöC 3: C·∫≠p nh·∫≠t utility function');
    console.log('   - Mapping ƒë√∫ng theo c·∫•u tr√∫c m·ªõi');
    console.log('   - S·∫Øp x·∫øp theo th·ª© t·ª± 1,2,3,4,5,1,2');

    // 7. Ki·ªÉm tra teams duplicate
    console.log('\n7. üîç TEAMS DUPLICATE C·∫¶N X√ìA:');
    console.log('==============================');
    
    const teamGroups = {};
    teams.forEach(team => {
      const key = `${team.location}-${team.name}`;
      if (!teamGroups[key]) {
        teamGroups[key] = [];
      }
      teamGroups[key].push(team);
    });
    
    Object.entries(teamGroups).forEach(([key, teamList]) => {
      if (teamList.length > 1) {
        console.log(`üîÑ Duplicate: ${key} (${teamList.length} teams)`);
        teamList.forEach((team, index) => {
          console.log(`   ${index + 1}. ID: ${team.id} - ${index === 0 ? '‚úÖ Gi·ªØ' : '‚ùå X√≥a'}`);
        });
      }
    });

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
  }
}

findMissingQuan().catch(console.error);
