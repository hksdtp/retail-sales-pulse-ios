const fetch = require('node-fetch');

const API_BASE = 'https://api-adwc442mha-uc.a.run.app';

async function findQuanTeam() {
  console.log('üîç T√åM NH√ìM C·ª¶A QU√ÇN');
  console.log('====================\n');

  try {
    // 1. L·∫•y d·ªØ li·ªáu
    const [usersResponse, teamsResponse] = await Promise.all([
      fetch(`${API_BASE}/users`),
      fetch(`${API_BASE}/teams`)
    ]);

    const usersData = await usersResponse.json();
    const teamsData = await teamsResponse.json();

    const users = usersData.data.filter(user => user.status !== 'deleted');
    const teams = teamsData.data;

    console.log(`‚úÖ Users active: ${users.length}`);
    console.log(`‚úÖ Teams: ${teams.length}`);
    console.log('');

    // 2. T√¨m Qu√¢n
    console.log('2. üîç T√åM QU√ÇN:');
    console.log('===============');
    
    const quan = users.find(user => user.name.toLowerCase().includes('qu√¢n'));
    if (quan) {
      console.log(`üë®‚Äçüíº T√¨m th·∫•y: ${quan.name}`);
      console.log(`   - ID: ${quan.id}`);
      console.log(`   - Email: ${quan.email}`);
      console.log(`   - Role: ${quan.role}`);
      console.log(`   - Team ID: ${quan.team_id}`);
      console.log(`   - Location: ${quan.location}`);
      console.log('');
      
      // T√¨m team c·ªßa Qu√¢n
      const quanTeam = teams.find(t => t.id === quan.team_id);
      if (quanTeam) {
        console.log(`üè¢ Team c·ªßa Qu√¢n: ${quanTeam.name}`);
        console.log(`   - Team ID: ${quanTeam.id}`);
        console.log(`   - Location: ${quanTeam.location}`);
        console.log(`   - Leader ID: ${quanTeam.leader_id}`);
      } else {
        console.log(`‚ùå Kh√¥ng t√¨m th·∫•y team v·ªõi ID: ${quan.team_id}`);
      }
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y Qu√¢n trong danh s√°ch users');
      
      // T√¨m t·∫•t c·∫£ users c√≥ t√™n ch·ª©a "qu"
      const possibleQuan = users.filter(user => 
        user.name.toLowerCase().includes('qu') || 
        user.name.toLowerCase().includes('quan')
      );
      
      if (possibleQuan.length > 0) {
        console.log('üîç C√≥ th·ªÉ l√† Qu√¢n:');
        possibleQuan.forEach(user => {
          console.log(`   - ${user.name} (${user.email})`);
        });
      }
    }

    // 3. Li·ªát k√™ t·∫•t c·∫£ team leaders
    console.log('\n3. üë®‚Äçüíº T·∫§T C·∫¢ TEAM LEADERS:');
    console.log('============================');
    
    const teamLeaders = users.filter(user => user.role === 'team_leader');
    teamLeaders.forEach((leader, index) => {
      console.log(`${index + 1}. ${leader.name}`);
      console.log(`   - Team ID: ${leader.team_id}`);
      console.log(`   - Location: ${leader.location}`);
      
      const team = teams.find(t => t.id === leader.team_id);
      if (team) {
        console.log(`   - Team: ${team.name}`);
      }
      console.log('');
    });

    // 4. C·∫•u tr√∫c ƒë√∫ng theo y√™u c·∫ßu
    console.log('4. üìã C·∫§U TR√öC ƒê√öNG THEO Y√äU C·∫¶U:');
    console.log('=================================');
    console.log('H√Ä N·ªòI:');
    console.log('   1. NH√ìM 1 - L∆∞∆°ng Vi·ªát Anh');
    console.log('   2. NH√ìM 2 - Nguy·ªÖn Th·ªã Th·∫£o');
    console.log('   3. NH√ìM 3 - Tr·ªãnh Th·ªã B·ªën');
    console.log('   4. NH√ìM 4 - Ph·∫°m Th·ªã H∆∞∆°ng');
    console.log('   5. NH√ìM 5 - [QU√ÇN?]');
    console.log('');
    console.log('H·ªí CH√ç MINH:');
    console.log('   1. NH√ìM 1 - Nguy·ªÖn Th·ªã Nga (t·ª´ team_id: 5)');
    console.log('   2. NH√ìM 2 - Nguy·ªÖn Ng·ªçc Vi·ªát Khanh (t·ª´ team_id: 6)');

    // 5. T√¨m team leaders thi·∫øu
    console.log('\n5. üîç T√åM TEAM LEADERS THI·∫æU:');
    console.log('=============================');
    
    const expectedLeaders = [
      'L∆∞∆°ng Vi·ªát Anh',
      'Nguy·ªÖn Th·ªã Th·∫£o', 
      'Tr·ªãnh Th·ªã B·ªën',
      'Ph·∫°m Th·ªã H∆∞∆°ng',
      'Nguy·ªÖn Th·ªã Nga',
      'Nguy·ªÖn Ng·ªçc Vi·ªát Khanh'
    ];
    
    const foundLeaders = teamLeaders.map(l => l.name);
    const missingLeaders = expectedLeaders.filter(name => 
      !foundLeaders.some(found => found.includes(name.split(' ').pop()))
    );
    
    console.log('‚úÖ C√≥ s·∫µn:', foundLeaders);
    console.log('‚ùå Thi·∫øu:', missingLeaders);
    
    // T√¨m users c√≥ th·ªÉ l√† team leader
    const potentialLeaders = users.filter(user => 
      user.role !== 'team_leader' && 
      user.role !== 'retail_director' &&
      !user.name.includes('Deleted')
    );
    
    if (potentialLeaders.length > 0) {
      console.log('\nü§î Users c√≥ th·ªÉ l√† team leader:');
      potentialLeaders.forEach(user => {
        console.log(`   - ${user.name} (${user.role}) - Team: ${user.team_id}`);
      });
    }

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
  }
}

findQuanTeam().catch(console.error);
