const admin = require('firebase-admin');

// Initialize Firebase Admin cho production
// C·∫ßn service account key file
try {
  const serviceAccount = require('../service-account-key.json');
  
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    projectId: 'appqlgd',
  });
} catch (error) {
  console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y service-account-key.json, th·ª≠ k·∫øt n·ªëi tr·ª±c ti·∫øp...');
  
  // Fallback: Th·ª≠ k·∫øt n·ªëi tr·ª±c ti·∫øp v·ªõi project ID
  admin.initializeApp({
    projectId: 'appqlgd',
  });
}

const db = admin.firestore();

// Danh s√°ch 11 users duplicate c·∫ßn x√≥a
const usersToDelete = [
  {
    id: '1',
    name: 'Kh·ªïng ƒê·ª©c M·∫°nh 123',
    email: 'manh.khong@example.com',
    reason: 'Thi·∫øu ho√†n to√†n d·ªØ li·ªáu (role, team, location, status = undefined)'
  },
  {
    id: 'ObroYv1R4odHRcTGOB8d',
    name: 'Kh·ªïng ƒê·ª©c M·∫°nh',
    email: 'manh.khong@example.com',
    reason: 'Duplicate - gi·ªØ l·∫°i Ve7sGRnMoRvT1E0VL5Ds (t·∫°o s·ªõm h∆°n 6/4/2025)'
  },
  {
    id: 'aa2tloFwBhe6m05lwypc',
    name: 'Nguy·ªÖn Ng·ªçc Vi·ªát Khanh',
    email: 'vietkhanh@example.com',
    reason: 'Duplicate - gi·ªØ l·∫°i 0AzCiDnWxcCMzIAwLA9D (t·∫°o s·ªõm h∆°n 6/4/2025)'
  },
  {
    id: 'ERi0hcgzKhWsRKx1Gm26',
    name: 'Ph·∫°m Th·ªã H∆∞∆°ng',
    email: 'huong.pham@example.com',
    reason: 'Duplicate - gi·ªØ l·∫°i ACKzl2RISqrx5ca9QDM6 (t·∫°o s·ªõm h∆°n 6/4/2025)'
  },
  {
    id: 'XbEKpUCw6OPLiFQWmCCm',
    name: 'H√† Nguy·ªÖn Tuy·∫øn',
    email: 'tuyen.ha@example.com',
    reason: 'Duplicate - gi·ªØ l·∫°i 8NpVPLaiLDhv75jZNq5q (t·∫°o s·ªõm h∆°n 6/4/2025)'
  },
  {
    id: 'pGahEQwrJN8aIpEdRnBY',
    name: 'H√† Nguy·ªÖn Thanh Tuy·ªÅn',
    email: 'tuyen.ha@example.com',
    reason: 'Duplicate - gi·ªØ l·∫°i 8NpVPLaiLDhv75jZNq5q (t·∫°o s·ªõm h∆°n 6/4/2025)'
  },
  {
    id: 'tacjOehkubNmOvgnmvOo',
    name: 'Ph√πng Th·ªã Thu·ª≥ V√¢n',
    email: 'thuyvan@example.com',
    reason: 'Duplicate - gi·ªØ l·∫°i RIWI0w6ETBPy6AA2Z5hL (t·∫°o s·ªõm h∆°n 6/4/2025)'
  },
  {
    id: 'xpKkMvhRi7nfT8v81pUr',
    name: 'Ph√πng Th·ªã Thu·ª≥ V√¢n',
    email: 'thuyvan@example.com',
    reason: 'Duplicate - gi·ªØ l·∫°i RIWI0w6ETBPy6AA2Z5hL (t·∫°o s·ªõm h∆°n 6/4/2025)'
  },
  {
    id: 'ZIJgzHB2b60qfWyOK0Ko',
    name: 'Tr·ªãnh Th·ªã B·ªën',
    email: 'bon.trinh@example.com',
    reason: 'Duplicate - gi·ªØ l·∫°i k030JV0tAobf5rMvdzG4 (t·∫°o s·ªõm h∆°n 6/4/2025)'
  },
  {
    id: 'oH7an8cvGdI4uwmi7bpZ',
    name: 'Nguy·ªÖn Th·ªã Nga',
    email: 'nga.nguyen@example.com',
    reason: 'Duplicate - gi·ªØ l·∫°i pzSa30JeZR0UoOoKhZ7l (t·∫°o s·ªõm h∆°n 6/4/2025)'
  },
  {
    id: 'zdORDsodkjHvQjDwbIEX',
    name: 'Nguy·ªÖn Th·ªã Nga',
    email: 'nga.nguyen@example.com',
    reason: 'Duplicate - gi·ªØ l·∫°i pzSa30JeZR0UoOoKhZ7l (t·∫°o s·ªõm h∆°n 6/4/2025)'
  }
];

async function deleteDuplicateUsersDirectly() {
  console.log('üóëÔ∏è X√ìA DUPLICATE USERS TR·ª∞C TI·∫æP T·ª™ FIRESTORE');
  console.log('==============================================\n');

  try {
    // 1. Ki·ªÉm tra k·∫øt n·ªëi Firestore
    console.log('1. üî• Ki·ªÉm tra k·∫øt n·ªëi Firestore...');
    const usersSnapshot = await db.collection('users').limit(1).get();
    console.log('‚úÖ K·∫øt n·ªëi Firestore th√†nh c√¥ng');
    console.log('');

    // 2. Ki·ªÉm tra s·ªë l∆∞·ª£ng users hi·ªán t·∫°i
    console.log('2. üë• Ki·ªÉm tra users hi·ªán t·∫°i...');
    const allUsersSnapshot = await db.collection('users').get();
    console.log(`üìä T·ªïng users hi·ªán t·∫°i: ${allUsersSnapshot.size}`);
    console.log('');

    // 3. Hi·ªÉn th·ªã danh s√°ch s·∫Ω x√≥a
    console.log('3. üìã Danh s√°ch users s·∫Ω x√≥a:');
    usersToDelete.forEach((user, index) => {
      console.log(`   ${index + 1}. "${user.name}" (ID: ${user.id})`);
      console.log(`      - Email: ${user.email}`);
      console.log(`      - L√Ω do: ${user.reason}`);
      console.log('');
    });

    // 4. Ki·ªÉm tra users t·ªìn t·∫°i tr∆∞·ªõc khi x√≥a
    console.log('4. üîç Ki·ªÉm tra users t·ªìn t·∫°i...');
    const existingUsers = [];
    const nonExistingUsers = [];

    for (const user of usersToDelete) {
      try {
        const userDoc = await db.collection('users').doc(user.id).get();
        if (userDoc.exists) {
          existingUsers.push(user);
          console.log(`   ‚úÖ T·ªìn t·∫°i: "${user.name}" (ID: ${user.id})`);
        } else {
          nonExistingUsers.push(user);
          console.log(`   ‚ùå Kh√¥ng t·ªìn t·∫°i: "${user.name}" (ID: ${user.id})`);
        }
      } catch (error) {
        nonExistingUsers.push(user);
        console.log(`   ‚ùå L·ªói ki·ªÉm tra: "${user.name}" (ID: ${user.id}) - ${error.message}`);
      }
    }

    console.log('');
    console.log(`üìä Users t·ªìn t·∫°i: ${existingUsers.length}`);
    console.log(`üìä Users kh√¥ng t·ªìn t·∫°i: ${nonExistingUsers.length}`);
    console.log('');

    if (existingUsers.length === 0) {
      console.log('‚ö†Ô∏è Kh√¥ng c√≥ users n√†o ƒë·ªÉ x√≥a!');
      return;
    }

    // 5. B·∫Øt ƒë·∫ßu x√≥a users
    console.log('5. üóëÔ∏è B·∫Øt ƒë·∫ßu x√≥a duplicate users...');
    let deletedCount = 0;
    let errorCount = 0;

    // S·ª≠ d·ª•ng batch ƒë·ªÉ x√≥a hi·ªáu qu·∫£ h∆°n
    const batch = db.batch();
    
    existingUsers.forEach((user, index) => {
      console.log(`üìù Chu·∫©n b·ªã x√≥a ${index + 1}/${existingUsers.length}: "${user.name}" (ID: ${user.id})`);
      const userRef = db.collection('users').doc(user.id);
      batch.delete(userRef);
    });

    // Commit batch delete
    console.log('üî• Th·ª±c hi·ªán batch delete...');
    await batch.commit();
    deletedCount = existingUsers.length;
    console.log(`‚úÖ ƒê√£ x√≥a th√†nh c√¥ng ${deletedCount} users`);

    console.log('');

    // 6. Ki·ªÉm tra k·∫øt qu·∫£
    console.log('6. üìä Ki·ªÉm tra k·∫øt qu·∫£...');
    const finalUsersSnapshot = await db.collection('users').get();
    const finalUsers = finalUsersSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));

    console.log('üìä K·∫æT QU·∫¢ X√ìA DUPLICATE USERS:');
    console.log('================================');
    console.log(`‚úÖ Users ƒë√£ x√≥a th√†nh c√¥ng: ${deletedCount}`);
    console.log(`‚ùå Users kh√¥ng t·ªìn t·∫°i: ${nonExistingUsers.length}`);
    console.log(`üìã T·ªïng users sau khi x√≥a: ${finalUsers.length}`);
    console.log(`üéØ D·ª± ki·∫øn users c√≤n l·∫°i: 13 (24 - 11 = 13)`);
    console.log('');

    if (finalUsers.length > 0) {
      console.log('‚úÖ Danh s√°ch users c√≤n l·∫°i (unique):');
      finalUsers.forEach((user, index) => {
        console.log(`   ${index + 1}. "${user.name}" (${user.email})`);
        console.log(`      - ID: ${user.id}`);
        console.log(`      - Role: ${user.role || 'undefined'}`);
        console.log(`      - Team: ${user.team_id || 'undefined'}`);
        console.log(`      - Location: ${user.location || 'undefined'}`);
        console.log('');
      });
    }

    // 7. Ki·ªÉm tra xem c√≤n duplicate kh√¥ng
    console.log('7. üîç Ki·ªÉm tra duplicate c√≤n l·∫°i...');
    const emailCounts = {};
    finalUsers.forEach(user => {
      const email = user.email || 'no-email';
      emailCounts[email] = (emailCounts[email] || 0) + 1;
    });

    const remainingDuplicates = Object.keys(emailCounts).filter(email => emailCounts[email] > 1);
    
    if (remainingDuplicates.length === 0) {
      console.log('‚úÖ HO√ÄN H·∫¢O! Kh√¥ng c√≤n duplicate users n√†o');
    } else {
      console.log(`‚ö†Ô∏è C√≤n ${remainingDuplicates.length} email b·ªã duplicate:`);
      remainingDuplicates.forEach(email => {
        console.log(`   - ${email}: ${emailCounts[email]} users`);
      });
    }

    console.log('');
    console.log('üéâ HO√ÄN TH√ÄNH X√ìA DUPLICATE USERS!');
    console.log('üî• Firestore ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch');
    console.log('üë• Users hi·ªán t·∫°i ƒë√£ unique');

    return {
      deletedCount,
      errorCount,
      finalUserCount: finalUsers.length,
      remainingDuplicates: remainingDuplicates.length
    };

  } catch (error) {
    console.error('‚ùå L·ªói khi x√≥a duplicate users:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

// Ch·∫°y script
console.log('üö® SCRIPT X√ìA 11 DUPLICATE USERS TR·ª∞C TI·∫æP');
console.log('üìã X√≥a tr·ª±c ti·∫øp t·ª´ Firestore (kh√¥ng qua API)');
console.log('‚è∞ B·∫Øt ƒë·∫ßu sau 2 gi√¢y...\n');

setTimeout(() => {
  deleteDuplicateUsersDirectly()
    .then(() => {
      console.log('\n‚úÖ Script ho√†n th√†nh!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Script th·∫•t b·∫°i:', error);
      process.exit(1);
    });
}, 2000);
