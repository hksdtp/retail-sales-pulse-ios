const express = require('express');
const cors = require('cors');
const app = express();
const PORT = 3003;

// Middleware
app.use(cors({
  origin: ['http://localhost:8088', 'http://127.0.0.1:8088', 'http://[::1]:8088', 'file://'],
  credentials: true
}));
app.use(express.json());

// Request logging
app.use((req, res, next) => {
  console.log(`üì• ${req.method} ${req.path}`, req.query);
  next();
});

// Mock data
// Mock tasks array - Test data for team filtering
const mockTasks = [
  {
    id: 'task-team1-1',
    title: 'Task c·ªßa NH√ìM 1 - VI·ªÜT ANH',
    description: 'C√¥ng vi·ªác test cho nh√≥m Vi·ªát Anh',
    type: 'other',
    status: 'todo',
    priority: 'normal',
    date: '2025-01-08',
    time: '09:00',
    progress: 0,
    user_id: 'Ue4vzSj1KDg4vZyXwlHJ',
    user_name: 'L∆∞∆°ng Vi·ªát Anh',
    team_id: '1',
    teamId: '1',
    location: 'H√† N·ªôi',
    assignedTo: 'Ue4vzSj1KDg4vZyXwlHJ',
    created_at: new Date().toISOString()
  },
  {
    id: 'task-team2-1',
    title: 'Task c·ªßa NH√ìM 2 - TH·∫¢O',
    description: 'C√¥ng vi·ªác test cho nh√≥m Th·∫£o',
    type: 'other',
    status: 'todo',
    priority: 'normal',
    date: '2025-01-08',
    time: '10:00',
    progress: 0,
    user_id: 'user-thao-id',
    user_name: 'Nguy·ªÖn Th·ªã Th·∫£o',
    team_id: '2',
    teamId: '2',
    location: 'H√† N·ªôi',
    assignedTo: 'user-thao-id',
    created_at: new Date().toISOString()
  },
  {
    id: 'task-team3-1',
    title: 'Task c·ªßa NH√ìM 3',
    description: 'C√¥ng vi·ªác test cho nh√≥m 3',
    type: 'other',
    status: 'todo',
    priority: 'normal',
    date: '2025-01-08',
    time: '11:00',
    progress: 0,
    user_id: 'user-bon-id',
    user_name: 'Tr·ªãnh Th·ªã B·ªën',
    team_id: '3',
    teamId: '3',
    location: 'H√† N·ªôi',
    assignedTo: 'user-bon-id',
    created_at: new Date().toISOString()
  },
  {
    id: 'task-team4-1',
    title: 'Task c·ªßa NH√ìM 4',
    description: 'C√¥ng vi·ªác test cho nh√≥m 4',
    type: 'other',
    status: 'todo',
    priority: 'normal',
    date: '2025-01-08',
    time: '12:00',
    progress: 0,
    user_id: 'pham_thi_huong_hn_id',
    user_name: 'Ph·∫°m Th·ªã H∆∞∆°ng',
    team_id: '4',
    teamId: '4',
    location: 'H√† N·ªôi',
    assignedTo: 'pham_thi_huong_hn_id',
    created_at: new Date().toISOString()
  },
  {
    id: 'task-team5-1',
    title: 'Task c·ªßa NH√ìM 1 - HCM',
    description: 'C√¥ng vi·ªác test cho nh√≥m 1 HCM',
    type: 'other',
    status: 'todo',
    priority: 'normal',
    date: '2025-01-08',
    time: '13:00',
    progress: 0,
    user_id: 'nguyen_thi_nga_id',
    user_name: 'Nguy·ªÖn Th·ªã Nga',
    team_id: '5',
    teamId: '5',
    location: 'H·ªì Ch√≠ Minh',
    assignedTo: 'nguyen_thi_nga_id',
    created_at: new Date().toISOString()
  },
  {
    id: 'task-team6-1',
    title: 'Task c·ªßa NH√ìM 2 - HCM',
    description: 'C√¥ng vi·ªác test cho nh√≥m 2 HCM',
    type: 'other',
    status: 'todo',
    priority: 'normal',
    date: '2025-01-08',
    time: '14:00',
    progress: 0,
    user_id: 'nguyen_ngoc_viet_khanh_id',
    user_name: 'Nguy·ªÖn Ng·ªçc Vi·ªát Khanh',
    team_id: '6',
    teamId: '6',
    location: 'H·ªì Ch√≠ Minh',
    assignedTo: 'nguyen_ngoc_viet_khanh_id',
    created_at: new Date().toISOString()
  },
  {
    id: 'task-shared-1',
    title: 'Task chung c·ªßa ph√≤ng - T·∫•t c·∫£ teams',
    description: 'C√¥ng vi·ªác chung cho t·∫•t c·∫£ c√°c nh√≥m',
    type: 'other',
    status: 'todo',
    priority: 'high',
    date: '2025-01-08',
    time: '13:00',
    progress: 0,
    user_id: 'Ve7sGRnMoRvT1E0VL5Ds',
    user_name: 'Kh·ªïng ƒê·ª©c M·∫°nh',
    team_id: '0',
    teamId: '0',
    location: 'To√†n qu·ªëc',
    assignedTo: 'all',
    isSharedWithTeam: true,
    visibility: 'public',
    department_wide: true,
    created_at: new Date().toISOString()
  }
];

const mockUsers = [
  // Real users from production system
  {
    id: 'Ve7sGRnMoRvT1E0VL5Ds',
    name: 'Kh·ªïng ƒê·ª©c M·∫°nh',
    email: 'manh.khong@example.com',
    role: 'retail_director',
    team_id: '0',
    location: 'To√†n qu·ªëc',
    department: 'B√°n l·∫ª',
    department_type: 'retail',
    position: 'Tr∆∞·ªüng ph√≤ng B√°n l·∫ª',
    status: 'active',
    password_changed: false
  },
  {
    id: 'Ue4vzSj1KDg4vZyXwlHJ',
    name: 'L∆∞∆°ng Vi·ªát Anh',
    email: 'vietanh@example.com',
    role: 'team_leader',
    team_id: '1',
    location: 'H√† N·ªôi',
    department: 'B√°n l·∫ª',
    department_type: 'retail',
    position: 'Tr∆∞·ªüng nh√≥m',
    status: 'active',
    password_changed: false
  },
  {
    id: 'abtSSmK0p0oeOyy5YWGZ',
    name: 'L√™ Kh√°nh Duy',
    email: 'khanhduy@example.com',
    role: 'employee',
    team_id: '1',
    location: 'H√† N·ªôi',
    department: 'B√°n l·∫ª',
    department_type: 'retail',
    position: 'Nh√¢n vi√™n 1 - Nh√≥m 1',
    status: 'active',
    password_changed: false
  },
  {
    id: 'quan_thu_ha_id',
    name: 'Qu·∫£n Thu H√†',
    email: 'ha.quan@example.com',
    role: 'employee',
    team_id: '1',
    location: 'H√† N·ªôi',
    department: 'B√°n l·∫ª',
    department_type: 'retail',
    position: 'Nh√¢n vi√™n 2 - Nh√≥m 1',
    status: 'active',
    password_changed: false
  },
  {
    id: 'pham_thi_huong_id',
    name: 'Ph·∫°m Th·ªã H∆∞∆°ng',
    email: 'huong.pham@example.com',
    role: 'team_leader',
    team_id: '5',
    location: 'H√† N·ªôi',
    department: 'B√°n l·∫ª',
    department_type: 'retail',
    position: 'Tr∆∞·ªüng nh√≥m',
    status: 'active',
    password_changed: true
  },
  {
    id: 'nguyen_manh_linh_id',
    name: 'Nguy·ªÖn M·∫°nh Linh',
    email: 'linh.nguyen@example.com',
    role: 'employee',
    team_id: '2',
    location: 'H√† N·ªôi',
    department: 'B√°n l·∫ª',
    department_type: 'retail',
    position: 'Nh√¢n vi√™n 1 - Nh√≥m 2',
    status: 'active',
    password_changed: true
  },
  {
    id: 'nguyen_thi_thao_id',
    name: 'Nguy·ªÖn Th·ªã Th·∫£o',
    email: 'thao.nguyen@example.com',
    role: 'team_leader',
    team_id: '2',
    location: 'H√† N·ªôi',
    department: 'B√°n l·∫ª',
    department_type: 'retail',
    position: 'Tr∆∞·ªüng nh√≥m 2',
    status: 'active',
    password_changed: false
  },
  // NH√ìM 3 - H√† N·ªôi
  {
    id: 'trinh_thi_bon_id',
    name: 'Tr·ªãnh Th·ªã B·ªën',
    email: 'bon.trinh@example.com',
    role: 'team_leader',
    team_id: '3',
    location: 'H√† N·ªôi',
    department: 'B√°n l·∫ª',
    department_type: 'retail',
    position: 'Tr∆∞·ªüng nh√≥m 3',
    status: 'active',
    password_changed: false
  },
  // NH√ìM 4 - H√† N·ªôi
  {
    id: 'pham_thi_huong_hn_id',
    name: 'Ph·∫°m Th·ªã H∆∞∆°ng',
    email: 'huong.pham.hn@example.com',
    role: 'team_leader',
    team_id: '4',
    location: 'H√† N·ªôi',
    department: 'B√°n l·∫ª',
    department_type: 'retail',
    position: 'Tr∆∞·ªüng nh√≥m 4',
    status: 'active',
    password_changed: false
  },
  // NH√ìM 1 HCM
  {
    id: 'nguyen_thi_nga_id',
    name: 'Nguy·ªÖn Th·ªã Nga',
    email: 'nga.nguyen@example.com',
    role: 'team_leader',
    team_id: '5',
    location: 'H·ªì Ch√≠ Minh',
    department: 'B√°n l·∫ª',
    department_type: 'retail',
    position: 'Tr∆∞·ªüng nh√≥m 1 - HCM',
    status: 'active',
    password_changed: false
  },
  {
    id: 'ha_nguyen_thanh_tuyen_id',
    name: 'H√† Nguy·ªÖn Thanh Tuy·ªÅn',
    email: 'tuyen.ha@example.com',
    role: 'employee',
    team_id: '5',
    location: 'H·ªì Ch√≠ Minh',
    department: 'B√°n l·∫ª',
    department_type: 'retail',
    position: 'Nh√¢n vi√™n - Nh√≥m 1 HCM',
    status: 'active',
    password_changed: false
  },
  // NH√ìM 2 HCM
  {
    id: 'nguyen_ngoc_viet_khanh_id',
    name: 'Nguy·ªÖn Ng·ªçc Vi·ªát Khanh',
    email: 'khanh.nguyen@example.com',
    role: 'team_leader',
    team_id: '6',
    location: 'H·ªì Ch√≠ Minh',
    department: 'B√°n l·∫ª',
    department_type: 'retail',
    position: 'Tr∆∞·ªüng nh√≥m 2 - HCM',
    status: 'active',
    password_changed: false
  },
  {
    id: 'phung_thi_thuy_van_id',
    name: 'Ph√πng Th·ªã Thu·ª≥ V√¢n',
    email: 'van.phung@example.com',
    role: 'employee',
    team_id: '6',
    location: 'H·ªì Ch√≠ Minh',
    department: 'B√°n l·∫ª',
    department_type: 'retail',
    position: 'Nh√¢n vi√™n - Nh√≥m 2 HCM',
    status: 'active',
    password_changed: false
  }
];

const mockTeams = [
  {
    id: '0',
    name: 'Ban Gi√°m ƒê·ªëc',
    leader_id: 'Ve7sGRnMoRvT1E0VL5Ds', // Kh·ªïng ƒê·ª©c M·∫°nh
    location: 'To√†n qu·ªëc',
    description: 'Ban l√£nh ƒë·∫°o c√¥ng ty',
    department: 'B√°n l·∫ª',
    department_type: 'retail'
  },
  {
    id: '1',
    name: 'NH√ìM 1 - VI·ªÜT ANH',
    leader_id: 'Ue4vzSj1KDg4vZyXwlHJ', // L∆∞∆°ng Vi·ªát Anh
    location: 'H√† N·ªôi',
    description: 'Nh√≥m 1 H√† N·ªôi - Tr∆∞·ªüng nh√≥m L∆∞∆°ng Vi·ªát Anh',
    department: 'B√°n l·∫ª',
    department_type: 'retail'
  },
  {
    id: '2',
    name: 'NH√ìM 2 - TH·∫¢O',
    leader_id: 'nguyen_thi_thao_id', // Nguy·ªÖn Th·ªã Th·∫£o
    location: 'H√† N·ªôi',
    description: 'Nh√≥m 2 H√† N·ªôi - Tr∆∞·ªüng nh√≥m Nguy·ªÖn Th·ªã Th·∫£o',
    department: 'B√°n l·∫ª',
    department_type: 'retail'
  },
  {
    id: '3',
    name: 'NH√ìM 3',
    leader_id: 'trinh_thi_bon_id', // Tr·ªãnh Th·ªã B·ªën
    location: 'H√† N·ªôi',
    description: 'Nh√≥m 3 H√† N·ªôi - Tr∆∞·ªüng nh√≥m Tr·ªãnh Th·ªã B·ªën',
    department: 'B√°n l·∫ª',
    department_type: 'retail'
  },
  {
    id: '4',
    name: 'NH√ìM 4',
    leader_id: 'pham_thi_huong_hn_id', // Ph·∫°m Th·ªã H∆∞∆°ng
    location: 'H√† N·ªôi',
    description: 'Nh√≥m 4 H√† N·ªôi - Tr∆∞·ªüng nh√≥m Ph·∫°m Th·ªã H∆∞∆°ng',
    department: 'B√°n l·∫ª',
    department_type: 'retail'
  },
  {
    id: '5',
    name: 'NH√ìM 1 - HCM',
    leader_id: 'nguyen_thi_nga_id', // Nguy·ªÖn Th·ªã Nga
    location: 'H·ªì Ch√≠ Minh',
    description: 'Nh√≥m 1 HCM - Tr∆∞·ªüng nh√≥m Nguy·ªÖn Th·ªã Nga',
    department: 'B√°n l·∫ª',
    department_type: 'retail'
  },
  {
    id: '6',
    name: 'NH√ìM 2 - HCM',
    leader_id: 'nguyen_ngoc_viet_khanh_id', // Nguy·ªÖn Ng·ªçc Vi·ªát Khanh
    location: 'H·ªì Ch√≠ Minh',
    description: 'Nh√≥m 2 HCM - Tr∆∞·ªüng nh√≥m Nguy·ªÖn Ng·ªçc Vi·ªát Khanh',
    department: 'B√°n l·∫ª',
    department_type: 'retail'
  }
];

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    success: true,
    message: 'API server is running',
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  });
});

// Tasks endpoints
app.get('/tasks', (req, res) => {
  console.log('üìã Getting tasks with query:', req.query);
  res.json({
    success: true,
    data: mockTasks,
    count: mockTasks.length
  });
});

app.get('/tasks/manager-view', (req, res) => {
  console.log('üëî Manager view with query:', req.query);
  const { role, view_level, department } = req.query;
  
  let filteredTasks = mockTasks;
  
  if (department) {
    // Filter by department if specified
    filteredTasks = mockTasks.filter(task => 
      mockUsers.find(user => user.id === task.user_id)?.department_type === department
    );
  }
  
  res.json({
    success: true,
    data: filteredTasks,
    count: filteredTasks.length,
    filters: { role, view_level, department }
  });
});

app.get('/tasks/:id', (req, res) => {
  const task = mockTasks.find(t => t.id === req.params.id);
  if (!task) {
    return res.status(404).json({
      success: false,
      error: 'Task not found'
    });
  }
  res.json({
    success: true,
    data: task
  });
});

// Users endpoints
app.get('/users', (req, res) => {
  res.json({
    success: true,
    data: mockUsers,
    count: mockUsers.length
  });
});

app.get('/users/:id', (req, res) => {
  const user = mockUsers.find(u => u.id === req.params.id);
  if (!user) {
    return res.status(404).json({
      success: false,
      error: 'User not found'
    });
  }
  res.json({
    success: true,
    data: user
  });
});

// Teams endpoints
app.get('/teams', (req, res) => {
  res.json({
    success: true,
    data: mockTeams,
    count: mockTeams.length
  });
});

app.get('/teams/:id', (req, res) => {
  const team = mockTeams.find(t => t.id === req.params.id);
  if (!team) {
    return res.status(404).json({
      success: false,
      error: 'Team not found'
    });
  }
  res.json({
    success: true,
    data: team
  });
});

// Password storage (in-memory for demo) - Enhanced security
const userPasswords = new Map();

// Security logging
const securityLog = [];
const logSecurityEvent = (event, userId, details = {}) => {
  const logEntry = {
    timestamp: new Date().toISOString(),
    event,
    userId,
    ...details
  };
  securityLog.push(logEntry);
  console.log(`üîí SECURITY: ${event} - User: ${userId}`, details);
};

// Password validation
const validatePassword = (password) => {
  const errors = [];

  if (!password || password.length < 6) {
    errors.push('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
  }

  if (password === '123456') {
    errors.push('Kh√¥ng th·ªÉ s·ª≠ d·ª•ng m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh');
  }

  if (password && password.length > 50) {
    errors.push('M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c qu√° 50 k√Ω t·ª±');
  }

  return {
    isValid: errors.length === 0,
    errors
  };
};

// Password storage initialized - no test passwords
// All users will use first login (123456) or admin master password (haininh1)

// Admin master password
const ADMIN_MASTER_PASSWORD = 'haininh1';

// Enhanced Auth endpoints with security logging
app.post('/auth/login', (req, res) => {
  const { email, password } = req.body;
  const clientIP = req.ip || req.connection.remoteAddress;

  console.log(`üîê Login attempt: ${email} from IP: ${clientIP}`);

  // Input validation
  if (!email || !password) {
    logSecurityEvent('LOGIN_FAILED', email, { reason: 'Missing credentials', ip: clientIP });
    return res.status(400).json({
      success: false,
      error: 'Email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc'
    });
  }

  const user = mockUsers.find(u => u.email === email);

  if (!user) {
    logSecurityEvent('LOGIN_FAILED', email, { reason: 'User not found', ip: clientIP });
    return res.status(401).json({
      success: false,
      error: 'Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng'
    });
  }

  // Check admin master password first
  if (password === ADMIN_MASTER_PASSWORD) {
    logSecurityEvent('ADMIN_LOGIN', user.id, {
      userName: user.name,
      email: user.email,
      ip: clientIP
    });

    return res.json({
      success: true,
      data: {
        user: {
          ...user,
          password_changed: true // Admin can always login
        },
        token: 'admin-master-token-' + Date.now(),
        loginType: 'admin_master'
      },
      message: 'ƒêƒÉng nh·∫≠p v·ªõi m·∫≠t kh·∫©u admin th√†nh c√¥ng'
    });
  }

  // Check if user has changed password
  const userPasswordInfo = userPasswords.get(user.id);
  const hasChangedPassword = userPasswordInfo && userPasswordInfo.changed;

  if (!hasChangedPassword) {
    // User hasn't changed password, must use default
    if (password === '123456') {
      logSecurityEvent('FIRST_LOGIN', user.id, {
        userName: user.name,
        email: user.email,
        ip: clientIP
      });

      return res.json({
        success: true,
        data: {
          user: {
            ...user,
            password_changed: false // Force password change
          },
          token: 'first-login-token-' + Date.now(),
          loginType: 'first_login',
          requirePasswordChange: true
        },
        message: 'ƒêƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu - b·∫Øt bu·ªôc ƒë·ªïi m·∫≠t kh·∫©u'
      });
    } else {
      logSecurityEvent('LOGIN_FAILED', user.id, {
        reason: 'Wrong password on first login',
        ip: clientIP
      });

      return res.status(401).json({
        success: false,
        error: 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng. L·∫ßn ƒëƒÉng nh·∫≠p ƒë·∫ßu ti√™n vui l√≤ng s·ª≠ d·ª•ng m·∫≠t kh·∫©u: 123456'
      });
    }
  }

  // User has changed password - check if they're trying to use default password
  if (password === '123456') {
    logSecurityEvent('LOGIN_FAILED', user.id, {
      reason: 'Attempted default password after change',
      ip: clientIP
    });

    return res.status(401).json({
      success: false,
      error: 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng. Vui l√≤ng s·ª≠ d·ª•ng m·∫≠t kh·∫©u m·ªõi ƒë√£ ƒë·∫∑t.'
    });
  }

  // Check custom password
  if (password === userPasswordInfo.password) {
    logSecurityEvent('LOGIN_SUCCESS', user.id, {
      userName: user.name,
      email: user.email,
      ip: clientIP
    });

    return res.json({
      success: true,
      data: {
        user: {
          ...user,
          password_changed: true
        },
        token: 'custom-password-token-' + Date.now(),
        loginType: 'custom_password'
      },
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng'
    });
  }

  // Wrong password
  logSecurityEvent('LOGIN_FAILED', user.id, {
    reason: 'Wrong custom password',
    ip: clientIP
  });

  return res.status(401).json({
    success: false,
    error: 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng'
  });
});

// Enhanced Change password endpoint with validation
app.post('/auth/change-password', (req, res) => {
  const { userId, newPassword, currentPassword } = req.body;
  const clientIP = req.ip || req.connection.remoteAddress;

  console.log(`üîÑ Password change request for user: ${userId} from IP: ${clientIP}`);

  // Input validation
  if (!userId || !newPassword) {
    logSecurityEvent('PASSWORD_CHANGE_FAILED', userId, {
      reason: 'Missing required fields',
      ip: clientIP
    });

    return res.status(400).json({
      success: false,
      error: 'userId v√† newPassword l√† b·∫Øt bu·ªôc'
    });
  }

  const user = mockUsers.find(u => u.id === userId);
  if (!user) {
    logSecurityEvent('PASSWORD_CHANGE_FAILED', userId, {
      reason: 'User not found',
      ip: clientIP
    });

    return res.status(404).json({
      success: false,
      error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng'
    });
  }

  // Validate new password
  const passwordValidation = validatePassword(newPassword);
  if (!passwordValidation.isValid) {
    logSecurityEvent('PASSWORD_CHANGE_FAILED', userId, {
      reason: 'Password validation failed',
      errors: passwordValidation.errors,
      ip: clientIP
    });

    return res.status(400).json({
      success: false,
      error: passwordValidation.errors.join(', ')
    });
  }

  // Check if user is trying to set the same password as current (for users who already changed)
  const currentPasswordInfo = userPasswords.get(userId);
  if (currentPasswordInfo && currentPasswordInfo.password === newPassword) {
    logSecurityEvent('PASSWORD_CHANGE_FAILED', userId, {
      reason: 'Same as current password',
      ip: clientIP
    });

    return res.status(400).json({
      success: false,
      error: 'M·∫≠t kh·∫©u m·ªõi ph·∫£i kh√°c m·∫≠t kh·∫©u hi·ªán t·∫°i'
    });
  }

  // Store new password securely
  userPasswords.set(userId, {
    password: newPassword,
    changed: true,
    changedAt: new Date().toISOString(),
    changedFromIP: clientIP
  });

  // Update user record
  const userIndex = mockUsers.findIndex(u => u.id === userId);
  if (userIndex !== -1) {
    mockUsers[userIndex].password_changed = true;
  }

  logSecurityEvent('PASSWORD_CHANGED', userId, {
    userName: user.name,
    email: user.email,
    ip: clientIP
  });

  console.log(`‚úÖ Password changed successfully for user: ${user.name}`);

  res.json({
    success: true,
    message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng',
    data: {
      user: {
        ...user,
        password_changed: true
      }
    }
  });
});

// Security audit endpoint (admin only)
app.get('/auth/security-log', (req, res) => {
  const { adminPassword } = req.query;

  if (adminPassword !== ADMIN_MASTER_PASSWORD) {
    return res.status(403).json({
      success: false,
      error: 'Unauthorized access'
    });
  }

  res.json({
    success: true,
    data: {
      logs: securityLog.slice(-50), // Last 50 events
      totalEvents: securityLog.length
    }
  });
});

// Password validation endpoint
app.post('/auth/validate-password', (req, res) => {
  const { password } = req.body;

  const validation = validatePassword(password);

  res.json({
    success: true,
    data: {
      isValid: validation.isValid,
      errors: validation.errors,
      requirements: [
        '√çt nh·∫•t 6 k√Ω t·ª±',
        'Kh√¥ng ƒë∆∞·ª£c l√† m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh (123456)',
        'Kh√¥ng qu√° 50 k√Ω t·ª±'
      ]
    }
  });
});

// Error handling
app.use((err, req, res, next) => {
  console.error('‚ùå Server error:', err);
  res.status(500).json({
    success: false,
    error: 'Internal server error',
    message: err.message
  });
});

// 404 handler
app.use('*', (req, res) => {
  console.log('‚ùì 404 - Route not found:', req.method, req.originalUrl);
  res.status(404).json({
    success: false,
    error: 'Endpoint not found',
    path: req.originalUrl,
    method: req.method
  });
});

// Start server
app.listen(PORT, () => {
  console.log(`üöÄ Mock API Server running on http://localhost:${PORT}`);
  console.log(`üìã Available endpoints:`);
  console.log(`   GET  /health`);
  console.log(`   GET  /tasks`);
  console.log(`   GET  /tasks/manager-view`);
  console.log(`   GET  /tasks/:id`);
  console.log(`   GET  /users`);
  console.log(`   GET  /users/:id`);
  console.log(`   GET  /teams`);
  console.log(`   GET  /teams/:id`);
  console.log(`   POST /auth/login`);
});

module.exports = app;
