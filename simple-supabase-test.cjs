const { chromium } = require('playwright');

(async () => {
  console.log('üöÄ SIMPLE SUPABASE MIGRATION TEST');
  console.log('='.repeat(80));
  console.log('üìã Testing Supabase integration and UI improvements');
  console.log('='.repeat(80));
  
  const browser = await chromium.launch({ 
    headless: false,
    slowMo: 1000,
    args: ['--disable-web-security', '--disable-features=VizDisplayCompositor']
  });
  
  const page = await browser.newPage();
  
  // Test results tracking
  const testResults = {
    step1_pageLoad: false,
    step2_authSetup: false,
    step3_tasksPageAccess: false,
    step4_loadingImprovement: false,
    step5_uiInteraction: false,
    step6_supabaseConfig: false
  };
  
  let testStartTime = Date.now();
  
  try {
    // ==================== B∆Ø·ªöC 1: PAGE LOAD TEST ====================
    console.log('\nüìã B∆Ø·ªöC 1: PAGE LOAD TEST - Ki·ªÉm tra t·∫£i trang');
    console.log('-'.repeat(60));
    
    const loadStart = Date.now();
    
    await page.goto('http://localhost:8088/login', { 
      waitUntil: 'networkidle',
      timeout: 30000 
    });
    
    const loadEnd = Date.now();
    const loadTime = loadEnd - loadStart;
    
    testResults.step1_pageLoad = loadTime < 10000; // 10 seconds threshold
    
    console.log(testResults.step1_pageLoad ? 
      '‚úÖ TH√ÄNH C√îNG: Trang load nhanh' : 
      '‚ùå TH·∫§T B·∫†I: Trang load ch·∫≠m'
    );
    console.log(`üìä Th·ªùi gian load: ${loadTime}ms`);
    
    // ==================== B∆Ø·ªöC 2: AUTH SETUP ====================
    console.log('\nüìã B∆Ø·ªöC 2: AUTH SETUP - Thi·∫øt l·∫≠p authentication');
    console.log('-'.repeat(60));
    
    // Setup fake session for testing
    const authSetup = await page.evaluate(() => {
      try {
        const fakeUser = {
          id: '1b',
          name: 'Kh·ªïng ƒê·ª©c M·∫°nh',
          email: 'manh.khong@example.com',
          role: 'retail_director',
          team_id: '1',
          location: 'H√† N·ªôi',
          department: 'B√°n l·∫ª',
          department_type: 'retail',
          position: 'Tr∆∞·ªüng ph√≤ng',
          status: 'active',
          password_changed: true
        };
        
        localStorage.setItem('currentUser', JSON.stringify(fakeUser));
        localStorage.setItem('authToken', 'fake-auth-token');
        localStorage.setItem('loginType', 'standard');
        
        return { success: true, user: fakeUser };
      } catch (error) {
        return { success: false, error: error.message };
      }
    });
    
    testResults.step2_authSetup = authSetup.success;
    
    console.log(testResults.step2_authSetup ? 
      '‚úÖ TH√ÄNH C√îNG: Auth setup ho√†n t·∫•t' : 
      '‚ùå TH·∫§T B·∫†I: Auth setup th·∫•t b·∫°i'
    );
    console.log(`üìä User: ${authSetup.user?.name}`);
    
    // ==================== B∆Ø·ªöC 3: TASKS PAGE ACCESS ====================
    console.log('\nüìã B∆Ø·ªöC 3: TASKS PAGE ACCESS - Truy c·∫≠p trang c√¥ng vi·ªác');
    console.log('-'.repeat(60));
    
    const tasksLoadStart = Date.now();
    
    await page.goto('http://localhost:8088/tasks', { 
      waitUntil: 'networkidle',
      timeout: 30000 
    });
    
    // Wait for page to stabilize
    await page.waitForTimeout(3000);
    
    const tasksLoadEnd = Date.now();
    const tasksLoadTime = tasksLoadEnd - tasksLoadStart;
    
    const tasksPageCheck = await page.evaluate(() => {
      const currentUrl = window.location.href;
      const isOnTasksPage = currentUrl.includes('/tasks');
      const hasButtons = document.querySelectorAll('button').length;
      const hasTasksContent = document.body.innerText.includes('C√¥ng vi·ªác');
      
      return {
        isOnTasksPage,
        hasButtons,
        hasTasksContent,
        currentUrl,
        bodyText: document.body.innerText.substring(0, 500)
      };
    });
    
    testResults.step3_tasksPageAccess = tasksPageCheck.isOnTasksPage && 
                                        tasksPageCheck.hasButtons > 0;
    
    console.log(testResults.step3_tasksPageAccess ? 
      '‚úÖ TH√ÄNH C√îNG: Truy c·∫≠p trang tasks th√†nh c√¥ng' : 
      '‚ùå TH·∫§T B·∫†I: Kh√¥ng th·ªÉ truy c·∫≠p trang tasks'
    );
    console.log(`üìä Th·ªùi gian load tasks: ${tasksLoadTime}ms`);
    console.log(`üìä S·ªë buttons: ${tasksPageCheck.hasButtons}`);
    
    // ==================== B∆Ø·ªöC 4: LOADING IMPROVEMENT TEST ====================
    console.log('\nüìã B∆Ø·ªöC 4: LOADING IMPROVEMENT TEST - Ki·ªÉm tra c·∫£i thi·ªán loading');
    console.log('-'.repeat(60));
    
    const loadingCheck = await page.evaluate(() => {
      // Check for blocking loading screens (exclude background elements with negative z-index)
      const blockingLoaders = Array.from(document.querySelectorAll('.fixed.inset-0, [class*="LoadingScreen"]'))
        .filter(el => {
          const style = getComputedStyle(el);
          const zIndex = parseInt(style.zIndex) || 0;
          return style.display !== 'none' &&
                 style.visibility !== 'hidden' &&
                 style.opacity !== '0' &&
                 zIndex >= 0; // Exclude background elements with negative z-index
        });
      
      // Check for inline loading spinners
      const inlineLoaders = document.querySelectorAll('[class*="InlineLoadingSpinner"], .animate-spin');
      
      // Check for loading text
      const hasLoadingText = document.body.innerText.includes('ƒêang kh·ªüi t·∫°o') ||
                            document.body.innerText.includes('ƒêang t·∫£i');
      
      // Check if UI is interactive
      const interactiveButtons = Array.from(document.querySelectorAll('button'))
        .filter(btn => !btn.disabled && btn.offsetParent !== null);
      
      return {
        blockingLoadersCount: blockingLoaders.length,
        inlineLoadersCount: inlineLoaders.length,
        hasLoadingText,
        interactiveButtonsCount: interactiveButtons.length,
        isUIInteractive: interactiveButtons.length > 0 && blockingLoaders.length === 0
      };
    });
    
    testResults.step4_loadingImprovement = loadingCheck.isUIInteractive && 
                                           loadingCheck.blockingLoadersCount === 0;
    
    console.log(testResults.step4_loadingImprovement ? 
      '‚úÖ TH√ÄNH C√îNG: Loading improvement ho·∫°t ƒë·ªông' : 
      '‚ùå TH·∫§T B·∫†I: V·∫´n c√≥ blocking loading'
    );
    console.log('üìä Loading check:', JSON.stringify(loadingCheck, null, 2));
    
    // ==================== B∆Ø·ªöC 5: UI INTERACTION TEST ====================
    console.log('\nüìã B∆Ø·ªöC 5: UI INTERACTION TEST - Ki·ªÉm tra t∆∞∆°ng t√°c UI');
    console.log('-'.repeat(60));
    
    let uiInteractionSuccess = false;
    
    try {
      // Test button interactions
      const buttons = await page.locator('button').filter({ 
        hasText: /T·∫°o|L√†m m·ªõi|Xu·∫•t|T·∫£i l·∫°i/ 
      }).all();
      
      console.log(`üìä T√¨m th·∫•y ${buttons.length} buttons c√≥ th·ªÉ t∆∞∆°ng t√°c`);
      
      if (buttons.length > 0) {
        // Test hover effect
        await buttons[0].hover();
        await page.waitForTimeout(500);
        
        // Test if button is clickable (don't actually click to avoid side effects)
        const isClickable = await buttons[0].isEnabled();
        
        uiInteractionSuccess = isClickable;
        console.log(`‚úÖ Button clickable: ${isClickable}`);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è UI interaction test error:', error.message);
    }
    
    testResults.step5_uiInteraction = uiInteractionSuccess;
    
    console.log(testResults.step5_uiInteraction ? 
      '‚úÖ TH√ÄNH C√îNG: UI t∆∞∆°ng t√°c t·ªët' : 
      '‚ùå TH·∫§T B·∫†I: UI kh√¥ng t∆∞∆°ng t√°c ƒë∆∞·ª£c'
    );
    
    // ==================== B∆Ø·ªöC 6: SUPABASE CONFIG TEST ====================
    console.log('\nüìã B∆Ø·ªöC 6: SUPABASE CONFIG TEST - Ki·ªÉm tra c·∫•u h√¨nh Supabase');
    console.log('-'.repeat(60));
    
    const supabaseConfigTest = await page.evaluate(async () => {
      try {
        // Check if Supabase service is available
        const hasSupabaseService = typeof window.SupabaseService !== 'undefined';
        
        // Check localStorage for Supabase config
        const supabaseConfig = localStorage.getItem('supabaseConfig');
        const hasStoredConfig = !!supabaseConfig;
        
        // Try to access Supabase via dynamic import
        let importSuccess = false;
        try {
          const module = await import('/src/services/SupabaseService.ts');
          importSuccess = !!module.SupabaseService;
        } catch (e) {
          importSuccess = false;
        }
        
        return {
          success: hasStoredConfig || importSuccess,
          hasSupabaseService,
          hasStoredConfig,
          importSuccess,
          configData: supabaseConfig ? JSON.parse(supabaseConfig) : null
        };
      } catch (error) {
        return {
          success: false,
          error: error.message
        };
      }
    });
    
    testResults.step6_supabaseConfig = supabaseConfigTest.success;
    
    console.log(testResults.step6_supabaseConfig ? 
      '‚úÖ TH√ÄNH C√îNG: Supabase config c√≥ s·∫µn' : 
      '‚ùå TH·∫§T B·∫†I: Supabase config kh√¥ng c√≥'
    );
    console.log('üìä Supabase config test:', JSON.stringify(supabaseConfigTest, null, 2));
    
  } catch (error) {
    console.error('‚ùå CRITICAL ERROR trong qu√° tr√¨nh test:', error.message);
    console.error('Stack trace:', error.stack);
  } finally {
    // ==================== FINAL REPORT ====================
    const testEndTime = Date.now();
    const testDuration = Math.round((testEndTime - testStartTime) / 1000);
    
    console.log('\n' + '='.repeat(80));
    console.log('üìä B√ÅO C√ÅO T·ªîNG K·∫æT SIMPLE SUPABASE TEST');
    console.log('='.repeat(80));
    console.log(`‚è±Ô∏è  Th·ªùi gian test: ${testDuration} gi√¢y`);
    console.log(`üìÖ Ho√†n th√†nh l√∫c: ${new Date().toLocaleString('vi-VN')}`);
    console.log('='.repeat(80));
    
    const allResults = [
      { step: 1, name: 'Page Load Performance', success: testResults.step1_pageLoad },
      { step: 2, name: 'Authentication Setup', success: testResults.step2_authSetup },
      { step: 3, name: 'Tasks Page Access', success: testResults.step3_tasksPageAccess },
      { step: 4, name: 'Loading Improvement', success: testResults.step4_loadingImprovement },
      { step: 5, name: 'UI Interaction', success: testResults.step5_uiInteraction },
      { step: 6, name: 'Supabase Configuration', success: testResults.step6_supabaseConfig }
    ];
    
    let successCount = 0;
    allResults.forEach((result) => {
      const status = result.success ? '‚úÖ PASS' : '‚ùå FAIL';
      console.log(`${result.step.toString().padStart(2, '0')}. ${result.name.padEnd(25, ' ')}: ${status}`);
      if (result.success) successCount++;
    });
    
    console.log('\n' + '='.repeat(80));
    console.log(`üéØ K·∫æT QU·∫¢ T·ªîNG TH·ªÇ: ${successCount}/${allResults.length} tests passed (${Math.round(successCount/allResults.length*100)}%)`);
    
    if (successCount === allResults.length) {
      console.log('üéâ HO√ÄN H·∫¢O! T·∫§T C·∫¢ TESTS ƒê·ªÄU PASS!');
      console.log('‚úÖ H·ªá th·ªëng ho·∫°t ƒë·ªông ho√†n h·∫£o!');
    } else if (successCount >= 4) {
      console.log('üéä T·ªêT! H·∫¶U H·∫æT TESTS PASS!');
      console.log('‚úÖ H·ªá th·ªëng ho·∫°t ƒë·ªông t·ªët v·ªõi m·ªôt s·ªë c·∫£i thi·ªán nh·ªè!');
    } else if (successCount >= 2) {
      console.log('üëç TRUNG B√åNH! C√ÅC CH·ª®C NƒÇNG C∆† B·∫¢N HO·∫†T ƒê·ªòNG!');
      console.log('‚ö†Ô∏è C·∫ßn c·∫£i thi·ªán m·ªôt s·ªë t√≠nh nƒÉng!');
    } else {
      console.log('‚ö†Ô∏è C·∫¶N KH·∫ÆC PH·ª§C! NHI·ªÄU V·∫§N ƒê·ªÄ!');
      console.log('‚ùå H·ªá th·ªëng c·∫ßn ƒë∆∞·ª£c ki·ªÉm tra v√† s·ª≠a ch·ªØa!');
    }
    
    console.log('\nüìä PH√ÇN T√çCH CHI TI·∫æT:');
    console.log(`‚ö° Performance: ${testResults.step1_pageLoad ? 'GOOD' : 'NEEDS IMPROVEMENT'}`);
    console.log(`üîê Authentication: ${testResults.step2_authSetup ? 'OK' : 'FAIL'}`);
    console.log(`üìã Tasks Access: ${testResults.step3_tasksPageAccess ? 'OK' : 'FAIL'}`);
    console.log(`üîÑ Loading Fix: ${testResults.step4_loadingImprovement ? 'FIXED' : 'STILL BLOCKING'}`);
    console.log(`üé® UI Interaction: ${testResults.step5_uiInteraction ? 'RESPONSIVE' : 'ISSUES'}`);
    console.log(`üóÑÔ∏è  Supabase Config: ${testResults.step6_supabaseConfig ? 'AVAILABLE' : 'MISSING'}`);
    
    console.log('\n' + '='.repeat(80));
    console.log('üèÅ SIMPLE SUPABASE TEST HO√ÄN TH√ÄNH');
    console.log('='.repeat(80));
    
    // ƒê·ª£i 10 gi√¢y ƒë·ªÉ quan s√°t k·∫øt qu·∫£
    await page.waitForTimeout(10000);
    
    await browser.close();
  }
})();
