import React, { useState, useEffect, ReactNode } from 'react';
import { Task } from '../components/tasks/types/TaskTypes';
import { useToast } from '../hooks/use-toast';
import { useAuth } from './AuthContext';
import { TaskDataContext, TaskDataContextType, TaskFilters } from './TaskContext';
import { getTasks, createTask, updateTask, deleteTask as deleteTaskApi } from '@/services/api';

// Provider component s·ª≠ d·ª•ng API th·∫≠t
export const ApiTaskDataProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [filteredTasks, setFilteredTasks] = useState<Task[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [filters, setFilters] = useState<TaskFilters>({});
  const { toast } = useToast();
  const { currentUser } = useAuth();

  // L·∫•y d·ªØ li·ªáu t·ª´ API
  const loadTasks = async () => {
    try {
      setIsLoading(true);
      console.log('üåê ƒêang t·∫£i tasks t·ª´ API...');
      
      const response = await getTasks();
      
      if (response.success && response.data) {
        console.log(`‚úÖ ƒê√£ t·∫£i ${response.count} tasks t·ª´ API`);
        setTasks(response.data);
        setFilteredTasks(response.data);
      } else {
        console.error('‚ùå L·ªói khi t·∫£i tasks:', response.error);
        toast({
          title: "L·ªói",
          description: response.error || "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu c√¥ng vi·ªác",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫£i tasks:', error);
      toast({
        title: "L·ªói",
        description: "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Load d·ªØ li·ªáu ban ƒë·∫ßu
  useEffect(() => {
    loadTasks();
  }, []);

  // Th√™m c√¥ng vi·ªác m·ªõi
  const addTask = async (taskData: Partial<Task> & Pick<Task, 'title' | 'description' | 'type' | 'date' | 'status'>): Promise<Task> => {
    if (!currentUser) {
      throw new Error("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m c√¥ng vi·ªác m·ªõi");
    }

    const newTaskData = {
      ...taskData,
      progress: taskData.progress || 0,
      user_id: currentUser.id,
      user_name: currentUser.name,
      team_id: currentUser.team_id || '',
      location: currentUser.location || '',
      assignedTo: taskData.assignedTo || currentUser.id,
      time: taskData.time || '',
      isNew: true
    };

    try {
      console.log('üåê ƒêang t·∫°o task m·ªõi qua API...');
      const response = await createTask(newTaskData);
      
      if (response.success && response.data) {
        console.log('‚úÖ ƒê√£ t·∫°o task th√†nh c√¥ng:', response.data);
        
        // C·∫≠p nh·∫≠t state local
        const newTask = response.data;
        setTasks(prevTasks => [...prevTasks, newTask]);
        
        toast({
          title: "Th√†nh c√¥ng",
          description: "ƒê√£ th√™m c√¥ng vi·ªác m·ªõi"
        });
        
        return newTask;
      } else {
        throw new Error(response.error || "Kh√¥ng th·ªÉ t·∫°o c√¥ng vi·ªác m·ªõi");
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o task:', error);
      toast({
        title: "L·ªói",
        description: error instanceof Error ? error.message : "Kh√¥ng th·ªÉ t·∫°o c√¥ng vi·ªác m·ªõi",
        variant: "destructive"
      });
      throw error;
    }
  };

  // C·∫≠p nh·∫≠t c√¥ng vi·ªác
  const updateTaskData = async (taskId: string, updates: Partial<Task>): Promise<void> => {
    try {
      console.log('üåê ƒêang c·∫≠p nh·∫≠t task qua API...');
      const response = await updateTask(taskId, updates);
      
      if (response.success && response.data) {
        console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t task th√†nh c√¥ng');
        
        // C·∫≠p nh·∫≠t state local
        setTasks(prevTasks => 
          prevTasks.map(task => 
            task.id === taskId ? { ...task, ...response.data } : task
          )
        );
        
        toast({
          title: "Th√†nh c√¥ng",
          description: "ƒê√£ c·∫≠p nh·∫≠t c√¥ng vi·ªác"
        });
      } else {
        throw new Error(response.error || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t c√¥ng vi·ªác");
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t task:', error);
      toast({
        title: "L·ªói",
        description: error instanceof Error ? error.message : "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t c√¥ng vi·ªác",
        variant: "destructive"
      });
      throw error;
    }
  };

  // X√≥a c√¥ng vi·ªác
  const deleteTaskData = async (taskId: string): Promise<void> => {
    try {
      console.log('üåê ƒêang x√≥a task qua API...');
      const response = await deleteTaskApi(taskId);
      
      if (response.success) {
        console.log('‚úÖ ƒê√£ x√≥a task th√†nh c√¥ng');
        
        // C·∫≠p nh·∫≠t state local
        setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));
        
        toast({
          title: "Th√†nh c√¥ng",
          description: "ƒê√£ x√≥a c√¥ng vi·ªác"
        });
      } else {
        throw new Error(response.error || "Kh√¥ng th·ªÉ x√≥a c√¥ng vi·ªác");
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi x√≥a task:', error);
      toast({
        title: "L·ªói",
        description: error instanceof Error ? error.message : "Kh√¥ng th·ªÉ x√≥a c√¥ng vi·ªác",
        variant: "destructive"
      });
      throw error;
    }
  };

  // L√†m m·ªõi d·ªØ li·ªáu
  const refreshTasks = async (): Promise<void> => {
    await loadTasks();
  };

  // Filter tasks
  const filterTasks = (newFilters: TaskFilters) => {
    setFilters(newFilters);
    let filtered = [...tasks];

    if (newFilters.status) {
      filtered = filtered.filter(task => task.status === newFilters.status);
    }
    if (newFilters.type) {
      filtered = filtered.filter(task => task.type === newFilters.type);
    }
    if (newFilters.search) {
      const search = newFilters.search.toLowerCase();
      filtered = filtered.filter(task =>
        task.title.toLowerCase().includes(search) ||
        task.description.toLowerCase().includes(search)
      );
    }
    if (newFilters.assignedTo) {
      filtered = filtered.filter(task => task.assignedTo === newFilters.assignedTo);
    }

    setFilteredTasks(filtered);
  };

  // Get task by ID
  const getTaskById = (id: string): Task | undefined => {
    return tasks.find(task => task.id === id);
  };

  // Update task status
  const updateTaskStatus = (id: string, status: Task['status']) => {
    updateTaskData(id, { status });
  };

  // Context value
  const contextValue: TaskDataContextType = {
    tasks,
    filteredTasks,
    setTasks,
    isLoading,
    filters,
    addTask,
    updateTask: updateTaskData,
    deleteTask: deleteTaskData,
    refreshTasks,
    filterTasks,
    getTaskById,
    updateTaskStatus
  };

  return (
    <TaskDataContext.Provider value={contextValue}>
      {children}
    </TaskDataContext.Provider>
  );
};
