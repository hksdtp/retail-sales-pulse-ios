const { chromium } = require('playwright');

async function testFinalSuccess() {
    console.log('üéâ Testing Final Success - Tasks Display...\n');
    
    const browser = await chromium.launch({ 
        headless: false,
        slowMo: 500 
    });
    
    const context = await browser.newContext();
    const page = await context.newPage();
    
    // Capture task-related console logs
    page.on('console', msg => {
        const text = msg.text();
        if (text.includes('Filtered personalTasks') || text.includes('Data sources')) {
            console.log(`üìù ${msg.type().toUpperCase()}: ${text}`);
        }
    });
    
    try {
        console.log('üöÄ Step 1: Quick login and navigate to tasks...');
        await page.goto('http://localhost:8088/login', { 
            waitUntil: 'networkidle',
            timeout: 30000 
        });
        
        await page.waitForTimeout(2000);
        
        // Quick login
        const allSelects = await page.$$('select');
        if (allSelects.length >= 2) {
            const userSelect = allSelects[1];
            const options = await userSelect.$$eval('option', opts => 
                opts.map(opt => ({ value: opt.value, text: opt.textContent }))
            );
            
            const manhOption = options.find(opt => opt.text.includes('Kh·ªïng ƒê·ª©c M·∫°nh'));
            if (manhOption) {
                await userSelect.selectOption(manhOption.value);
                console.log(`‚úÖ Selected: ${manhOption.text}`);
            }
        }
        
        const passwordInput = await page.$('input[type="password"]');
        await passwordInput.fill('123456');
        
        const submitButton = await page.$('button[type="submit"]');
        await submitButton.click();
        
        console.log('‚è≥ Waiting for login...');
        await page.waitForTimeout(3000);
        
        // Navigate to tasks
        console.log('üîÑ Navigating to tasks page...');
        await page.goto('http://localhost:8088/tasks', { 
            waitUntil: 'networkidle',
            timeout: 10000 
        });
        
        await page.waitForTimeout(5000);
        
        console.log('üîç Step 2: Analyzing task content...');
        
        // Get all task-related content
        const taskAnalysis = await page.evaluate(() => {
            const bodyText = document.body.textContent || '';
            
            // Look for actual task titles that we saw in the logs
            const actualTaskKeywords = [
                'ƒê√ÄO T·∫†O AI',
                'X·ª≠ l√Ω ƒë∆°n h√†ng',
                'B√°o gi√°',
                'L√™n ƒë∆°n',
                'Someser',
                'Khai S∆°n',
                'Nguy·ªÖn M·∫°nh Linh',
                'Nguy·ªÖn Th·ªã Th·∫£o'
            ];
            
            // Check for task status indicators
            const statusKeywords = [
                'CH·ªú',
                'L√ÄM',
                'HO√ÄN TH√ÄNH',
                'CAO', // Priority
                'TH·∫§P'
            ];
            
            // Check for UI elements
            const uiElements = [
                'C√¥ng vi·ªác c·ªßa t√¥i',
                'C·ªßa t√¥i',
                'C·ªßa nh√≥m',
                'Th√†nh vi√™n',
                'Chung',
                'L·ªçc theo th·ªùi gian',
                'T·∫•t c·∫£',
                'B·ªô l·ªçc'
            ];
            
            const results = {
                actualTasks: [],
                statusIndicators: [],
                uiElements: [],
                totalTextLength: bodyText.length,
                hasTaskTable: false,
                hasTaskRows: false
            };
            
            // Check for actual task content
            actualTaskKeywords.forEach(keyword => {
                if (bodyText.includes(keyword)) {
                    results.actualTasks.push(keyword);
                }
            });
            
            // Check for status indicators
            statusKeywords.forEach(keyword => {
                if (bodyText.includes(keyword)) {
                    results.statusIndicators.push(keyword);
                }
            });
            
            // Check for UI elements
            uiElements.forEach(keyword => {
                if (bodyText.includes(keyword)) {
                    results.uiElements.push(keyword);
                }
            });
            
            // Check for table structure
            results.hasTaskTable = !!document.querySelector('table, [role="table"], .table');
            results.hasTaskRows = document.querySelectorAll('tr, [role="row"], .task-row, .task-item').length > 0;
            
            // Get sample of visible text
            results.sampleText = bodyText.substring(0, 1000);
            
            return results;
        });
        
        console.log('\nüìä TASK CONTENT ANALYSIS:');
        console.log(`üìÑ Total text length: ${taskAnalysis.totalTextLength}`);
        console.log(`üìã Has task table: ${taskAnalysis.hasTaskTable}`);
        console.log(`üìù Has task rows: ${taskAnalysis.hasTaskRows}`);
        
        console.log('\n‚úÖ ACTUAL TASKS FOUND:');
        if (taskAnalysis.actualTasks.length > 0) {
            taskAnalysis.actualTasks.forEach((task, index) => {
                console.log(`   ${index + 1}. ${task}`);
            });
        } else {
            console.log('   ‚ùå No actual task content found');
        }
        
        console.log('\nüéØ STATUS INDICATORS:');
        if (taskAnalysis.statusIndicators.length > 0) {
            taskAnalysis.statusIndicators.forEach((status, index) => {
                console.log(`   ${index + 1}. ${status}`);
            });
        } else {
            console.log('   ‚ùå No status indicators found');
        }
        
        console.log('\nüé® UI ELEMENTS:');
        if (taskAnalysis.uiElements.length > 0) {
            taskAnalysis.uiElements.forEach((element, index) => {
                console.log(`   ${index + 1}. ${element}`);
            });
        } else {
            console.log('   ‚ùå No UI elements found');
        }
        
        console.log('\nüìÑ SAMPLE TEXT (first 500 chars):');
        console.log(`"${taskAnalysis.sampleText.substring(0, 500)}"`);
        
        // Take final screenshot
        await page.screenshot({ 
            path: 'retail-sales-pulse-ios/test-final-success.png',
            fullPage: true 
        });
        console.log('\nüì∏ Final screenshot saved');
        
        // Final verdict
        console.log('\nüéØ FINAL VERDICT:');
        
        const hasTaskContent = taskAnalysis.actualTasks.length > 0;
        const hasStatusIndicators = taskAnalysis.statusIndicators.length > 0;
        const hasUIElements = taskAnalysis.uiElements.length > 0;
        const hasStructure = taskAnalysis.hasTaskTable || taskAnalysis.hasTaskRows;
        
        if (hasTaskContent && hasStatusIndicators && hasUIElements && hasStructure) {
            console.log('üéâ COMPLETE SUCCESS! Menu "C√¥ng vi·ªác c·ªßa t√¥i" is fully working!');
            console.log('‚úÖ Tasks are loading and displaying properly');
            console.log('‚úÖ UI elements are present');
            console.log('‚úÖ Task content is visible');
            console.log('‚úÖ Status indicators are working');
            console.log('‚úÖ Table structure is present');
        } else if (hasTaskContent && hasUIElements) {
            console.log('üéä MAJOR SUCCESS! Menu "C√¥ng vi·ªác c·ªßa t√¥i" is working!');
            console.log('‚úÖ Tasks are loading and displaying');
            console.log('‚úÖ UI elements are present');
            if (!hasStatusIndicators) console.log('‚ö†Ô∏è  Status indicators could be improved');
            if (!hasStructure) console.log('‚ö†Ô∏è  Table structure could be improved');
        } else if (hasUIElements) {
            console.log('‚úÖ PARTIAL SUCCESS! Menu loads but task content needs work');
            console.log('‚úÖ UI structure is working');
            console.log('‚ùå Task content display needs improvement');
        } else {
            console.log('‚ùå STILL ISSUES: Menu not working properly');
        }
        
        // Summary stats
        console.log('\nüìä SUMMARY STATS:');
        console.log(`   Task content items: ${taskAnalysis.actualTasks.length}`);
        console.log(`   Status indicators: ${taskAnalysis.statusIndicators.length}`);
        console.log(`   UI elements: ${taskAnalysis.uiElements.length}`);
        console.log(`   Page text length: ${taskAnalysis.totalTextLength} chars`);
        console.log(`   Has table structure: ${hasStructure}`);
        
    } catch (error) {
        console.error('‚ùå Error during testing:', error.message);
        await page.screenshot({ 
            path: 'retail-sales-pulse-ios/test-final-success-error.png',
            fullPage: true 
        });
    }
    
    await browser.close();
    console.log('\n‚úÖ Final success testing completed!');
}

// Run the test
testFinalSuccess().catch(console.error);
