#!/usr/bin/env node

/**
 * Script Import D·ªØ Li·ªáu v√†o Supabase
 * D·ª± √°n: retail-sales-pulse-ios
 * Ng√†y: 2025-06-29
 */

const fs = require('fs');

// C·∫•u h√¨nh Supabase
const SUPABASE_CONFIG = {
  url: 'https://fnakxavwxubnbucfoujd.supabase.co',
  anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZuYWt4YXZ3eHVibmJ1Y2ZvdWpkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzU0NzI4NzQsImV4cCI6MjA1MTA0ODg3NH0.VGvp7zOmOdJOKOhJOqOqOqOqOqOqOqOqOqOqOqOqOqO'
};

/**
 * H√†m ghi log v·ªõi timestamp v√† emoji
 */
function log(message, type = 'info') {
  const timestamp = new Date().toLocaleString('vi-VN');
  const prefix = {
    info: 'üìã',
    success: '‚úÖ',
    error: '‚ùå',
    warning: '‚ö†Ô∏è',
    start: 'üöÄ',
    finish: 'üéâ'
  }[type] || 'üìã';
  
  console.log(`${prefix} [${timestamp}] ${message}`);
}

/**
 * Ki·ªÉm tra Supabase connection
 */
async function kiemTraKetNoi() {
  try {
    log('ƒêang ki·ªÉm tra k·∫øt n·ªëi Supabase...', 'info');
    
    // Import Supabase client
    const { createClient } = await import('@supabase/supabase-js');
    const supabase = createClient(SUPABASE_CONFIG.url, SUPABASE_CONFIG.anonKey);
    
    // Test connection
    const { data, error } = await supabase
      .from('users')
      .select('count', { count: 'exact', head: true });
    
    if (error) {
      log(`L·ªói k·∫øt n·ªëi Supabase: ${error.message}`, 'error');
      return null;
    }
    
    log('K·∫øt n·ªëi Supabase th√†nh c√¥ng!', 'success');
    return supabase;
    
  } catch (error) {
    log(`L·ªói khi import Supabase client: ${error.message}`, 'error');
    log('H√£y ƒë·∫£m b·∫£o ƒë√£ c√†i ƒë·∫∑t: npm install @supabase/supabase-js', 'warning');
    return null;
  }
}

/**
 * ƒê·ªçc d·ªØ li·ªáu ƒë√£ chuy·ªÉn ƒë·ªïi
 */
function docDuLieuChuyenDoi() {
  try {
    log('ƒêang ƒë·ªçc d·ªØ li·ªáu ƒë√£ chuy·ªÉn ƒë·ªïi...', 'info');
    
    const filePath = './supabase-data-converted.json';
    if (!fs.existsSync(filePath)) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y file: ${filePath}. H√£y ch·∫°y migration script tr∆∞·ªõc.`);
    }
    
    const duLieuTho = fs.readFileSync(filePath, 'utf8');
    const duLieu = JSON.parse(duLieuTho);
    
    log(`ƒê√£ ƒë·ªçc d·ªØ li·ªáu: ${duLieu.teams.length} teams, ${duLieu.users.length} users, ${duLieu.tasks.length} tasks`, 'success');
    
    return duLieu;
  } catch (error) {
    log(`L·ªói khi ƒë·ªçc d·ªØ li·ªáu: ${error.message}`, 'error');
    throw error;
  }
}

/**
 * Import Teams v√†o Supabase
 */
async function importTeams(supabase, teams) {
  try {
    log(`ƒêang import ${teams.length} teams v√†o Supabase...`, 'info');
    
    // X√≥a d·ªØ li·ªáu c≈©
    const { error: deleteError } = await supabase
      .from('teams')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000'); // Delete all
    
    if (deleteError) {
      log(`C·∫£nh b√°o khi x√≥a teams c≈©: ${deleteError.message}`, 'warning');
    }
    
    // Insert teams theo batch
    const batchSize = 10;
    let importedCount = 0;
    
    for (let i = 0; i < teams.length; i += batchSize) {
      const batch = teams.slice(i, i + batchSize);
      
      const { data, error } = await supabase
        .from('teams')
        .insert(batch);
      
      if (error) {
        log(`L·ªói khi insert teams batch ${Math.floor(i/batchSize) + 1}: ${error.message}`, 'error');
        throw error;
      }
      
      importedCount += batch.length;
      log(`ƒê√£ import ${importedCount}/${teams.length} teams`, 'info');
    }
    
    log(`Import teams ho√†n th√†nh: ${importedCount} records`, 'success');
    return importedCount;
    
  } catch (error) {
    log(`L·ªói khi import teams: ${error.message}`, 'error');
    throw error;
  }
}

/**
 * Import Users v√†o Supabase
 */
async function importUsers(supabase, users) {
  try {
    log(`ƒêang import ${users.length} users v√†o Supabase...`, 'info');
    
    // X√≥a d·ªØ li·ªáu c≈©
    const { error: deleteError } = await supabase
      .from('users')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000'); // Delete all
    
    if (deleteError) {
      log(`C·∫£nh b√°o khi x√≥a users c≈©: ${deleteError.message}`, 'warning');
    }
    
    // Insert users theo batch
    const batchSize = 10;
    let importedCount = 0;
    
    for (let i = 0; i < users.length; i += batchSize) {
      const batch = users.slice(i, i + batchSize);
      
      const { data, error } = await supabase
        .from('users')
        .insert(batch);
      
      if (error) {
        log(`L·ªói khi insert users batch ${Math.floor(i/batchSize) + 1}: ${error.message}`, 'error');
        throw error;
      }
      
      importedCount += batch.length;
      log(`ƒê√£ import ${importedCount}/${users.length} users`, 'info');
    }
    
    log(`Import users ho√†n th√†nh: ${importedCount} records`, 'success');
    return importedCount;
    
  } catch (error) {
    log(`L·ªói khi import users: ${error.message}`, 'error');
    throw error;
  }
}

/**
 * Import Tasks v√†o Supabase
 */
async function importTasks(supabase, tasks) {
  try {
    log(`ƒêang import ${tasks.length} tasks v√†o Supabase...`, 'info');
    
    // X√≥a d·ªØ li·ªáu c≈©
    const { error: deleteError } = await supabase
      .from('tasks')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000'); // Delete all
    
    if (deleteError) {
      log(`C·∫£nh b√°o khi x√≥a tasks c≈©: ${deleteError.message}`, 'warning');
    }
    
    // Insert tasks theo batch
    const batchSize = 10;
    let importedCount = 0;
    
    for (let i = 0; i < tasks.length; i += batchSize) {
      const batch = tasks.slice(i, i + batchSize);
      
      const { data, error } = await supabase
        .from('tasks')
        .insert(batch);
      
      if (error) {
        log(`L·ªói khi insert tasks batch ${Math.floor(i/batchSize) + 1}: ${error.message}`, 'error');
        throw error;
      }
      
      importedCount += batch.length;
      log(`ƒê√£ import ${importedCount}/${tasks.length} tasks`, 'info');
    }
    
    log(`Import tasks ho√†n th√†nh: ${importedCount} records`, 'success');
    return importedCount;
    
  } catch (error) {
    log(`L·ªói khi import tasks: ${error.message}`, 'error');
    throw error;
  }
}

/**
 * X√°c minh d·ªØ li·ªáu sau khi import
 */
async function xacMinhDuLieu(supabase) {
  try {
    log('ƒêang x√°c minh d·ªØ li·ªáu sau import...', 'info');
    
    // ƒê·∫øm records trong t·ª´ng table
    const [usersResult, teamsResult, tasksResult] = await Promise.all([
      supabase.from('users').select('id', { count: 'exact', head: true }),
      supabase.from('teams').select('id', { count: 'exact', head: true }),
      supabase.from('tasks').select('id', { count: 'exact', head: true })
    ]);
    
    const counts = {
      users: usersResult.count || 0,
      teams: teamsResult.count || 0,
      tasks: tasksResult.count || 0
    };
    
    log('üìä K·∫øt qu·∫£ x√°c minh:', 'info');
    log(`- Users: ${counts.users} records`, 'info');
    log(`- Teams: ${counts.teams} records`, 'info');
    log(`- Tasks: ${counts.tasks} records`, 'info');
    
    // Ki·ªÉm tra m·ªôt s·ªë records c·ª• th·ªÉ
    const { data: sampleUser } = await supabase
      .from('users')
      .select('name, email, role')
      .limit(1)
      .single();
    
    if (sampleUser) {
      log(`‚úÖ Sample user: ${sampleUser.name} (${sampleUser.email}) - ${sampleUser.role}`, 'success');
    }
    
    return counts;
    
  } catch (error) {
    log(`L·ªói khi x√°c minh d·ªØ li·ªáu: ${error.message}`, 'error');
    throw error;
  }
}

/**
 * H√†m ch√≠nh th·ª±c hi·ªán import
 */
async function chayImport() {
  try {
    log('üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh Import d·ªØ li·ªáu v√†o Supabase...', 'start');
    
    // B∆∞·ªõc 1: Ki·ªÉm tra k·∫øt n·ªëi Supabase
    const supabase = await kiemTraKetNoi();
    if (!supabase) {
      throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi Supabase');
    }
    
    // B∆∞·ªõc 2: ƒê·ªçc d·ªØ li·ªáu ƒë√£ chuy·ªÉn ƒë·ªïi
    const duLieu = docDuLieuChuyenDoi();
    
    // B∆∞·ªõc 3: Import theo th·ª© t·ª± (teams -> users -> tasks)
    const teamsCount = await importTeams(supabase, duLieu.teams);
    const usersCount = await importUsers(supabase, duLieu.users);
    const tasksCount = await importTasks(supabase, duLieu.tasks);
    
    // B∆∞·ªõc 4: X√°c minh d·ªØ li·ªáu
    const verificationCounts = await xacMinhDuLieu(supabase);
    
    // T√≥m t·∫Øt k·∫øt qu·∫£
    log('üéâ Import d·ªØ li·ªáu ho√†n th√†nh th√†nh c√¥ng!', 'finish');
    log('üìä T√≥m t·∫Øt k·∫øt qu·∫£ import:', 'info');
    log(`- Teams: ${teamsCount} imported, ${verificationCounts.teams} verified`, 'info');
    log(`- Users: ${usersCount} imported, ${verificationCounts.users} verified`, 'info');
    log(`- Tasks: ${tasksCount} imported, ${verificationCounts.tasks} verified`, 'info');
    
    // Ki·ªÉm tra t√≠nh to√†n v·∫πn
    const isIntegrityOk = (
      teamsCount === verificationCounts.teams &&
      usersCount === verificationCounts.users &&
      tasksCount === verificationCounts.tasks
    );
    
    if (isIntegrityOk) {
      log('‚úÖ T√≠nh to√†n v·∫πn d·ªØ li·ªáu: OK', 'success');
    } else {
      log('‚ö†Ô∏è T√≠nh to√†n v·∫πn d·ªØ li·ªáu: C√≥ s·ª± kh√°c bi·ªát', 'warning');
    }
    
    log('', 'info');
    log('üîß B∆∞·ªõc ti·∫øp theo:', 'info');
    log('1. Ch·∫°y test ƒë·ªÉ verify ·ª©ng d·ª•ng ho·∫°t ƒë·ªông v·ªõi Supabase', 'info');
    log('2. C·∫≠p nh·∫≠t ·ª©ng d·ª•ng ƒë·ªÉ s·ª≠ d·ª•ng Supabase thay v√¨ Firebase', 'info');
    log('3. Test to√†n b·ªô ch·ª©c nƒÉng CRUD', 'info');
    
  } catch (error) {
    log(`‚ùå Import th·∫•t b·∫°i: ${error.message}`, 'error');
    console.error(error);
    process.exit(1);
  }
}

// Ch·∫°y import
chayImport();
