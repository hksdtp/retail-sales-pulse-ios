import { chromium } from 'playwright';

async function testTeamLogic() {
  console.log('üß™ Test logic team auto-selection...');
  
  const browser = await chromium.launch({ 
    headless: false,
    slowMo: 1000
  });
  
  const context = await browser.newContext();
  const page = await context.newPage();
  
  try {
    // Truy c·∫≠p trang web
    console.log('üì± Truy c·∫≠p http://localhost:8088...');
    await page.goto('http://localhost:8088');
    await page.waitForTimeout(5000);
    
    // Ch·ª•p screenshot trang ch·ªß
    await page.screenshot({ path: 'test-homepage.png', fullPage: true });
    console.log('üì∏ Screenshot trang ch·ªß: test-homepage.png');
    
    // T√¨m v√† click v√†o menu "C√¥ng vi·ªác"
    console.log('üîç T√¨m menu "C√¥ng vi·ªác"...');
    
    // Th·ª≠ nhi·ªÅu selector kh√°c nhau
    const selectors = [
      'text=C√¥ng vi·ªác',
      '[href*="tasks"]',
      'a:has-text("C√¥ng vi·ªác")',
      'nav a:has-text("C√¥ng vi·ªác")',
      '.nav-link:has-text("C√¥ng vi·ªác")'
    ];
    
    let taskMenuFound = false;
    for (const selector of selectors) {
      try {
        const element = page.locator(selector).first();
        if (await element.isVisible({ timeout: 2000 })) {
          console.log(`‚úÖ T√¨m th·∫•y menu "C√¥ng vi·ªác" v·ªõi selector: ${selector}`);
          await element.click();
          taskMenuFound = true;
          break;
        }
      } catch (e) {
        console.log(`‚ùå Kh√¥ng t√¨m th·∫•y v·ªõi selector: ${selector}`);
      }
    }
    
    if (!taskMenuFound) {
      console.log('üîç Li·ªát k√™ t·∫•t c·∫£ links c√≥ s·∫µn...');
      const links = await page.locator('a').all();
      for (let i = 0; i < Math.min(links.length, 10); i++) {
        const text = await links[i].textContent();
        const href = await links[i].getAttribute('href');
        console.log(`  Link ${i}: "${text}" -> ${href}`);
      }
    }
    
    await page.waitForTimeout(3000);
    
    // Ch·ª•p screenshot sau khi click
    await page.screenshot({ path: 'test-after-click.png', fullPage: true });
    console.log('üì∏ Screenshot sau khi click: test-after-click.png');
    
    // Ki·ªÉm tra c√°c elements li√™n quan ƒë·∫øn team
    console.log('üîç Ki·ªÉm tra elements team...');
    
    const teamElements = [
      'text=Ch·ªçn nh√≥m',
      'text=T·∫•t c·∫£ nh√≥m', 
      'text=C·ªßa nh√≥m',
      '[data-testid="team-selector"]',
      '.team-selector',
      '.team-cards'
    ];
    
    for (const selector of teamElements) {
      try {
        const element = page.locator(selector);
        const isVisible = await element.isVisible({ timeout: 1000 });
        console.log(`  ${selector}: ${isVisible ? '‚úÖ Visible' : '‚ùå Not visible'}`);
      } catch (e) {
        console.log(`  ${selector}: ‚ùå Not found`);
      }
    }
    
    // Ki·ªÉm tra console logs
    console.log('üìã Ki·ªÉm tra console logs...');
    page.on('console', msg => {
      if (msg.text().includes('team') || msg.text().includes('Team') || msg.text().includes('director')) {
        console.log(`üîç Console: ${msg.text()}`);
      }
    });
    
    await page.waitForTimeout(5000);
    
    console.log('‚úÖ Test ho√†n th√†nh!');
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error);
    await page.screenshot({ path: 'test-error.png', fullPage: true });
  } finally {
    await browser.close();
  }
}

testTeamLogic().catch(console.error);
