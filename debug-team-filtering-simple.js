/**
 * Simple debug script ƒë·ªÉ ki·ªÉm tra team filtering issue
 * Ninh ∆°i - Retail Sales Pulse iOS Project
 */

const { chromium } = require('playwright');

async function debugTeamFiltering() {
  console.log('üîç Starting team filtering debug...');
  
  const browser = await chromium.launch({ 
    headless: false,
    slowMo: 2000 
  });
  
  const page = await browser.newPage();
  
  try {
    // Navigate to login
    console.log('üåê Navigating to login page...');
    await page.goto('http://localhost:8088/login');
    await page.waitForLoadState('networkidle');
    
    // Login as Nguy·ªÖn M·∫°nh Linh
    console.log('üîê Logging in as Nguy·ªÖn M·∫°nh Linh...');
    
    // Click user select dropdown
    await page.click('[data-testid="user-select-trigger"]');
    await page.waitForTimeout(1000);
    
    // Select Nguy·ªÖn M·∫°nh Linh
    const userOption = page.locator('text="Nguy·ªÖn M·∫°nh Linh"').first();
    await userOption.click();
    await page.waitForTimeout(1000);
    
    // Enter password
    await page.fill('input[type="password"]', '123456');
    await page.waitForTimeout(500);
    
    // Click login
    await page.click('button[type="submit"]');
    await page.waitForTimeout(3000);
    
    // Wait for main app
    await page.waitForSelector('[data-testid="main-app"]', { timeout: 10000 });
    console.log('‚úÖ Login successful');
    
    // Check current user
    const currentUser = await page.evaluate(() => {
      return (window as any).currentUser;
    });
    console.log('üë§ Current user:', {
      name: currentUser?.name,
      team_id: currentUser?.team_id,
      role: currentUser?.role
    });
    
    // Navigate to Tasks
    console.log('üìã Navigating to Tasks...');
    await page.click('text="C√¥ng vi·ªác"');
    await page.waitForTimeout(2000);
    
    // Click "C√¥ng vi·ªác c·ªßa nh√≥m"
    console.log('üë• Clicking "C√¥ng vi·ªác c·ªßa nh√≥m"...');
    await page.click('text="C√¥ng vi·ªác c·ªßa nh√≥m"');
    await page.waitForTimeout(3000);
    
    // Check visible teams
    console.log('üè¢ Checking visible teams...');
    const teamCards = await page.locator('[data-testid="team-card"]').count();
    console.log(`üìä Found ${teamCards} team cards`);
    
    // Check for specific teams
    const team1Visible = await page.locator('text="NH√ìM 1 - VI·ªÜT ANH"').isVisible();
    const team2Visible = await page.locator('text="NH√ìM 2 - TH·∫¢O"').isVisible();
    
    console.log('üîç Team visibility:');
    console.log(`  - Team 1 (VI·ªÜT ANH): ${team1Visible ? '‚úÖ VISIBLE' : '‚ùå HIDDEN'}`);
    console.log(`  - Team 2 (TH·∫¢O): ${team2Visible ? '‚úÖ VISIBLE' : '‚ùå HIDDEN'}`);
    
    if (team1Visible) {
      console.log('üö® ISSUE FOUND: Team 1 should NOT be visible to Nguy·ªÖn M·∫°nh Linh!');
    }
    
    if (!team2Visible) {
      console.log('üö® ISSUE FOUND: Team 2 should be visible to Nguy·ªÖn M·∫°nh Linh!');
    }
    
    // If Team 2 is visible, click it
    if (team2Visible) {
      console.log('üéØ Clicking Team 2...');
      await page.click('text="NH√ìM 2 - TH·∫¢O"');
      await page.waitForTimeout(3000);
      
      // Check tasks
      console.log('üìã Checking tasks...');
      const team1Tasks = await page.locator('text="Task c·ªßa NH√ìM 1"').isVisible();
      const team2Tasks = await page.locator('text="Task c·ªßa NH√ìM 2"').isVisible();
      
      console.log('üîç Task visibility:');
      console.log(`  - Team 1 tasks: ${team1Tasks ? '‚úÖ VISIBLE' : '‚ùå HIDDEN'}`);
      console.log(`  - Team 2 tasks: ${team2Tasks ? '‚úÖ VISIBLE' : '‚ùå HIDDEN'}`);
      
      if (team1Tasks) {
        console.log('üö® ISSUE FOUND: Team 1 tasks should NOT be visible!');
      }
    }
    
    // Take screenshot
    await page.screenshot({ 
      path: 'debug-team-filtering-result.png',
      fullPage: true 
    });
    
    console.log('üì∏ Screenshot saved: debug-team-filtering-result.png');
    
    // Keep browser open for manual inspection
    console.log('üîç Browser will stay open for manual inspection...');
    console.log('Press Ctrl+C to close when done.');
    
    // Wait indefinitely
    await new Promise(() => {});
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    // Don't close browser automatically
    // await browser.close();
  }
}

debugTeamFiltering().catch(console.error);
