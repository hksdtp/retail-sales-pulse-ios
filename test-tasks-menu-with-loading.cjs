const { chromium } = require('playwright');

(async () => {
  console.log('üöÄ TEST MENU C√îNG VI·ªÜC - WITH LOADING WAIT');
  console.log('='.repeat(80));
  console.log('üìã Test s·∫Ω ch·ªù loading ho√†n th√†nh tr∆∞·ªõc khi ki·ªÉm tra ch·ª©c nƒÉng');
  console.log('='.repeat(80));
  
  const browser = await chromium.launch({ 
    headless: false,
    slowMo: 1000,
    args: ['--disable-web-security', '--disable-features=VizDisplayCompositor']
  });
  
  const page = await browser.newPage();
  
  try {
    // ==================== B∆Ø·ªöC 1: LOGIN ====================
    console.log('\nüìã B∆Ø·ªöC 1: LOGIN - ƒêƒÉng nh·∫≠p v√†o h·ªá th·ªëng');
    console.log('-'.repeat(60));
    
    await page.goto('http://localhost:8088/login', { 
      waitUntil: 'networkidle',
      timeout: 30000 
    });
    
    console.log('üîë ƒêƒÉng nh·∫≠p v·ªõi Kh·ªïng ƒê·ª©c M·∫°nh...');
    await page.fill('input[type="password"]', '123456');
    await page.click('button[type="submit"]');
    await page.waitForTimeout(4000);
    
    const loginResult = await page.evaluate(() => {
      const currentUrl = window.location.href;
      const loginSuccess = !currentUrl.includes('/login');
      return { loginSuccess, currentUrl };
    });
    
    console.log(loginResult.loginSuccess ? 
      '‚úÖ TH√ÄNH C√îNG: ƒêƒÉng nh·∫≠p th√†nh c√¥ng' : 
      '‚ùå TH·∫§T B·∫†I: ƒêƒÉng nh·∫≠p th·∫•t b·∫°i'
    );
    
    if (!loginResult.loginSuccess) {
      throw new Error('Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p - d·ª´ng test');
    }
    
    // ==================== B∆Ø·ªöC 2: NAVIGATE TO TASKS ====================
    console.log('\nüìã B∆Ø·ªöC 2: NAVIGATE TO TASKS - ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang tasks');
    console.log('-'.repeat(60));
    
    await page.goto('http://localhost:8088/tasks', { waitUntil: 'networkidle' });
    console.log('‚úÖ ƒê√£ ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn /tasks');
    
    // ==================== B∆Ø·ªöC 3: WAIT FOR LOADING ====================
    console.log('\nüìã B∆Ø·ªöC 3: WAIT FOR LOADING - Ch·ªù loading ho√†n th√†nh');
    console.log('-'.repeat(60));
    
    console.log('‚è≥ ƒêang ch·ªù loading screen bi·∫øn m·∫•t...');
    
    // Ch·ªù loading screen bi·∫øn m·∫•t (t·ªëi ƒëa 60 gi√¢y)
    try {
      await page.waitForSelector('.absolute.inset-0.backdrop-blur-sm', { 
        state: 'detached', 
        timeout: 60000 
      });
      console.log('‚úÖ Loading screen ƒë√£ bi·∫øn m·∫•t');
    } catch (error) {
      console.log('‚ö†Ô∏è Loading screen v·∫´n c√≤n sau 60 gi√¢y, ti·∫øp t·ª•c test...');
    }
    
    // Ch·ªù th√™m ƒë·ªÉ ƒë·∫£m b·∫£o data ƒë√£ load
    await page.waitForTimeout(5000);
    
    // ==================== B∆Ø·ªöC 4: CHECK PAGE STATE ====================
    console.log('\nüìã B∆Ø·ªöC 4: CHECK PAGE STATE - Ki·ªÉm tra tr·∫°ng th√°i trang');
    console.log('-'.repeat(60));
    
    const pageState = await page.evaluate(() => {
      const loadingElements = document.querySelectorAll('.absolute.inset-0.backdrop-blur-sm').length;
      const loadingText = document.body.innerText.includes('ƒêang kh·ªüi t·∫°o');
      const hasTaskElements = document.querySelectorAll('.task-item, .task-card, .task-row, tr').length;
      const hasButtons = document.querySelectorAll('button').length;
      const hasInputs = document.querySelectorAll('input').length;
      
      // Get all button texts
      const buttonTexts = Array.from(document.querySelectorAll('button')).map(btn => btn.textContent?.trim()).filter(Boolean);
      
      // Get page content
      const bodyText = document.body.innerText.substring(0, 1000);
      
      return {
        loadingElements,
        loadingText,
        hasTaskElements,
        hasButtons,
        hasInputs,
        buttonTexts,
        bodyText
      };
    });
    
    console.log('üìä Page state after loading:');
    console.log(`   - Loading elements: ${pageState.loadingElements}`);
    console.log(`   - Loading text: ${pageState.loadingText}`);
    console.log(`   - Task elements: ${pageState.hasTaskElements}`);
    console.log(`   - Buttons: ${pageState.hasButtons}`);
    console.log(`   - Inputs: ${pageState.hasInputs}`);
    console.log(`   - Button texts: ${JSON.stringify(pageState.buttonTexts)}`);
    
    // ==================== B∆Ø·ªöC 5: TEST TASK CREATION ====================
    console.log('\nüìã B∆Ø·ªöC 5: TEST TASK CREATION - Test t·∫°o c√¥ng vi·ªác');
    console.log('-'.repeat(60));
    
    let taskCreationResult = false;
    
    try {
      // T√¨m n√∫t "T·∫°o c√¥ng vi·ªác"
      const createTaskButton = page.locator('button').filter({ hasText: 'T·∫°o c√¥ng vi·ªác' });
      
      if (await createTaskButton.count() > 0) {
        console.log('‚úÖ T√¨m th·∫•y n√∫t "T·∫°o c√¥ng vi·ªác"');
        
        // Ch·ªù button c√≥ th·ªÉ click ƒë∆∞·ª£c
        await createTaskButton.waitFor({ state: 'visible', timeout: 10000 });
        
        // Force click n·∫øu b·ªã che ph·ªß
        await createTaskButton.click({ force: true });
        console.log('‚úÖ ƒê√£ click n√∫t "T·∫°o c√¥ng vi·ªác"');
        
        await page.waitForTimeout(3000);
        
        // Ki·ªÉm tra c√≥ modal/form t·∫°o task kh√¥ng
        const createFormCheck = await page.evaluate(() => {
          const hasModal = !!document.querySelector('.modal, .dialog, .popup, [role="dialog"]');
          const hasForm = !!document.querySelector('form');
          const hasTitleInput = !!document.querySelector('input[placeholder*="ti√™u ƒë·ªÅ"], input[placeholder*="title"], input[name*="title"]');
          const hasOverlay = !!document.querySelector('.overlay, .backdrop');
          
          return { hasModal, hasForm, hasTitleInput, hasOverlay };
        });
        
        taskCreationResult = createFormCheck.hasModal || createFormCheck.hasForm || createFormCheck.hasTitleInput;
        
        console.log('üìä Create form check:', createFormCheck);
        
        if (taskCreationResult) {
          console.log('‚úÖ Form t·∫°o task ƒë√£ m·ªü');
          
          // Close form
          await page.keyboard.press('Escape');
          await page.waitForTimeout(1000);
          console.log('‚úÖ ƒê√£ ƒë√≥ng form t·∫°o task');
        }
      } else {
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y n√∫t "T·∫°o c√¥ng vi·ªác"');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è L·ªói khi test t·∫°o task:', error.message);
    }
    
    console.log(taskCreationResult ? 
      '‚úÖ TH√ÄNH C√îNG: Ch·ª©c nƒÉng t·∫°o c√¥ng vi·ªác ho·∫°t ƒë·ªông' : 
      '‚ùå TH·∫§T B·∫†I: Ch·ª©c nƒÉng t·∫°o c√¥ng vi·ªác kh√¥ng ho·∫°t ƒë·ªông'
    );
    
    // ==================== B∆Ø·ªöC 6: TEST TASK LIST ====================
    console.log('\nüìã B∆Ø·ªöC 6: TEST TASK LIST - Ki·ªÉm tra danh s√°ch c√¥ng vi·ªác');
    console.log('-'.repeat(60));
    
    const taskListCheck = await page.evaluate(() => {
      // T√¨m c√°c task items
      const taskItems = Array.from(document.querySelectorAll('.task-item, .task-card, .task-row, tr, .list-item')).filter(el =>
        el.textContent && el.textContent.trim().length > 10
      );
      
      // T√¨m table ho·∫∑c list container
      const hasTable = !!document.querySelector('table');
      const hasList = !!document.querySelector('.task-list, .tasks-container, .list-container');
      
      // T√¨m c√°c filter/search elements
      const hasFilters = !!document.querySelector('select, .filter, .dropdown');
      const hasSearch = !!document.querySelector('input[type="search"], input[placeholder*="t√¨m"], input[placeholder*="search"]');
      
      return {
        taskItemsCount: taskItems.length,
        hasTable,
        hasList,
        hasFilters,
        hasSearch,
        taskItemsText: taskItems.slice(0, 3).map(item => item.textContent?.substring(0, 50))
      };
    });
    
    console.log('üìä Task list check:', taskListCheck);
    
    const hasTaskList = taskListCheck.taskItemsCount > 0 || taskListCheck.hasTable || taskListCheck.hasList;
    
    console.log(hasTaskList ? 
      '‚úÖ TH√ÄNH C√îNG: Danh s√°ch c√¥ng vi·ªác c√≥ d·ªØ li·ªáu' : 
      '‚ö†Ô∏è C·∫¢NH B√ÅO: Danh s√°ch c√¥ng vi·ªác tr·ªëng ho·∫∑c ch∆∞a load'
    );
    
    // ==================== B∆Ø·ªöC 7: TEST FILTERS AND SEARCH ====================
    console.log('\nüìã B∆Ø·ªöC 7: TEST FILTERS AND SEARCH - Test b·ªô l·ªçc v√† t√¨m ki·∫øm');
    console.log('-'.repeat(60));
    
    let filtersResult = false;
    let searchResult = false;
    
    try {
      // Test filters
      const filterElements = await page.locator('select, .filter, .dropdown').all();
      if (filterElements.length > 0) {
        console.log(`‚úÖ T√¨m th·∫•y ${filterElements.length} filter elements`);
        filtersResult = true;
      }
      
      // Test search
      const searchElements = await page.locator('input').filter({ 
        placeholder: /t√¨m|search|t√™n/i 
      }).all();
      
      if (searchElements.length > 0) {
        console.log(`‚úÖ T√¨m th·∫•y ${searchElements.length} search elements`);
        
        // Test search functionality
        await searchElements[0].fill('test');
        await page.waitForTimeout(1000);
        await searchElements[0].clear();
        
        searchResult = true;
        console.log('‚úÖ Search functionality tested');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è L·ªói khi test filters/search:', error.message);
    }
    
    console.log(filtersResult ? 
      '‚úÖ TH√ÄNH C√îNG: B·ªô l·ªçc ho·∫°t ƒë·ªông' : 
      '‚ùå TH·∫§T B·∫†I: Kh√¥ng t√¨m th·∫•y b·ªô l·ªçc'
    );
    
    console.log(searchResult ? 
      '‚úÖ TH√ÄNH C√îNG: T√¨m ki·∫øm ho·∫°t ƒë·ªông' : 
      '‚ùå TH·∫§T B·∫†I: Kh√¥ng t√¨m th·∫•y ch·ª©c nƒÉng t√¨m ki·∫øm'
    );
    
    // ==================== B∆Ø·ªöC 8: TEST TASK INTERACTION ====================
    console.log('\nüìã B∆Ø·ªöC 8: TEST TASK INTERACTION - Test t∆∞∆°ng t√°c v·ªõi task');
    console.log('-'.repeat(60));
    
    let taskInteractionResult = false;
    
    try {
      // T√¨m task items ƒë·ªÉ click
      const taskItems = await page.locator('.task-item, .task-card, .task-row, tr').filter({
        hasText: /.+/
      }).all();
      
      if (taskItems.length > 0) {
        console.log(`‚úÖ T√¨m th·∫•y ${taskItems.length} task items`);
        
        // Click v√†o task ƒë·∫ßu ti√™n
        await taskItems[0].click();
        await page.waitForTimeout(2000);
        
        // Ki·ªÉm tra c√≥ modal/details kh√¥ng
        const detailsCheck = await page.evaluate(() => {
          const hasModal = !!document.querySelector('.modal, .dialog, .popup, [role="dialog"]');
          const hasDetailContent = document.body.innerText.includes('Chi ti·∫øt') || 
                                 document.body.innerText.includes('Details');
          
          return { hasModal, hasDetailContent };
        });
        
        taskInteractionResult = detailsCheck.hasModal || detailsCheck.hasDetailContent;
        
        if (taskInteractionResult) {
          console.log('‚úÖ Task details opened');
          await page.keyboard.press('Escape');
          await page.waitForTimeout(500);
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è L·ªói khi test task interaction:', error.message);
    }
    
    console.log(taskInteractionResult ? 
      '‚úÖ TH√ÄNH C√îNG: T∆∞∆°ng t√°c v·ªõi task ho·∫°t ƒë·ªông' : 
      '‚ùå TH·∫§T B·∫†I: Kh√¥ng th·ªÉ t∆∞∆°ng t√°c v·ªõi task'
    );
    
    // ==================== FINAL SUMMARY ====================
    console.log('\n' + '='.repeat(80));
    console.log('üìä T·ªîNG K·∫æT TEST MENU C√îNG VI·ªÜC (WITH LOADING WAIT)');
    console.log('='.repeat(80));
    
    const finalResults = [
      { name: 'Login', success: true },
      { name: 'Navigation', success: true },
      { name: 'Loading Wait', success: !pageState.loadingText },
      { name: 'Task Creation', success: taskCreationResult },
      { name: 'Task List', success: hasTaskList },
      { name: 'Filters', success: filtersResult },
      { name: 'Search', success: searchResult },
      { name: 'Task Interaction', success: taskInteractionResult }
    ];
    
    let successCount = 0;
    finalResults.forEach((result, index) => {
      const status = result.success ? '‚úÖ TH√ÄNH C√îNG' : '‚ùå TH·∫§T B·∫†I';
      console.log(`${(index + 1).toString().padStart(2, '0')}. ${result.name.padEnd(20, ' ')}: ${status}`);
      if (result.success) successCount++;
    });
    
    console.log('\n' + '='.repeat(80));
    console.log(`üéØ K·∫æT QU·∫¢ CU·ªêI C√ôNG: ${successCount}/${finalResults.length} ch·ª©c nƒÉng ho·∫°t ƒë·ªông (${Math.round(successCount/finalResults.length*100)}%)`);
    
    if (successCount >= 6) {
      console.log('üéâ XU·∫§T S·∫ÆC! Menu C√¥ng vi·ªác ho·∫°t ƒë·ªông t·ªët!');
    } else if (successCount >= 4) {
      console.log('üëç T·ªêT! C√°c ch·ª©c nƒÉng c∆° b·∫£n ho·∫°t ƒë·ªông!');
    } else {
      console.log('‚ö†Ô∏è C·∫¶N C·∫¢I THI·ªÜN! Nhi·ªÅu ch·ª©c nƒÉng ch∆∞a ho·∫°t ƒë·ªông!');
    }
    
    console.log('='.repeat(80));
    
    // ƒê·ª£i 15 gi√¢y ƒë·ªÉ quan s√°t
    console.log('\n‚è≥ ƒê·ª£i 15 gi√¢y ƒë·ªÉ quan s√°t k·∫øt qu·∫£...');
    await page.waitForTimeout(15000);
    
  } catch (error) {
    console.error('‚ùå CRITICAL ERROR:', error.message);
  } finally {
    await browser.close();
    console.log('\nüèÅ TEST HO√ÄN TH√ÄNH');
  }
})();
